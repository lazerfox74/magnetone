
magnetone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4e0  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800a678  0800a678  0000b678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a780  0800a780  0000c160  2**0
                  CONTENTS
  4 .ARM          00000008  0800a780  0800a780  0000b780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a788  0800a788  0000c160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a788  0800a788  0000b788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a78c  0800a78c  0000b78c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000160  20000000  0800a790  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016ac  20000160  0800a8f0  0000c160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000180c  0800a8f0  0000c80c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c160  2**0
                  CONTENTS, READONLY
 12 .debug_info   000165c9  00000000  00000000  0000c190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cae  00000000  00000000  00022759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00026408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f16  00000000  00000000  000277d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a95b  00000000  00000000  000286e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c006  00000000  00000000  00043041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bf28  00000000  00000000  0005f047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000faf6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005314  00000000  00000000  000fafb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001002c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000160 	.word	0x20000160
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a660 	.word	0x0800a660

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000164 	.word	0x20000164
 80001d4:	0800a660 	.word	0x0800a660

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	@ 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2uiz>:
 80007a4:	004a      	lsls	r2, r1, #1
 80007a6:	d211      	bcs.n	80007cc <__aeabi_d2uiz+0x28>
 80007a8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007ac:	d211      	bcs.n	80007d2 <__aeabi_d2uiz+0x2e>
 80007ae:	d50d      	bpl.n	80007cc <__aeabi_d2uiz+0x28>
 80007b0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b8:	d40e      	bmi.n	80007d8 <__aeabi_d2uiz+0x34>
 80007ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ca:	4770      	bx	lr
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	4770      	bx	lr
 80007d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d6:	d102      	bne.n	80007de <__aeabi_d2uiz+0x3a>
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295
 80007dc:	4770      	bx	lr
 80007de:	f04f 0000 	mov.w	r0, #0
 80007e2:	4770      	bx	lr

080007e4 <__aeabi_d2f>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007ec:	bf24      	itt	cs
 80007ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007f6:	d90d      	bls.n	8000814 <__aeabi_d2f+0x30>
 80007f8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000800:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000804:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000808:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800080c:	bf08      	it	eq
 800080e:	f020 0001 	biceq.w	r0, r0, #1
 8000812:	4770      	bx	lr
 8000814:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000818:	d121      	bne.n	800085e <__aeabi_d2f+0x7a>
 800081a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800081e:	bfbc      	itt	lt
 8000820:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000824:	4770      	bxlt	lr
 8000826:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800082a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800082e:	f1c2 0218 	rsb	r2, r2, #24
 8000832:	f1c2 0c20 	rsb	ip, r2, #32
 8000836:	fa10 f30c 	lsls.w	r3, r0, ip
 800083a:	fa20 f002 	lsr.w	r0, r0, r2
 800083e:	bf18      	it	ne
 8000840:	f040 0001 	orrne.w	r0, r0, #1
 8000844:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000848:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800084c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000850:	ea40 000c 	orr.w	r0, r0, ip
 8000854:	fa23 f302 	lsr.w	r3, r3, r2
 8000858:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800085c:	e7cc      	b.n	80007f8 <__aeabi_d2f+0x14>
 800085e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000862:	d107      	bne.n	8000874 <__aeabi_d2f+0x90>
 8000864:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000868:	bf1e      	ittt	ne
 800086a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800086e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000872:	4770      	bxne	lr
 8000874:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000878:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop

08000884 <__aeabi_uldivmod>:
 8000884:	b953      	cbnz	r3, 800089c <__aeabi_uldivmod+0x18>
 8000886:	b94a      	cbnz	r2, 800089c <__aeabi_uldivmod+0x18>
 8000888:	2900      	cmp	r1, #0
 800088a:	bf08      	it	eq
 800088c:	2800      	cmpeq	r0, #0
 800088e:	bf1c      	itt	ne
 8000890:	f04f 31ff 	movne.w	r1, #4294967295
 8000894:	f04f 30ff 	movne.w	r0, #4294967295
 8000898:	f000 b96a 	b.w	8000b70 <__aeabi_idiv0>
 800089c:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008a4:	f000 f806 	bl	80008b4 <__udivmoddi4>
 80008a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b0:	b004      	add	sp, #16
 80008b2:	4770      	bx	lr

080008b4 <__udivmoddi4>:
 80008b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b8:	9d08      	ldr	r5, [sp, #32]
 80008ba:	460c      	mov	r4, r1
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d14e      	bne.n	800095e <__udivmoddi4+0xaa>
 80008c0:	4694      	mov	ip, r2
 80008c2:	458c      	cmp	ip, r1
 80008c4:	4686      	mov	lr, r0
 80008c6:	fab2 f282 	clz	r2, r2
 80008ca:	d962      	bls.n	8000992 <__udivmoddi4+0xde>
 80008cc:	b14a      	cbz	r2, 80008e2 <__udivmoddi4+0x2e>
 80008ce:	f1c2 0320 	rsb	r3, r2, #32
 80008d2:	4091      	lsls	r1, r2
 80008d4:	fa20 f303 	lsr.w	r3, r0, r3
 80008d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008dc:	4319      	orrs	r1, r3
 80008de:	fa00 fe02 	lsl.w	lr, r0, r2
 80008e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008e6:	fa1f f68c 	uxth.w	r6, ip
 80008ea:	fbb1 f4f7 	udiv	r4, r1, r7
 80008ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008f2:	fb07 1114 	mls	r1, r7, r4, r1
 80008f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008fa:	fb04 f106 	mul.w	r1, r4, r6
 80008fe:	4299      	cmp	r1, r3
 8000900:	d90a      	bls.n	8000918 <__udivmoddi4+0x64>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f104 30ff 	add.w	r0, r4, #4294967295
 800090a:	f080 8112 	bcs.w	8000b32 <__udivmoddi4+0x27e>
 800090e:	4299      	cmp	r1, r3
 8000910:	f240 810f 	bls.w	8000b32 <__udivmoddi4+0x27e>
 8000914:	3c02      	subs	r4, #2
 8000916:	4463      	add	r3, ip
 8000918:	1a59      	subs	r1, r3, r1
 800091a:	fa1f f38e 	uxth.w	r3, lr
 800091e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000922:	fb07 1110 	mls	r1, r7, r0, r1
 8000926:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800092a:	fb00 f606 	mul.w	r6, r0, r6
 800092e:	429e      	cmp	r6, r3
 8000930:	d90a      	bls.n	8000948 <__udivmoddi4+0x94>
 8000932:	eb1c 0303 	adds.w	r3, ip, r3
 8000936:	f100 31ff 	add.w	r1, r0, #4294967295
 800093a:	f080 80fc 	bcs.w	8000b36 <__udivmoddi4+0x282>
 800093e:	429e      	cmp	r6, r3
 8000940:	f240 80f9 	bls.w	8000b36 <__udivmoddi4+0x282>
 8000944:	4463      	add	r3, ip
 8000946:	3802      	subs	r0, #2
 8000948:	1b9b      	subs	r3, r3, r6
 800094a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800094e:	2100      	movs	r1, #0
 8000950:	b11d      	cbz	r5, 800095a <__udivmoddi4+0xa6>
 8000952:	40d3      	lsrs	r3, r2
 8000954:	2200      	movs	r2, #0
 8000956:	e9c5 3200 	strd	r3, r2, [r5]
 800095a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095e:	428b      	cmp	r3, r1
 8000960:	d905      	bls.n	800096e <__udivmoddi4+0xba>
 8000962:	b10d      	cbz	r5, 8000968 <__udivmoddi4+0xb4>
 8000964:	e9c5 0100 	strd	r0, r1, [r5]
 8000968:	2100      	movs	r1, #0
 800096a:	4608      	mov	r0, r1
 800096c:	e7f5      	b.n	800095a <__udivmoddi4+0xa6>
 800096e:	fab3 f183 	clz	r1, r3
 8000972:	2900      	cmp	r1, #0
 8000974:	d146      	bne.n	8000a04 <__udivmoddi4+0x150>
 8000976:	42a3      	cmp	r3, r4
 8000978:	d302      	bcc.n	8000980 <__udivmoddi4+0xcc>
 800097a:	4290      	cmp	r0, r2
 800097c:	f0c0 80f0 	bcc.w	8000b60 <__udivmoddi4+0x2ac>
 8000980:	1a86      	subs	r6, r0, r2
 8000982:	eb64 0303 	sbc.w	r3, r4, r3
 8000986:	2001      	movs	r0, #1
 8000988:	2d00      	cmp	r5, #0
 800098a:	d0e6      	beq.n	800095a <__udivmoddi4+0xa6>
 800098c:	e9c5 6300 	strd	r6, r3, [r5]
 8000990:	e7e3      	b.n	800095a <__udivmoddi4+0xa6>
 8000992:	2a00      	cmp	r2, #0
 8000994:	f040 8090 	bne.w	8000ab8 <__udivmoddi4+0x204>
 8000998:	eba1 040c 	sub.w	r4, r1, ip
 800099c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009a0:	fa1f f78c 	uxth.w	r7, ip
 80009a4:	2101      	movs	r1, #1
 80009a6:	fbb4 f6f8 	udiv	r6, r4, r8
 80009aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009ae:	fb08 4416 	mls	r4, r8, r6, r4
 80009b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009b6:	fb07 f006 	mul.w	r0, r7, r6
 80009ba:	4298      	cmp	r0, r3
 80009bc:	d908      	bls.n	80009d0 <__udivmoddi4+0x11c>
 80009be:	eb1c 0303 	adds.w	r3, ip, r3
 80009c2:	f106 34ff 	add.w	r4, r6, #4294967295
 80009c6:	d202      	bcs.n	80009ce <__udivmoddi4+0x11a>
 80009c8:	4298      	cmp	r0, r3
 80009ca:	f200 80cd 	bhi.w	8000b68 <__udivmoddi4+0x2b4>
 80009ce:	4626      	mov	r6, r4
 80009d0:	1a1c      	subs	r4, r3, r0
 80009d2:	fa1f f38e 	uxth.w	r3, lr
 80009d6:	fbb4 f0f8 	udiv	r0, r4, r8
 80009da:	fb08 4410 	mls	r4, r8, r0, r4
 80009de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009e2:	fb00 f707 	mul.w	r7, r0, r7
 80009e6:	429f      	cmp	r7, r3
 80009e8:	d908      	bls.n	80009fc <__udivmoddi4+0x148>
 80009ea:	eb1c 0303 	adds.w	r3, ip, r3
 80009ee:	f100 34ff 	add.w	r4, r0, #4294967295
 80009f2:	d202      	bcs.n	80009fa <__udivmoddi4+0x146>
 80009f4:	429f      	cmp	r7, r3
 80009f6:	f200 80b0 	bhi.w	8000b5a <__udivmoddi4+0x2a6>
 80009fa:	4620      	mov	r0, r4
 80009fc:	1bdb      	subs	r3, r3, r7
 80009fe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a02:	e7a5      	b.n	8000950 <__udivmoddi4+0x9c>
 8000a04:	f1c1 0620 	rsb	r6, r1, #32
 8000a08:	408b      	lsls	r3, r1
 8000a0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000a0e:	431f      	orrs	r7, r3
 8000a10:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a14:	fa04 f301 	lsl.w	r3, r4, r1
 8000a18:	ea43 030c 	orr.w	r3, r3, ip
 8000a1c:	40f4      	lsrs	r4, r6
 8000a1e:	fa00 f801 	lsl.w	r8, r0, r1
 8000a22:	0c38      	lsrs	r0, r7, #16
 8000a24:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a28:	fbb4 fef0 	udiv	lr, r4, r0
 8000a2c:	fa1f fc87 	uxth.w	ip, r7
 8000a30:	fb00 441e 	mls	r4, r0, lr, r4
 8000a34:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a38:	fb0e f90c 	mul.w	r9, lr, ip
 8000a3c:	45a1      	cmp	r9, r4
 8000a3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000a42:	d90a      	bls.n	8000a5a <__udivmoddi4+0x1a6>
 8000a44:	193c      	adds	r4, r7, r4
 8000a46:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a4a:	f080 8084 	bcs.w	8000b56 <__udivmoddi4+0x2a2>
 8000a4e:	45a1      	cmp	r9, r4
 8000a50:	f240 8081 	bls.w	8000b56 <__udivmoddi4+0x2a2>
 8000a54:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a58:	443c      	add	r4, r7
 8000a5a:	eba4 0409 	sub.w	r4, r4, r9
 8000a5e:	fa1f f983 	uxth.w	r9, r3
 8000a62:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a66:	fb00 4413 	mls	r4, r0, r3, r4
 8000a6a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a6e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a72:	45a4      	cmp	ip, r4
 8000a74:	d907      	bls.n	8000a86 <__udivmoddi4+0x1d2>
 8000a76:	193c      	adds	r4, r7, r4
 8000a78:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a7c:	d267      	bcs.n	8000b4e <__udivmoddi4+0x29a>
 8000a7e:	45a4      	cmp	ip, r4
 8000a80:	d965      	bls.n	8000b4e <__udivmoddi4+0x29a>
 8000a82:	3b02      	subs	r3, #2
 8000a84:	443c      	add	r4, r7
 8000a86:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a8a:	fba0 9302 	umull	r9, r3, r0, r2
 8000a8e:	eba4 040c 	sub.w	r4, r4, ip
 8000a92:	429c      	cmp	r4, r3
 8000a94:	46ce      	mov	lr, r9
 8000a96:	469c      	mov	ip, r3
 8000a98:	d351      	bcc.n	8000b3e <__udivmoddi4+0x28a>
 8000a9a:	d04e      	beq.n	8000b3a <__udivmoddi4+0x286>
 8000a9c:	b155      	cbz	r5, 8000ab4 <__udivmoddi4+0x200>
 8000a9e:	ebb8 030e 	subs.w	r3, r8, lr
 8000aa2:	eb64 040c 	sbc.w	r4, r4, ip
 8000aa6:	fa04 f606 	lsl.w	r6, r4, r6
 8000aaa:	40cb      	lsrs	r3, r1
 8000aac:	431e      	orrs	r6, r3
 8000aae:	40cc      	lsrs	r4, r1
 8000ab0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	e750      	b.n	800095a <__udivmoddi4+0xa6>
 8000ab8:	f1c2 0320 	rsb	r3, r2, #32
 8000abc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ac0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	430c      	orrs	r4, r1
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ad4:	fa1f f78c 	uxth.w	r7, ip
 8000ad8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000adc:	fb08 3110 	mls	r1, r8, r0, r3
 8000ae0:	0c23      	lsrs	r3, r4, #16
 8000ae2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae6:	fb00 f107 	mul.w	r1, r0, r7
 8000aea:	4299      	cmp	r1, r3
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0x24c>
 8000aee:	eb1c 0303 	adds.w	r3, ip, r3
 8000af2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000af6:	d22c      	bcs.n	8000b52 <__udivmoddi4+0x29e>
 8000af8:	4299      	cmp	r1, r3
 8000afa:	d92a      	bls.n	8000b52 <__udivmoddi4+0x29e>
 8000afc:	3802      	subs	r0, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b08:	fb08 3311 	mls	r3, r8, r1, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb01 f307 	mul.w	r3, r1, r7
 8000b14:	42a3      	cmp	r3, r4
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x276>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b20:	d213      	bcs.n	8000b4a <__udivmoddi4+0x296>
 8000b22:	42a3      	cmp	r3, r4
 8000b24:	d911      	bls.n	8000b4a <__udivmoddi4+0x296>
 8000b26:	3902      	subs	r1, #2
 8000b28:	4464      	add	r4, ip
 8000b2a:	1ae4      	subs	r4, r4, r3
 8000b2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b30:	e739      	b.n	80009a6 <__udivmoddi4+0xf2>
 8000b32:	4604      	mov	r4, r0
 8000b34:	e6f0      	b.n	8000918 <__udivmoddi4+0x64>
 8000b36:	4608      	mov	r0, r1
 8000b38:	e706      	b.n	8000948 <__udivmoddi4+0x94>
 8000b3a:	45c8      	cmp	r8, r9
 8000b3c:	d2ae      	bcs.n	8000a9c <__udivmoddi4+0x1e8>
 8000b3e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b42:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b46:	3801      	subs	r0, #1
 8000b48:	e7a8      	b.n	8000a9c <__udivmoddi4+0x1e8>
 8000b4a:	4631      	mov	r1, r6
 8000b4c:	e7ed      	b.n	8000b2a <__udivmoddi4+0x276>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	e799      	b.n	8000a86 <__udivmoddi4+0x1d2>
 8000b52:	4630      	mov	r0, r6
 8000b54:	e7d4      	b.n	8000b00 <__udivmoddi4+0x24c>
 8000b56:	46d6      	mov	lr, sl
 8000b58:	e77f      	b.n	8000a5a <__udivmoddi4+0x1a6>
 8000b5a:	4463      	add	r3, ip
 8000b5c:	3802      	subs	r0, #2
 8000b5e:	e74d      	b.n	80009fc <__udivmoddi4+0x148>
 8000b60:	4606      	mov	r6, r0
 8000b62:	4623      	mov	r3, r4
 8000b64:	4608      	mov	r0, r1
 8000b66:	e70f      	b.n	8000988 <__udivmoddi4+0xd4>
 8000b68:	3e02      	subs	r6, #2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	e730      	b.n	80009d0 <__udivmoddi4+0x11c>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_idiv0>:
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <HAL_TIM_PWM_PulseFinishedCallback>:
static void MX_ADC1_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM5_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b84:	d101      	bne.n	8000b8a <HAL_TIM_PWM_PulseFinishedCallback+0x16>
	{
		  SK6812_Callback();
 8000b86:	f001 f997 	bl	8001eb8 <SK6812_Callback>
	}
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0c      	ldr	r2, [pc, #48]	@ (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d10a      	bne.n	8000bbc <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		//start adc readings
		keyCount = 0;
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
		selectMuxPin(0);
 8000bac:	2000      	movs	r0, #0
 8000bae:	f001 f86f 	bl	8001c90 <selectMuxPin>
		HAL_ADC_Start_DMA(&hadc1,&keyData[0], 2);
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	4909      	ldr	r1, [pc, #36]	@ (8000bdc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000bb6:	480a      	ldr	r0, [pc, #40]	@ (8000be0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000bb8:	f001 fda4 	bl	8002704 <HAL_ADC_Start_DMA>
	}
	if(htim->Instance == TIM5)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a08      	ldr	r2, [pc, #32]	@ (8000be4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d102      	bne.n	8000bcc <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		SK6812_TIM_FLAG = 1;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	701a      	strb	r2, [r3, #0]
	}
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40000800 	.word	0x40000800
 8000bd8:	200003e4 	.word	0x200003e4
 8000bdc:	200003a4 	.word	0x200003a4
 8000be0:	2000017c 	.word	0x2000017c
 8000be4:	40000c00 	.word	0x40000c00
 8000be8:	2000035c 	.word	0x2000035c

08000bec <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]

	if(keyCount >= (numHalfKeys - 1))
 8000bf4:	4b24      	ldr	r3, [pc, #144]	@ (8000c88 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b06      	cmp	r3, #6
 8000bfa:	d92a      	bls.n	8000c52 <HAL_ADC_ConvCpltCallback+0x66>
	{

//		dump the values
		for(uint8_t i = 0; i < numHalfKeys ; i++)
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	73fb      	strb	r3, [r7, #15]
 8000c00:	e020      	b.n	8000c44 <HAL_ADC_ConvCpltCallback+0x58>
		{
			noteArray[i].rawVal = (uint16_t)keyData[i * 2];
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	4a21      	ldr	r2, [pc, #132]	@ (8000c8c <HAL_ADC_ConvCpltCallback+0xa0>)
 8000c08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
 8000c0e:	b290      	uxth	r0, r2
 8000c10:	4a1f      	ldr	r2, [pc, #124]	@ (8000c90 <HAL_ADC_ConvCpltCallback+0xa4>)
 8000c12:	212c      	movs	r1, #44	@ 0x2c
 8000c14:	fb01 f303 	mul.w	r3, r1, r3
 8000c18:	4413      	add	r3, r2
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	801a      	strh	r2, [r3, #0]
			noteArray[i + numHalfKeys].rawVal = (uint16_t)keyData[i * 2 + 1];
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	3301      	adds	r3, #1
 8000c24:	4a19      	ldr	r2, [pc, #100]	@ (8000c8c <HAL_ADC_ConvCpltCallback+0xa0>)
 8000c26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	3308      	adds	r3, #8
 8000c2e:	b290      	uxth	r0, r2
 8000c30:	4a17      	ldr	r2, [pc, #92]	@ (8000c90 <HAL_ADC_ConvCpltCallback+0xa4>)
 8000c32:	212c      	movs	r1, #44	@ 0x2c
 8000c34:	fb01 f303 	mul.w	r3, r1, r3
 8000c38:	4413      	add	r3, r2
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 0; i < numHalfKeys ; i++)
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
 8000c40:	3301      	adds	r3, #1
 8000c42:	73fb      	strb	r3, [r7, #15]
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	2b07      	cmp	r3, #7
 8000c48:	d9db      	bls.n	8000c02 <HAL_ADC_ConvCpltCallback+0x16>
		}
		//set complete flag
		ADC_COMPLETE_FLAG = 1;
 8000c4a:	4b12      	ldr	r3, [pc, #72]	@ (8000c94 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	701a      	strb	r2, [r3, #0]
		keyCount++;
		selectMuxPin(keyCount);
		HAL_ADC_Start_DMA(&hadc1, &keyData[keyCount * 2], 2);
	}

}
 8000c50:	e015      	b.n	8000c7e <HAL_ADC_ConvCpltCallback+0x92>
		keyCount++;
 8000c52:	4b0d      	ldr	r3, [pc, #52]	@ (8000c88 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	3301      	adds	r3, #1
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c88 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000c5c:	701a      	strb	r2, [r3, #0]
		selectMuxPin(keyCount);
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f001 f814 	bl	8001c90 <selectMuxPin>
		HAL_ADC_Start_DMA(&hadc1, &keyData[keyCount * 2], 2);
 8000c68:	4b07      	ldr	r3, [pc, #28]	@ (8000c88 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	4a06      	ldr	r2, [pc, #24]	@ (8000c8c <HAL_ADC_ConvCpltCallback+0xa0>)
 8000c72:	4413      	add	r3, r2
 8000c74:	2202      	movs	r2, #2
 8000c76:	4619      	mov	r1, r3
 8000c78:	4807      	ldr	r0, [pc, #28]	@ (8000c98 <HAL_ADC_ConvCpltCallback+0xac>)
 8000c7a:	f001 fd43 	bl	8002704 <HAL_ADC_Start_DMA>
}
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200003e4 	.word	0x200003e4
 8000c8c:	200003a4 	.word	0x200003a4
 8000c90:	200003e8 	.word	0x200003e8
 8000c94:	200003a2 	.word	0x200003a2
 8000c98:	2000017c 	.word	0x2000017c

08000c9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca0:	f001 fb46 	bl	8002330 <HAL_Init>

  /* USER CODE BEGIN Init */

  midiInit();
 8000ca4:	f000 fac8 	bl	8001238 <midiInit>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca8:	f000 f83c 	bl	8000d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cac:	f000 fa48 	bl	8001140 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cb0:	f000 fa10 	bl	80010d4 <MX_DMA_Init>
  MX_TIM2_Init();
 8000cb4:	f000 f8fe 	bl	8000eb4 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000cb8:	f000 f89c 	bl	8000df4 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000cbc:	f000 f96e 	bl	8000f9c <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000cc0:	f009 f874 	bl	8009dac <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 8000cc4:	f000 f9b8 	bl	8001038 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  keyCount = 0;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <main+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
  ADC_COMPLETE_FLAG = 0;
 8000cce:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <main+0x78>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
//  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&keyData[keyCount * 2], 2);




  SK6812_Init();
 8000cd4:	f001 f844 	bl	8001d60 <SK6812_Init>


  noteInit();
 8000cd8:	f000 fba4 	bl	8001424 <noteInit>

  //start keyupdate timer
  HAL_TIM_Base_Start_IT(&htim4);
 8000cdc:	480e      	ldr	r0, [pc, #56]	@ (8000d18 <main+0x7c>)
 8000cde:	f004 fdd5 	bl	800588c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(ADC_COMPLETE_FLAG == 1)
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <main+0x78>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d1fb      	bne.n	8000ce2 <main+0x46>
	  {
		  ADC_COMPLETE_FLAG = 0;
 8000cea:	4b0a      	ldr	r3, [pc, #40]	@ (8000d14 <main+0x78>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]

		  noteScan();
 8000cf0:	f000 fd0e 	bl	8001710 <noteScan>
		  if(txPtrIn != 0)
 8000cf4:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <main+0x80>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <main+0x64>
		  {
			  MidiSend();
 8000cfc:	f000 fad4 	bl	80012a8 <MidiSend>
		  }

		  if(SK6812_UPDATE_READY == 1)
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <main+0x84>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d0ec      	beq.n	8000ce2 <main+0x46>
		  {
//			  SK6812_TIM_FLAG = 0;
			  SK6812_Update();
 8000d08:	f001 f87e 	bl	8001e08 <SK6812_Update>
	  if(ADC_COMPLETE_FLAG == 1)
 8000d0c:	e7e9      	b.n	8000ce2 <main+0x46>
 8000d0e:	bf00      	nop
 8000d10:	200003e4 	.word	0x200003e4
 8000d14:	200003a2 	.word	0x200003a2
 8000d18:	2000026c 	.word	0x2000026c
 8000d1c:	200003a0 	.word	0x200003a0
 8000d20:	20000e2c 	.word	0x20000e2c

08000d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b094      	sub	sp, #80	@ 0x50
 8000d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2a:	f107 0320 	add.w	r3, r7, #32
 8000d2e:	2230      	movs	r2, #48	@ 0x30
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f009 fc68 	bl	800a608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	4b27      	ldr	r3, [pc, #156]	@ (8000dec <SystemClock_Config+0xc8>)
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d50:	4a26      	ldr	r2, [pc, #152]	@ (8000dec <SystemClock_Config+0xc8>)
 8000d52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d56:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d58:	4b24      	ldr	r3, [pc, #144]	@ (8000dec <SystemClock_Config+0xc8>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d64:	2300      	movs	r3, #0
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	4b21      	ldr	r3, [pc, #132]	@ (8000df0 <SystemClock_Config+0xcc>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a20      	ldr	r2, [pc, #128]	@ (8000df0 <SystemClock_Config+0xcc>)
 8000d6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d72:	6013      	str	r3, [r2, #0]
 8000d74:	4b1e      	ldr	r3, [pc, #120]	@ (8000df0 <SystemClock_Config+0xcc>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d80:	2301      	movs	r3, #1
 8000d82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d8e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d94:	2319      	movs	r3, #25
 8000d96:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d98:	23c0      	movs	r3, #192	@ 0xc0
 8000d9a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000da0:	2304      	movs	r3, #4
 8000da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da4:	f107 0320 	add.w	r3, r7, #32
 8000da8:	4618      	mov	r0, r3
 8000daa:	f004 f8ef 	bl	8004f8c <HAL_RCC_OscConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000db4:	f000 fa3a 	bl	800122c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db8:	230f      	movs	r3, #15
 8000dba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	2103      	movs	r1, #3
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f004 fb51 	bl	800547c <HAL_RCC_ClockConfig>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000de0:	f000 fa24 	bl	800122c <Error_Handler>
  }
}
 8000de4:	bf00      	nop
 8000de6:	3750      	adds	r7, #80	@ 0x50
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40007000 	.word	0x40007000

08000df4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e06:	4b28      	ldr	r3, [pc, #160]	@ (8000ea8 <MX_ADC1_Init+0xb4>)
 8000e08:	4a28      	ldr	r2, [pc, #160]	@ (8000eac <MX_ADC1_Init+0xb8>)
 8000e0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e0c:	4b26      	ldr	r3, [pc, #152]	@ (8000ea8 <MX_ADC1_Init+0xb4>)
 8000e0e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e14:	4b24      	ldr	r3, [pc, #144]	@ (8000ea8 <MX_ADC1_Init+0xb4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e1a:	4b23      	ldr	r3, [pc, #140]	@ (8000ea8 <MX_ADC1_Init+0xb4>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e20:	4b21      	ldr	r3, [pc, #132]	@ (8000ea8 <MX_ADC1_Init+0xb4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e26:	4b20      	ldr	r3, [pc, #128]	@ (8000ea8 <MX_ADC1_Init+0xb4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea8 <MX_ADC1_Init+0xb4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e34:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea8 <MX_ADC1_Init+0xb4>)
 8000e36:	4a1e      	ldr	r2, [pc, #120]	@ (8000eb0 <MX_ADC1_Init+0xbc>)
 8000e38:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea8 <MX_ADC1_Init+0xb4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000e40:	4b19      	ldr	r3, [pc, #100]	@ (8000ea8 <MX_ADC1_Init+0xb4>)
 8000e42:	2202      	movs	r2, #2
 8000e44:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e46:	4b18      	ldr	r3, [pc, #96]	@ (8000ea8 <MX_ADC1_Init+0xb4>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ea8 <MX_ADC1_Init+0xb4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e54:	4814      	ldr	r0, [pc, #80]	@ (8000ea8 <MX_ADC1_Init+0xb4>)
 8000e56:	f001 fb01 	bl	800245c <HAL_ADC_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e60:	f000 f9e4 	bl	800122c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e64:	2308      	movs	r3, #8
 8000e66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e70:	463b      	mov	r3, r7
 8000e72:	4619      	mov	r1, r3
 8000e74:	480c      	ldr	r0, [pc, #48]	@ (8000ea8 <MX_ADC1_Init+0xb4>)
 8000e76:	f001 fd53 	bl	8002920 <HAL_ADC_ConfigChannel>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e80:	f000 f9d4 	bl	800122c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e84:	2309      	movs	r3, #9
 8000e86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e8c:	463b      	mov	r3, r7
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4805      	ldr	r0, [pc, #20]	@ (8000ea8 <MX_ADC1_Init+0xb4>)
 8000e92:	f001 fd45 	bl	8002920 <HAL_ADC_ConfigChannel>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e9c:	f000 f9c6 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ea0:	bf00      	nop
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	2000017c 	.word	0x2000017c
 8000eac:	40012000 	.word	0x40012000
 8000eb0:	0f000001 	.word	0x0f000001

08000eb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08e      	sub	sp, #56	@ 0x38
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec8:	f107 0320 	add.w	r3, r7, #32
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
 8000ee0:	615a      	str	r2, [r3, #20]
 8000ee2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ee4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f98 <MX_TIM2_Init+0xe4>)
 8000ee6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000eea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000eec:	4b2a      	ldr	r3, [pc, #168]	@ (8000f98 <MX_TIM2_Init+0xe4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef2:	4b29      	ldr	r3, [pc, #164]	@ (8000f98 <MX_TIM2_Init+0xe4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 120-1;
 8000ef8:	4b27      	ldr	r3, [pc, #156]	@ (8000f98 <MX_TIM2_Init+0xe4>)
 8000efa:	2277      	movs	r2, #119	@ 0x77
 8000efc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efe:	4b26      	ldr	r3, [pc, #152]	@ (8000f98 <MX_TIM2_Init+0xe4>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f04:	4b24      	ldr	r3, [pc, #144]	@ (8000f98 <MX_TIM2_Init+0xe4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f0a:	4823      	ldr	r0, [pc, #140]	@ (8000f98 <MX_TIM2_Init+0xe4>)
 8000f0c:	f004 fc6e 	bl	80057ec <HAL_TIM_Base_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000f16:	f000 f989 	bl	800122c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f24:	4619      	mov	r1, r3
 8000f26:	481c      	ldr	r0, [pc, #112]	@ (8000f98 <MX_TIM2_Init+0xe4>)
 8000f28:	f005 f994 	bl	8006254 <HAL_TIM_ConfigClockSource>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000f32:	f000 f97b 	bl	800122c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f36:	4818      	ldr	r0, [pc, #96]	@ (8000f98 <MX_TIM2_Init+0xe4>)
 8000f38:	f004 fd0a 	bl	8005950 <HAL_TIM_PWM_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000f42:	f000 f973 	bl	800122c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f4e:	f107 0320 	add.w	r3, r7, #32
 8000f52:	4619      	mov	r1, r3
 8000f54:	4810      	ldr	r0, [pc, #64]	@ (8000f98 <MX_TIM2_Init+0xe4>)
 8000f56:	f005 fe1f 	bl	8006b98 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000f60:	f000 f964 	bl	800122c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f64:	2360      	movs	r3, #96	@ 0x60
 8000f66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2208      	movs	r2, #8
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4807      	ldr	r0, [pc, #28]	@ (8000f98 <MX_TIM2_Init+0xe4>)
 8000f7c:	f005 f8a8 	bl	80060d0 <HAL_TIM_PWM_ConfigChannel>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000f86:	f000 f951 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f8a:	4803      	ldr	r0, [pc, #12]	@ (8000f98 <MX_TIM2_Init+0xe4>)
 8000f8c:	f001 f8e6 	bl	800215c <HAL_TIM_MspPostInit>

}
 8000f90:	bf00      	nop
 8000f92:	3738      	adds	r7, #56	@ 0x38
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000224 	.word	0x20000224

08000f9c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa2:	f107 0308 	add.w	r3, r7, #8
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001030 <MX_TIM4_Init+0x94>)
 8000fba:	4a1e      	ldr	r2, [pc, #120]	@ (8001034 <MX_TIM4_Init+0x98>)
 8000fbc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 96-1;
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8001030 <MX_TIM4_Init+0x94>)
 8000fc0:	225f      	movs	r2, #95	@ 0x5f
 8000fc2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8001030 <MX_TIM4_Init+0x94>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000-1;
 8000fca:	4b19      	ldr	r3, [pc, #100]	@ (8001030 <MX_TIM4_Init+0x94>)
 8000fcc:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000fd0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd2:	4b17      	ldr	r3, [pc, #92]	@ (8001030 <MX_TIM4_Init+0x94>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd8:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <MX_TIM4_Init+0x94>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000fde:	4814      	ldr	r0, [pc, #80]	@ (8001030 <MX_TIM4_Init+0x94>)
 8000fe0:	f004 fc04 	bl	80057ec <HAL_TIM_Base_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000fea:	f000 f91f 	bl	800122c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ff2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ff4:	f107 0308 	add.w	r3, r7, #8
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	480d      	ldr	r0, [pc, #52]	@ (8001030 <MX_TIM4_Init+0x94>)
 8000ffc:	f005 f92a 	bl	8006254 <HAL_TIM_ConfigClockSource>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001006:	f000 f911 	bl	800122c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100a:	2300      	movs	r3, #0
 800100c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001012:	463b      	mov	r3, r7
 8001014:	4619      	mov	r1, r3
 8001016:	4806      	ldr	r0, [pc, #24]	@ (8001030 <MX_TIM4_Init+0x94>)
 8001018:	f005 fdbe 	bl	8006b98 <HAL_TIMEx_MasterConfigSynchronization>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001022:	f000 f903 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	2000026c 	.word	0x2000026c
 8001034:	40000800 	.word	0x40000800

08001038 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800103e:	f107 0308 	add.w	r3, r7, #8
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800104c:	463b      	mov	r3, r7
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001054:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <MX_TIM5_Init+0x90>)
 8001056:	4a1d      	ldr	r2, [pc, #116]	@ (80010cc <MX_TIM5_Init+0x94>)
 8001058:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 96-1;
 800105a:	4b1b      	ldr	r3, [pc, #108]	@ (80010c8 <MX_TIM5_Init+0x90>)
 800105c:	225f      	movs	r2, #95	@ 0x5f
 800105e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001060:	4b19      	ldr	r3, [pc, #100]	@ (80010c8 <MX_TIM5_Init+0x90>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000-1;
 8001066:	4b18      	ldr	r3, [pc, #96]	@ (80010c8 <MX_TIM5_Init+0x90>)
 8001068:	4a19      	ldr	r2, [pc, #100]	@ (80010d0 <MX_TIM5_Init+0x98>)
 800106a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106c:	4b16      	ldr	r3, [pc, #88]	@ (80010c8 <MX_TIM5_Init+0x90>)
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <MX_TIM5_Init+0x90>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001078:	4813      	ldr	r0, [pc, #76]	@ (80010c8 <MX_TIM5_Init+0x90>)
 800107a:	f004 fbb7 	bl	80057ec <HAL_TIM_Base_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8001084:	f000 f8d2 	bl	800122c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001088:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800108c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800108e:	f107 0308 	add.w	r3, r7, #8
 8001092:	4619      	mov	r1, r3
 8001094:	480c      	ldr	r0, [pc, #48]	@ (80010c8 <MX_TIM5_Init+0x90>)
 8001096:	f005 f8dd 	bl	8006254 <HAL_TIM_ConfigClockSource>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 80010a0:	f000 f8c4 	bl	800122c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a4:	2300      	movs	r3, #0
 80010a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010ac:	463b      	mov	r3, r7
 80010ae:	4619      	mov	r1, r3
 80010b0:	4805      	ldr	r0, [pc, #20]	@ (80010c8 <MX_TIM5_Init+0x90>)
 80010b2:	f005 fd71 	bl	8006b98 <HAL_TIMEx_MasterConfigSynchronization>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 80010bc:	f000 f8b6 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200002b4 	.word	0x200002b4
 80010cc:	40000c00 	.word	0x40000c00
 80010d0:	0001869f 	.word	0x0001869f

080010d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	4b17      	ldr	r3, [pc, #92]	@ (800113c <MX_DMA_Init+0x68>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a16      	ldr	r2, [pc, #88]	@ (800113c <MX_DMA_Init+0x68>)
 80010e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b14      	ldr	r3, [pc, #80]	@ (800113c <MX_DMA_Init+0x68>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	603b      	str	r3, [r7, #0]
 80010fa:	4b10      	ldr	r3, [pc, #64]	@ (800113c <MX_DMA_Init+0x68>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a0f      	ldr	r2, [pc, #60]	@ (800113c <MX_DMA_Init+0x68>)
 8001100:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <MX_DMA_Init+0x68>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	200c      	movs	r0, #12
 8001118:	f001 ff97 	bl	800304a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800111c:	200c      	movs	r0, #12
 800111e:	f001 ffb0 	bl	8003082 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2100      	movs	r1, #0
 8001126:	2038      	movs	r0, #56	@ 0x38
 8001128:	f001 ff8f 	bl	800304a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800112c:	2038      	movs	r0, #56	@ 0x38
 800112e:	f001 ffa8 	bl	8003082 <HAL_NVIC_EnableIRQ>

}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800

08001140 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	@ 0x28
 8001144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b31      	ldr	r3, [pc, #196]	@ (8001220 <MX_GPIO_Init+0xe0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a30      	ldr	r2, [pc, #192]	@ (8001220 <MX_GPIO_Init+0xe0>)
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b2e      	ldr	r3, [pc, #184]	@ (8001220 <MX_GPIO_Init+0xe0>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b2a      	ldr	r3, [pc, #168]	@ (8001220 <MX_GPIO_Init+0xe0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a29      	ldr	r2, [pc, #164]	@ (8001220 <MX_GPIO_Init+0xe0>)
 800117c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b27      	ldr	r3, [pc, #156]	@ (8001220 <MX_GPIO_Init+0xe0>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	4b23      	ldr	r3, [pc, #140]	@ (8001220 <MX_GPIO_Init+0xe0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a22      	ldr	r2, [pc, #136]	@ (8001220 <MX_GPIO_Init+0xe0>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b20      	ldr	r3, [pc, #128]	@ (8001220 <MX_GPIO_Init+0xe0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001220 <MX_GPIO_Init+0xe0>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001220 <MX_GPIO_Init+0xe0>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ba:	4b19      	ldr	r3, [pc, #100]	@ (8001220 <MX_GPIO_Init+0xe0>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011cc:	4815      	ldr	r0, [pc, #84]	@ (8001224 <MX_GPIO_Init+0xe4>)
 80011ce:	f002 fc89 	bl	8003ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, muxA_Pin|muxB_Pin|muxC_Pin, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2138      	movs	r1, #56	@ 0x38
 80011d6:	4814      	ldr	r0, [pc, #80]	@ (8001228 <MX_GPIO_Init+0xe8>)
 80011d8:	f002 fc84 	bl	8003ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 80011dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	480b      	ldr	r0, [pc, #44]	@ (8001224 <MX_GPIO_Init+0xe4>)
 80011f6:	f002 faf1 	bl	80037dc <HAL_GPIO_Init>

  /*Configure GPIO pins : muxA_Pin muxB_Pin muxC_Pin */
  GPIO_InitStruct.Pin = muxA_Pin|muxB_Pin|muxC_Pin;
 80011fa:	2338      	movs	r3, #56	@ 0x38
 80011fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	@ (8001228 <MX_GPIO_Init+0xe8>)
 8001212:	f002 fae3 	bl	80037dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001216:	bf00      	nop
 8001218:	3728      	adds	r7, #40	@ 0x28
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800
 8001224:	40020800 	.word	0x40020800
 8001228:	40020400 	.word	0x40020400

0800122c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001230:	b672      	cpsid	i
}
 8001232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <Error_Handler+0x8>

08001238 <midiInit>:
const uint8_t MidiCtrl = 0b1011;



void midiInit()
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <midiAddMsg>:


void midiAddMsg(uint8_t *msg, uint8_t length)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	73fb      	strb	r3, [r7, #15]
	while(i < length)
 8001258:	e017      	b.n	800128a <midiAddMsg+0x42>
	{
		midiTx[txPtrIn] = *(msg + i);
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	4413      	add	r3, r2
 8001260:	4a0f      	ldr	r2, [pc, #60]	@ (80012a0 <midiAddMsg+0x58>)
 8001262:	7812      	ldrb	r2, [r2, #0]
 8001264:	7819      	ldrb	r1, [r3, #0]
 8001266:	4b0f      	ldr	r3, [pc, #60]	@ (80012a4 <midiAddMsg+0x5c>)
 8001268:	5499      	strb	r1, [r3, r2]
		txPtrIn ++;
 800126a:	4b0d      	ldr	r3, [pc, #52]	@ (80012a0 <midiAddMsg+0x58>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	3301      	adds	r3, #1
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <midiAddMsg+0x58>)
 8001274:	701a      	strb	r2, [r3, #0]
		i++;
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	3301      	adds	r3, #1
 800127a:	73fb      	strb	r3, [r7, #15]

		//avoid buffer overflow
		if(txPtrIn >= maxTxSize)
 800127c:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <midiAddMsg+0x58>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b3f      	cmp	r3, #63	@ 0x3f
 8001282:	d902      	bls.n	800128a <midiAddMsg+0x42>
		{
			txPtrIn = 0;
 8001284:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <midiAddMsg+0x58>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
	while(i < length)
 800128a:	7bfa      	ldrb	r2, [r7, #15]
 800128c:	78fb      	ldrb	r3, [r7, #3]
 800128e:	429a      	cmp	r2, r3
 8001290:	d3e3      	bcc.n	800125a <midiAddMsg+0x12>
		}
	}

}
 8001292:	bf00      	nop
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	200003a0 	.word	0x200003a0
 80012a4:	20000360 	.word	0x20000360

080012a8 <MidiSend>:

void MidiSend()
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0

	//blocking wait for usb device to become free if busy
	  while( ((USBD_HandleTypeDef*)hUsbDeviceFS.pClassData)->dev_state == USBD_HID_BUSY){}
 80012ac:	bf00      	nop
 80012ae:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <MidiSend+0x30>)
 80012b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80012b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d0f7      	beq.n	80012ae <MidiSend+0x6>

	  USBD_HID_SendReport(&hUsbDeviceFS, &midiTx, txPtrIn);
 80012be:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <MidiSend+0x34>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	4906      	ldr	r1, [pc, #24]	@ (80012e0 <MidiSend+0x38>)
 80012c6:	4804      	ldr	r0, [pc, #16]	@ (80012d8 <MidiSend+0x30>)
 80012c8:	f007 f9e6 	bl	8008698 <USBD_HID_SendReport>

	  //reset buffer position after sending
	  txPtrIn = 0;
 80012cc:	4b03      	ldr	r3, [pc, #12]	@ (80012dc <MidiSend+0x34>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000e38 	.word	0x20000e38
 80012dc:	200003a0 	.word	0x200003a0
 80012e0:	20000360 	.word	0x20000360

080012e4 <MidiNoteOff>:


void MidiNoteOff(uint8_t p,uint8_t v)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	460a      	mov	r2, r1
 80012ee:	71fb      	strb	r3, [r7, #7]
 80012f0:	4613      	mov	r3, r2
 80012f2:	71bb      	strb	r3, [r7, #6]

	uint8_t msg[midiNoteLength];

	msg[0] = ((midiCable << 4) | NoteOff);
 80012f4:	2300      	movs	r3, #0
 80012f6:	011b      	lsls	r3, r3, #4
 80012f8:	b25a      	sxtb	r2, r3
 80012fa:	2308      	movs	r3, #8
 80012fc:	b25b      	sxtb	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	b25b      	sxtb	r3, r3
 8001302:	b2db      	uxtb	r3, r3
 8001304:	733b      	strb	r3, [r7, #12]
	msg[1] = ((NoteOff << 4) | midiChannel);
 8001306:	2308      	movs	r3, #8
 8001308:	011b      	lsls	r3, r3, #4
 800130a:	b25a      	sxtb	r2, r3
 800130c:	2300      	movs	r3, #0
 800130e:	b25b      	sxtb	r3, r3
 8001310:	4313      	orrs	r3, r2
 8001312:	b25b      	sxtb	r3, r3
 8001314:	b2db      	uxtb	r3, r3
 8001316:	737b      	strb	r3, [r7, #13]
	msg[2] = p;
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	73bb      	strb	r3, [r7, #14]
	msg[3] = v;
 800131c:	79bb      	ldrb	r3, [r7, #6]
 800131e:	73fb      	strb	r3, [r7, #15]

	midiAddMsg(msg,midiNoteLength);
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	2104      	movs	r1, #4
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ff8e 	bl	8001248 <midiAddMsg>
}
 800132c:	bf00      	nop
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <MidiNoteOn>:
void MidiNoteOn(uint8_t p,uint8_t v)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	460a      	mov	r2, r1
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	4613      	mov	r3, r2
 8001342:	71bb      	strb	r3, [r7, #6]
	uint8_t msg[midiNoteLength];

	msg[0] = ((midiCable << 4) | NoteOn);
 8001344:	2300      	movs	r3, #0
 8001346:	011b      	lsls	r3, r3, #4
 8001348:	b25a      	sxtb	r2, r3
 800134a:	2309      	movs	r3, #9
 800134c:	b25b      	sxtb	r3, r3
 800134e:	4313      	orrs	r3, r2
 8001350:	b25b      	sxtb	r3, r3
 8001352:	b2db      	uxtb	r3, r3
 8001354:	733b      	strb	r3, [r7, #12]
	msg[1] = ((NoteOn << 4) | midiChannel);
 8001356:	2309      	movs	r3, #9
 8001358:	011b      	lsls	r3, r3, #4
 800135a:	b25a      	sxtb	r2, r3
 800135c:	2300      	movs	r3, #0
 800135e:	b25b      	sxtb	r3, r3
 8001360:	4313      	orrs	r3, r2
 8001362:	b25b      	sxtb	r3, r3
 8001364:	b2db      	uxtb	r3, r3
 8001366:	737b      	strb	r3, [r7, #13]
	msg[2] = p;
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	73bb      	strb	r3, [r7, #14]
	msg[3] = v;
 800136c:	79bb      	ldrb	r3, [r7, #6]
 800136e:	73fb      	strb	r3, [r7, #15]

	midiAddMsg(msg,midiNoteLength);
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	2104      	movs	r1, #4
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ff66 	bl	8001248 <midiAddMsg>

}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <MidiNoteSus>:
void MidiNoteSus(uint8_t p,uint8_t v)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	460a      	mov	r2, r1
 800138e:	71fb      	strb	r3, [r7, #7]
 8001390:	4613      	mov	r3, r2
 8001392:	71bb      	strb	r3, [r7, #6]
	uint8_t msg[midiNoteLength];

	msg[0] = ((midiCable << 4) | NoteAT);
 8001394:	2300      	movs	r3, #0
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	b25a      	sxtb	r2, r3
 800139a:	230a      	movs	r3, #10
 800139c:	b25b      	sxtb	r3, r3
 800139e:	4313      	orrs	r3, r2
 80013a0:	b25b      	sxtb	r3, r3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	733b      	strb	r3, [r7, #12]
	msg[1] = ((NoteAT << 4) | midiChannel);
 80013a6:	230a      	movs	r3, #10
 80013a8:	011b      	lsls	r3, r3, #4
 80013aa:	b25a      	sxtb	r2, r3
 80013ac:	2300      	movs	r3, #0
 80013ae:	b25b      	sxtb	r3, r3
 80013b0:	4313      	orrs	r3, r2
 80013b2:	b25b      	sxtb	r3, r3
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	737b      	strb	r3, [r7, #13]
	msg[2] = p;
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	73bb      	strb	r3, [r7, #14]
	msg[3] = v;
 80013bc:	79bb      	ldrb	r3, [r7, #6]
 80013be:	73fb      	strb	r3, [r7, #15]

	midiAddMsg(msg,midiNoteLength);
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	2104      	movs	r1, #4
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ff3e 	bl	8001248 <midiAddMsg>

}
 80013cc:	bf00      	nop
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <MidiCC>:

void MidiCC(uint8_t c, uint8_t v)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	460a      	mov	r2, r1
 80013de:	71fb      	strb	r3, [r7, #7]
 80013e0:	4613      	mov	r3, r2
 80013e2:	71bb      	strb	r3, [r7, #6]

	uint8_t msg[midiNoteLength];

	msg[0] = ((midiCable << 4) | MidiCtrl);
 80013e4:	2300      	movs	r3, #0
 80013e6:	011b      	lsls	r3, r3, #4
 80013e8:	b25a      	sxtb	r2, r3
 80013ea:	230b      	movs	r3, #11
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	4313      	orrs	r3, r2
 80013f0:	b25b      	sxtb	r3, r3
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	733b      	strb	r3, [r7, #12]
	msg[1] = ((MidiCtrl << 4) | midiChannel);
 80013f6:	230b      	movs	r3, #11
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	b25a      	sxtb	r2, r3
 80013fc:	2300      	movs	r3, #0
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	4313      	orrs	r3, r2
 8001402:	b25b      	sxtb	r3, r3
 8001404:	b2db      	uxtb	r3, r3
 8001406:	737b      	strb	r3, [r7, #13]
	msg[2] = c;
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	73bb      	strb	r3, [r7, #14]
	msg[3] = v;
 800140c:	79bb      	ldrb	r3, [r7, #6]
 800140e:	73fb      	strb	r3, [r7, #15]

	midiAddMsg(msg,midiNoteLength);
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	2104      	movs	r1, #4
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff16 	bl	8001248 <midiAddMsg>


}
 800141c:	bf00      	nop
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <noteInit>:

uint16_t globalThresh;


void noteInit()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
	//start dma and get initial readings
	ADC_COMPLETE_FLAG = 0;
 800142a:	4ba7      	ldr	r3, [pc, #668]	@ (80016c8 <noteInit+0x2a4>)
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]


	//get initial readings
	keyCount = 0;
 8001430:	4ba6      	ldr	r3, [pc, #664]	@ (80016cc <noteInit+0x2a8>)
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]
	selectMuxPin(0);
 8001436:	2000      	movs	r0, #0
 8001438:	f000 fc2a 	bl	8001c90 <selectMuxPin>
	HAL_Delay(50);
 800143c:	2032      	movs	r0, #50	@ 0x32
 800143e:	f000 ffe9 	bl	8002414 <HAL_Delay>

	HAL_ADC_Start_DMA(&hadc1,&keyData[0], 2);
 8001442:	2202      	movs	r2, #2
 8001444:	49a2      	ldr	r1, [pc, #648]	@ (80016d0 <noteInit+0x2ac>)
 8001446:	48a3      	ldr	r0, [pc, #652]	@ (80016d4 <noteInit+0x2b0>)
 8001448:	f001 f95c 	bl	8002704 <HAL_ADC_Start_DMA>
	HAL_Delay(50);
 800144c:	2032      	movs	r0, #50	@ 0x32
 800144e:	f000 ffe1 	bl	8002414 <HAL_Delay>

	//blocking wait for dma to finish
	while(ADC_COMPLETE_FLAG != 1)
 8001452:	e002      	b.n	800145a <noteInit+0x36>
	{
		HAL_Delay(1);
 8001454:	2001      	movs	r0, #1
 8001456:	f000 ffdd 	bl	8002414 <HAL_Delay>
	while(ADC_COMPLETE_FLAG != 1)
 800145a:	4b9b      	ldr	r3, [pc, #620]	@ (80016c8 <noteInit+0x2a4>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d1f8      	bne.n	8001454 <noteInit+0x30>

	}
	ADC_COMPLETE_FLAG = 0;
 8001462:	4b99      	ldr	r3, [pc, #612]	@ (80016c8 <noteInit+0x2a4>)
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]

	HAL_Delay(50);
 8001468:	2032      	movs	r0, #50	@ 0x32
 800146a:	f000 ffd3 	bl	8002414 <HAL_Delay>

	globalThresh = 0;
 800146e:	4b9a      	ldr	r3, [pc, #616]	@ (80016d8 <noteInit+0x2b4>)
 8001470:	2200      	movs	r2, #0
 8001472:	801a      	strh	r2, [r3, #0]

	for(int i = 0; i < numKeys;i++)
 8001474:	2300      	movs	r3, #0
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	e118      	b.n	80016ac <noteInit+0x288>
	{
		noteArray[i].restVal = noteArray[i].rawVal;
 800147a:	4a98      	ldr	r2, [pc, #608]	@ (80016dc <noteInit+0x2b8>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	212c      	movs	r1, #44	@ 0x2c
 8001480:	fb01 f303 	mul.w	r3, r1, r3
 8001484:	4413      	add	r3, r2
 8001486:	8818      	ldrh	r0, [r3, #0]
 8001488:	4a94      	ldr	r2, [pc, #592]	@ (80016dc <noteInit+0x2b8>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	212c      	movs	r1, #44	@ 0x2c
 800148e:	fb01 f303 	mul.w	r3, r1, r3
 8001492:	4413      	add	r3, r2
 8001494:	3302      	adds	r3, #2
 8001496:	4602      	mov	r2, r0
 8001498:	801a      	strh	r2, [r3, #0]
		noteArray[i].ledIndex = Leds[i];
 800149a:	4a91      	ldr	r2, [pc, #580]	@ (80016e0 <noteInit+0x2bc>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a2:	b2d8      	uxtb	r0, r3
 80014a4:	4a8d      	ldr	r2, [pc, #564]	@ (80016dc <noteInit+0x2b8>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	212c      	movs	r1, #44	@ 0x2c
 80014aa:	fb01 f303 	mul.w	r3, r1, r3
 80014ae:	4413      	add	r3, r2
 80014b0:	3319      	adds	r3, #25
 80014b2:	4602      	mov	r2, r0
 80014b4:	701a      	strb	r2, [r3, #0]

		noteArray[i].pitch = notePitches[i];
 80014b6:	4a8b      	ldr	r2, [pc, #556]	@ (80016e4 <noteInit+0x2c0>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014be:	b2d8      	uxtb	r0, r3
 80014c0:	4a86      	ldr	r2, [pc, #536]	@ (80016dc <noteInit+0x2b8>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	212c      	movs	r1, #44	@ 0x2c
 80014c6:	fb01 f303 	mul.w	r3, r1, r3
 80014ca:	4413      	add	r3, r2
 80014cc:	330c      	adds	r3, #12
 80014ce:	4602      	mov	r2, r0
 80014d0:	701a      	strb	r2, [r3, #0]
		noteArray[i].isHeld = false;
 80014d2:	4a82      	ldr	r2, [pc, #520]	@ (80016dc <noteInit+0x2b8>)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	212c      	movs	r1, #44	@ 0x2c
 80014d8:	fb01 f303 	mul.w	r3, r1, r3
 80014dc:	4413      	add	r3, r2
 80014de:	331a      	adds	r3, #26
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
		noteArray[i].isTrig = false;
 80014e4:	4a7d      	ldr	r2, [pc, #500]	@ (80016dc <noteInit+0x2b8>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	212c      	movs	r1, #44	@ 0x2c
 80014ea:	fb01 f303 	mul.w	r3, r1, r3
 80014ee:	4413      	add	r3, r2
 80014f0:	331b      	adds	r3, #27
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
		noteArray[i].starVel = 0;
 80014f6:	4a79      	ldr	r2, [pc, #484]	@ (80016dc <noteInit+0x2b8>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	212c      	movs	r1, #44	@ 0x2c
 80014fc:	fb01 f303 	mul.w	r3, r1, r3
 8001500:	4413      	add	r3, r2
 8001502:	3308      	adds	r3, #8
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	601a      	str	r2, [r3, #0]


		noteArray[i].oct = 0;
 800150a:	4a74      	ldr	r2, [pc, #464]	@ (80016dc <noteInit+0x2b8>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	212c      	movs	r1, #44	@ 0x2c
 8001510:	fb01 f303 	mul.w	r3, r1, r3
 8001514:	4413      	add	r3, r2
 8001516:	331d      	adds	r3, #29
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]

		noteArray[i].onTrigger = &triggerFunction;
 800151c:	4a6f      	ldr	r2, [pc, #444]	@ (80016dc <noteInit+0x2b8>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	212c      	movs	r1, #44	@ 0x2c
 8001522:	fb01 f303 	mul.w	r3, r1, r3
 8001526:	4413      	add	r3, r2
 8001528:	3320      	adds	r3, #32
 800152a:	4a6f      	ldr	r2, [pc, #444]	@ (80016e8 <noteInit+0x2c4>)
 800152c:	601a      	str	r2, [r3, #0]
		noteArray[i].onRelease = &releaseFunction;
 800152e:	4a6b      	ldr	r2, [pc, #428]	@ (80016dc <noteInit+0x2b8>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	212c      	movs	r1, #44	@ 0x2c
 8001534:	fb01 f303 	mul.w	r3, r1, r3
 8001538:	4413      	add	r3, r2
 800153a:	3328      	adds	r3, #40	@ 0x28
 800153c:	4a6b      	ldr	r2, [pc, #428]	@ (80016ec <noteInit+0x2c8>)
 800153e:	601a      	str	r2, [r3, #0]
		noteArray[i].onHold = &holdFunction;
 8001540:	4a66      	ldr	r2, [pc, #408]	@ (80016dc <noteInit+0x2b8>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	212c      	movs	r1, #44	@ 0x2c
 8001546:	fb01 f303 	mul.w	r3, r1, r3
 800154a:	4413      	add	r3, r2
 800154c:	3324      	adds	r3, #36	@ 0x24
 800154e:	4a68      	ldr	r2, [pc, #416]	@ (80016f0 <noteInit+0x2cc>)
 8001550:	601a      	str	r2, [r3, #0]

		noteArray[i].octUpdate = false;
 8001552:	4a62      	ldr	r2, [pc, #392]	@ (80016dc <noteInit+0x2b8>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	212c      	movs	r1, #44	@ 0x2c
 8001558:	fb01 f303 	mul.w	r3, r1, r3
 800155c:	4413      	add	r3, r2
 800155e:	331c      	adds	r3, #28
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]


		if(i == 14)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b0e      	cmp	r3, #14
 8001568:	d124      	bne.n	80015b4 <noteInit+0x190>
		{
			noteArray[i].onTrigger = &octDownTrig;
 800156a:	4a5c      	ldr	r2, [pc, #368]	@ (80016dc <noteInit+0x2b8>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	212c      	movs	r1, #44	@ 0x2c
 8001570:	fb01 f303 	mul.w	r3, r1, r3
 8001574:	4413      	add	r3, r2
 8001576:	3320      	adds	r3, #32
 8001578:	4a5e      	ldr	r2, [pc, #376]	@ (80016f4 <noteInit+0x2d0>)
 800157a:	601a      	str	r2, [r3, #0]
			noteArray[i].onRelease = &octDownRel;
 800157c:	4a57      	ldr	r2, [pc, #348]	@ (80016dc <noteInit+0x2b8>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	212c      	movs	r1, #44	@ 0x2c
 8001582:	fb01 f303 	mul.w	r3, r1, r3
 8001586:	4413      	add	r3, r2
 8001588:	3328      	adds	r3, #40	@ 0x28
 800158a:	4a5b      	ldr	r2, [pc, #364]	@ (80016f8 <noteInit+0x2d4>)
 800158c:	601a      	str	r2, [r3, #0]
			noteArray[i].onHold = NULL;
 800158e:	4a53      	ldr	r2, [pc, #332]	@ (80016dc <noteInit+0x2b8>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	212c      	movs	r1, #44	@ 0x2c
 8001594:	fb01 f303 	mul.w	r3, r1, r3
 8001598:	4413      	add	r3, r2
 800159a:	3324      	adds	r3, #36	@ 0x24
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
			noteArray[i].isTrig = true;
 80015a0:	4a4e      	ldr	r2, [pc, #312]	@ (80016dc <noteInit+0x2b8>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	212c      	movs	r1, #44	@ 0x2c
 80015a6:	fb01 f303 	mul.w	r3, r1, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	331b      	adds	r3, #27
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
 80015b2:	e051      	b.n	8001658 <noteInit+0x234>


		}
		else if(i==7)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b07      	cmp	r3, #7
 80015b8:	d124      	bne.n	8001604 <noteInit+0x1e0>
		{


			noteArray[i].onTrigger = &octUpTrig;
 80015ba:	4a48      	ldr	r2, [pc, #288]	@ (80016dc <noteInit+0x2b8>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	212c      	movs	r1, #44	@ 0x2c
 80015c0:	fb01 f303 	mul.w	r3, r1, r3
 80015c4:	4413      	add	r3, r2
 80015c6:	3320      	adds	r3, #32
 80015c8:	4a4c      	ldr	r2, [pc, #304]	@ (80016fc <noteInit+0x2d8>)
 80015ca:	601a      	str	r2, [r3, #0]
			noteArray[i].onRelease = &octDownRel;
 80015cc:	4a43      	ldr	r2, [pc, #268]	@ (80016dc <noteInit+0x2b8>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	212c      	movs	r1, #44	@ 0x2c
 80015d2:	fb01 f303 	mul.w	r3, r1, r3
 80015d6:	4413      	add	r3, r2
 80015d8:	3328      	adds	r3, #40	@ 0x28
 80015da:	4a47      	ldr	r2, [pc, #284]	@ (80016f8 <noteInit+0x2d4>)
 80015dc:	601a      	str	r2, [r3, #0]
			noteArray[i].onHold = NULL;
 80015de:	4a3f      	ldr	r2, [pc, #252]	@ (80016dc <noteInit+0x2b8>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	212c      	movs	r1, #44	@ 0x2c
 80015e4:	fb01 f303 	mul.w	r3, r1, r3
 80015e8:	4413      	add	r3, r2
 80015ea:	3324      	adds	r3, #36	@ 0x24
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
			noteArray[i].isTrig = true;
 80015f0:	4a3a      	ldr	r2, [pc, #232]	@ (80016dc <noteInit+0x2b8>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	212c      	movs	r1, #44	@ 0x2c
 80015f6:	fb01 f303 	mul.w	r3, r1, r3
 80015fa:	4413      	add	r3, r2
 80015fc:	331b      	adds	r3, #27
 80015fe:	2201      	movs	r2, #1
 8001600:	701a      	strb	r2, [r3, #0]
 8001602:	e029      	b.n	8001658 <noteInit+0x234>

		}
		else if(i == 15 || i ==6)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b0f      	cmp	r3, #15
 8001608:	d002      	beq.n	8001610 <noteInit+0x1ec>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b06      	cmp	r3, #6
 800160e:	d123      	bne.n	8001658 <noteInit+0x234>
		{
			noteArray[i].onTrigger = &controlTrig;
 8001610:	4a32      	ldr	r2, [pc, #200]	@ (80016dc <noteInit+0x2b8>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	212c      	movs	r1, #44	@ 0x2c
 8001616:	fb01 f303 	mul.w	r3, r1, r3
 800161a:	4413      	add	r3, r2
 800161c:	3320      	adds	r3, #32
 800161e:	4a38      	ldr	r2, [pc, #224]	@ (8001700 <noteInit+0x2dc>)
 8001620:	601a      	str	r2, [r3, #0]
			noteArray[i].onHold = &controlFunction;
 8001622:	4a2e      	ldr	r2, [pc, #184]	@ (80016dc <noteInit+0x2b8>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	212c      	movs	r1, #44	@ 0x2c
 8001628:	fb01 f303 	mul.w	r3, r1, r3
 800162c:	4413      	add	r3, r2
 800162e:	3324      	adds	r3, #36	@ 0x24
 8001630:	4a34      	ldr	r2, [pc, #208]	@ (8001704 <noteInit+0x2e0>)
 8001632:	601a      	str	r2, [r3, #0]
			noteArray[i].onRelease = &controlRel;
 8001634:	4a29      	ldr	r2, [pc, #164]	@ (80016dc <noteInit+0x2b8>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	212c      	movs	r1, #44	@ 0x2c
 800163a:	fb01 f303 	mul.w	r3, r1, r3
 800163e:	4413      	add	r3, r2
 8001640:	3328      	adds	r3, #40	@ 0x28
 8001642:	4a31      	ldr	r2, [pc, #196]	@ (8001708 <noteInit+0x2e4>)
 8001644:	601a      	str	r2, [r3, #0]
			noteArray[i].isTrig = true;
 8001646:	4a25      	ldr	r2, [pc, #148]	@ (80016dc <noteInit+0x2b8>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	212c      	movs	r1, #44	@ 0x2c
 800164c:	fb01 f303 	mul.w	r3, r1, r3
 8001650:	4413      	add	r3, r2
 8001652:	331b      	adds	r3, #27
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]

		}
		if(i == 6)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b06      	cmp	r3, #6
 800165c:	d109      	bne.n	8001672 <noteInit+0x24e>
		{
			noteArray[i].ccNum = 16;
 800165e:	4a1f      	ldr	r2, [pc, #124]	@ (80016dc <noteInit+0x2b8>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	212c      	movs	r1, #44	@ 0x2c
 8001664:	fb01 f303 	mul.w	r3, r1, r3
 8001668:	4413      	add	r3, r2
 800166a:	3318      	adds	r3, #24
 800166c:	2210      	movs	r2, #16
 800166e:	701a      	strb	r2, [r3, #0]
 8001670:	e00b      	b.n	800168a <noteInit+0x266>
		}
		else if(i == 15)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b0f      	cmp	r3, #15
 8001676:	d108      	bne.n	800168a <noteInit+0x266>
		{
			noteArray[i].ccNum = 1;
 8001678:	4a18      	ldr	r2, [pc, #96]	@ (80016dc <noteInit+0x2b8>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	212c      	movs	r1, #44	@ 0x2c
 800167e:	fb01 f303 	mul.w	r3, r1, r3
 8001682:	4413      	add	r3, r2
 8001684:	3318      	adds	r3, #24
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
		}



		globalThresh += noteArray[i].restVal;
 800168a:	4a14      	ldr	r2, [pc, #80]	@ (80016dc <noteInit+0x2b8>)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	212c      	movs	r1, #44	@ 0x2c
 8001690:	fb01 f303 	mul.w	r3, r1, r3
 8001694:	4413      	add	r3, r2
 8001696:	3302      	adds	r3, #2
 8001698:	881a      	ldrh	r2, [r3, #0]
 800169a:	4b0f      	ldr	r3, [pc, #60]	@ (80016d8 <noteInit+0x2b4>)
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	4b0d      	ldr	r3, [pc, #52]	@ (80016d8 <noteInit+0x2b4>)
 80016a4:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < numKeys;i++)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3301      	adds	r3, #1
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b0f      	cmp	r3, #15
 80016b0:	f77f aee3 	ble.w	800147a <noteInit+0x56>

	}

	globalThresh = globalThresh/numKeys;
 80016b4:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <noteInit+0x2b4>)
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	091b      	lsrs	r3, r3, #4
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <noteInit+0x2b4>)
 80016be:	801a      	strh	r2, [r3, #0]

}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200003a2 	.word	0x200003a2
 80016cc:	200003e4 	.word	0x200003e4
 80016d0:	200003a4 	.word	0x200003a4
 80016d4:	2000017c 	.word	0x2000017c
 80016d8:	200006a8 	.word	0x200006a8
 80016dc:	200003e8 	.word	0x200003e8
 80016e0:	0800a6cc 	.word	0x0800a6cc
 80016e4:	0800a70c 	.word	0x0800a70c
 80016e8:	08001821 	.word	0x08001821
 80016ec:	08001925 	.word	0x08001925
 80016f0:	080018c9 	.word	0x080018c9
 80016f4:	08001995 	.word	0x08001995
 80016f8:	08001a0d 	.word	0x08001a0d
 80016fc:	080019d1 	.word	0x080019d1
 8001700:	08001abd 	.word	0x08001abd
 8001704:	08001a27 	.word	0x08001a27
 8001708:	08001b4d 	.word	0x08001b4d
 800170c:	00000000 	.word	0x00000000

08001710 <noteScan>:



void noteScan()
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0


	  for(uint8_t i = 0; i < numKeys;i++)
 8001716:	2300      	movs	r3, #0
 8001718:	73fb      	strb	r3, [r7, #15]
 800171a:	e06a      	b.n	80017f2 <noteScan+0xe2>
	  {

		  note* currentNote = &noteArray[i];
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	222c      	movs	r2, #44	@ 0x2c
 8001720:	fb02 f303 	mul.w	r3, r2, r3
 8001724:	4a3a      	ldr	r2, [pc, #232]	@ (8001810 <noteScan+0x100>)
 8001726:	4413      	add	r3, r2
 8001728:	60bb      	str	r3, [r7, #8]

		  uint16_t threshold = (currentNote->restVal + trigThresh + (numActive * trigIncrement));
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	885a      	ldrh	r2, [r3, #2]
 800172e:	4b39      	ldr	r3, [pc, #228]	@ (8001814 <noteScan+0x104>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	4619      	mov	r1, r3
 8001734:	0049      	lsls	r1, r1, #1
 8001736:	440b      	add	r3, r1
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	b29b      	uxth	r3, r3
 800173c:	4413      	add	r3, r2
 800173e:	b29b      	uxth	r3, r3
 8001740:	3346      	adds	r3, #70	@ 0x46
 8001742:	80fb      	strh	r3, [r7, #6]

		  //check for note above threshold
		  if(currentNote->rawVal > threshold)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	88fa      	ldrh	r2, [r7, #6]
 800174a:	429a      	cmp	r2, r3
 800174c:	d246      	bcs.n	80017dc <noteScan+0xcc>
		  {

			  float velo = (float)((currentNote->rawVal - threshold) * 0.85);
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	88fb      	ldrh	r3, [r7, #6]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe ffb9 	bl	80006d0 <__aeabi_i2d>
 800175e:	a32a      	add	r3, pc, #168	@ (adr r3, 8001808 <noteScan+0xf8>)
 8001760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001764:	f7fe fd38 	bl	80001d8 <__aeabi_dmul>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	f7ff f838 	bl	80007e4 <__aeabi_d2f>
 8001774:	4603      	mov	r3, r0
 8001776:	603b      	str	r3, [r7, #0]

			  currentNote->vel = (velo > 127) ? 127 : velo;
 8001778:	edd7 7a00 	vldr	s15, [r7]
 800177c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001818 <noteScan+0x108>
 8001780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001788:	dd01      	ble.n	800178e <noteScan+0x7e>
 800178a:	4b24      	ldr	r3, [pc, #144]	@ (800181c <noteScan+0x10c>)
 800178c:	e000      	b.n	8001790 <noteScan+0x80>
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	6053      	str	r3, [r2, #4]


			  if(currentNote->isHeld == false)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	7e9b      	ldrb	r3, [r3, #26]
 8001798:	f083 0301 	eor.w	r3, r3, #1
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d013      	beq.n	80017ca <noteScan+0xba>
			  {

				  if(currentNote->isTrig == false)
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	7edb      	ldrb	r3, [r3, #27]
 80017a6:	f083 0301 	eor.w	r3, r3, #1
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d007      	beq.n	80017c0 <noteScan+0xb0>
				  {

					  currentNote->starVel = currentNote->vel;
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	609a      	str	r2, [r3, #8]
					  currentNote->isTrig = true;
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	2201      	movs	r2, #1
 80017bc:	76da      	strb	r2, [r3, #27]
 80017be:	e015      	b.n	80017ec <noteScan+0xdc>
				  }
				  else
				  {

					  currentNote->onTrigger(currentNote);
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	68b8      	ldr	r0, [r7, #8]
 80017c6:	4798      	blx	r3
 80017c8:	e010      	b.n	80017ec <noteScan+0xdc>

			  }
			  else
			  {
				  //send pressure data
				  if(currentNote->onHold)
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00c      	beq.n	80017ec <noteScan+0xdc>
				  {
					 currentNote->onHold(currentNote);
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d6:	68b8      	ldr	r0, [r7, #8]
 80017d8:	4798      	blx	r3
 80017da:	e007      	b.n	80017ec <noteScan+0xdc>

		  }
		  else
		  {
			  //if note is below threshold and held turn off
			  if(currentNote->isHeld == true)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	7e9b      	ldrb	r3, [r3, #26]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <noteScan+0xdc>
			  {

				  currentNote->onRelease(currentNote);
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e8:	68b8      	ldr	r0, [r7, #8]
 80017ea:	4798      	blx	r3
	  for(uint8_t i = 0; i < numKeys;i++)
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	3301      	adds	r3, #1
 80017f0:	73fb      	strb	r3, [r7, #15]
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	2b0f      	cmp	r3, #15
 80017f6:	d991      	bls.n	800171c <noteScan+0xc>
//		  {
//			  SK6812_SetColour(currentNote->ledIndex, &Colours[COLOUR_OFF]);
//		  }

	  }
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	f3af 8000 	nop.w
 8001808:	33333333 	.word	0x33333333
 800180c:	3feb3333 	.word	0x3feb3333
 8001810:	200003e8 	.word	0x200003e8
 8001814:	200003a1 	.word	0x200003a1
 8001818:	42fe0000 	.word	0x42fe0000
 800181c:	42fe0000 	.word	0x42fe0000

08001820 <triggerFunction>:



void triggerFunction(note *currentNote)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

	//note is active
	currentNote->isHeld = true;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	769a      	strb	r2, [r3, #26]
	//increment active notes
	numActive++;
 800182e:	4b24      	ldr	r3, [pc, #144]	@ (80018c0 <triggerFunction+0xa0>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	3301      	adds	r3, #1
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4b22      	ldr	r3, [pc, #136]	@ (80018c0 <triggerFunction+0xa0>)
 8001838:	701a      	strb	r2, [r3, #0]

	//calculate velocity and trigger note
	uint8_t triggerVelocity = 2.54 * (currentNote->vel - currentNote->starVel);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	edd3 7a02 	vldr	s15, [r3, #8]
 8001846:	ee77 7a67 	vsub.f32	s15, s14, s15
 800184a:	ee17 0a90 	vmov	r0, s15
 800184e:	f7fe ff51 	bl	80006f4 <__aeabi_f2d>
 8001852:	a319      	add	r3, pc, #100	@ (adr r3, 80018b8 <triggerFunction+0x98>)
 8001854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001858:	f7fe fcbe 	bl	80001d8 <__aeabi_dmul>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	f7fe ff9e 	bl	80007a4 <__aeabi_d2uiz>
 8001868:	4603      	mov	r3, r0
 800186a:	73fb      	strb	r3, [r7, #15]
	if(triggerVelocity > 127){triggerVelocity = 127;}
 800186c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001870:	2b00      	cmp	r3, #0
 8001872:	da01      	bge.n	8001878 <triggerFunction+0x58>
 8001874:	237f      	movs	r3, #127	@ 0x7f
 8001876:	73fb      	strb	r3, [r7, #15]

//	currentNote->vA = triggerVelocity;

//	currentNote->velF = triggerVelocity;

	MidiNoteOn(currentNote->pitch + currentNote->oct, triggerVelocity);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	7b1b      	ldrb	r3, [r3, #12]
 800187c:	461a      	mov	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8001884:	4413      	add	r3, r2
 8001886:	7bfa      	ldrb	r2, [r7, #15]
 8001888:	4611      	mov	r1, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fd52 	bl	8001334 <MidiNoteOn>
	currentNote->vA = triggerVelocity;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	ee07 3a90 	vmov	s15, r3
 8001896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	edc3 7a04 	vstr	s15, [r3, #16]

	//update led
	SK6812_SetColour(currentNote->ledIndex, &Colours[COLOUR_BLUE]);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	7e5b      	ldrb	r3, [r3, #25]
 80018a4:	4907      	ldr	r1, [pc, #28]	@ (80018c4 <triggerFunction+0xa4>)
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 fa84 	bl	8001db4 <SK6812_SetColour>

}
 80018ac:	bf00      	nop
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	f3af 8000 	nop.w
 80018b8:	851eb852 	.word	0x851eb852
 80018bc:	400451eb 	.word	0x400451eb
 80018c0:	200003a1 	.word	0x200003a1
 80018c4:	0800a752 	.word	0x0800a752

080018c8 <holdFunction>:
void holdFunction(note *currentNote)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

	currentNote->vA = lerpF(currentNote->vA,currentNote->vel);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	edd3 7a04 	vldr	s15, [r3, #16]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	ed93 7a01 	vldr	s14, [r3, #4]
 80018dc:	eef0 0a47 	vmov.f32	s1, s14
 80018e0:	eeb0 0a67 	vmov.f32	s0, s15
 80018e4:	f000 fa08 	bl	8001cf8 <lerpF>
 80018e8:	eef0 7a40 	vmov.f32	s15, s0
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	edc3 7a04 	vstr	s15, [r3, #16]

	MidiNoteSus(currentNote->pitch + currentNote->oct, (uint8_t)currentNote->vA);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	7b1b      	ldrb	r3, [r3, #12]
 80018f6:	461a      	mov	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80018fe:	441a      	add	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	edd3 7a04 	vldr	s15, [r3, #16]
 8001906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800190a:	edc7 7a00 	vstr	s15, [r7]
 800190e:	783b      	ldrb	r3, [r7, #0]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	4619      	mov	r1, r3
 8001914:	4610      	mov	r0, r2
 8001916:	f7ff fd35 	bl	8001384 <MidiNoteSus>
//	SK6812_SetColour(currentNote->ledIndex, &(interFaceCol){(uint8_t)(currentNote->vA * 2.0), 0, 255});

}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <releaseFunction>:
void releaseFunction(note *currentNote)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

	currentNote->isHeld = false;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	769a      	strb	r2, [r3, #26]
	currentNote->isTrig = false;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	76da      	strb	r2, [r3, #27]

	numActive--;
 8001938:	4b13      	ldr	r3, [pc, #76]	@ (8001988 <releaseFunction+0x64>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	3b01      	subs	r3, #1
 800193e:	b2da      	uxtb	r2, r3
 8001940:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <releaseFunction+0x64>)
 8001942:	701a      	strb	r2, [r3, #0]
	MidiNoteOff(currentNote->pitch + currentNote->oct, 127);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7b1b      	ldrb	r3, [r3, #12]
 8001948:	461a      	mov	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8001950:	4413      	add	r3, r2
 8001952:	217f      	movs	r1, #127	@ 0x7f
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fcc5 	bl	80012e4 <MidiNoteOff>

	//update octave if nececary

	if(currentNote->octUpdate == true)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	7f1b      	ldrb	r3, [r3, #28]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d007      	beq.n	8001972 <releaseFunction+0x4e>
	{
		currentNote->octUpdate = false;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	771a      	strb	r2, [r3, #28]
		currentNote->oct = octave;
 8001968:	4b08      	ldr	r3, [pc, #32]	@ (800198c <releaseFunction+0x68>)
 800196a:	f993 2000 	ldrsb.w	r2, [r3]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	775a      	strb	r2, [r3, #29]
	}

	SK6812_SetColour(currentNote->ledIndex, &Colours[COLOUR_OFF]);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	7e5b      	ldrb	r3, [r3, #25]
 8001976:	4906      	ldr	r1, [pc, #24]	@ (8001990 <releaseFunction+0x6c>)
 8001978:	4618      	mov	r0, r3
 800197a:	f000 fa1b 	bl	8001db4 <SK6812_SetColour>

}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200003a1 	.word	0x200003a1
 800198c:	200003a3 	.word	0x200003a3
 8001990:	0800a761 	.word	0x0800a761

08001994 <octDownTrig>:

void octDownTrig(note *currentNote)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	//note is active
	currentNote->isHeld = true;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	769a      	strb	r2, [r3, #26]
	//increment active notes
//	numActive++;

	//change octave
	if(octave <= -24)
 80019a2:	4b0a      	ldr	r3, [pc, #40]	@ (80019cc <octDownTrig+0x38>)
 80019a4:	f993 3000 	ldrsb.w	r3, [r3]
 80019a8:	f113 0f17 	cmn.w	r3, #23
 80019ac:	db0a      	blt.n	80019c4 <octDownTrig+0x30>
	{

	}
	else
	{
		octave -= 12;
 80019ae:	4b07      	ldr	r3, [pc, #28]	@ (80019cc <octDownTrig+0x38>)
 80019b0:	f993 3000 	ldrsb.w	r3, [r3]
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	3b0c      	subs	r3, #12
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	b25a      	sxtb	r2, r3
 80019bc:	4b03      	ldr	r3, [pc, #12]	@ (80019cc <octDownTrig+0x38>)
 80019be:	701a      	strb	r2, [r3, #0]
		octaveUpdate();
 80019c0:	f000 f8e6 	bl	8001b90 <octaveUpdate>

	}


}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	200003a3 	.word	0x200003a3

080019d0 <octUpTrig>:

void octUpTrig(note *currentNote)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	//note is active
	currentNote->isHeld = true;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	769a      	strb	r2, [r3, #26]
	//increment active notes
//	numActive++;

	//change octave
	if(octave >= 24)
 80019de:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <octUpTrig+0x38>)
 80019e0:	f993 3000 	ldrsb.w	r3, [r3]
 80019e4:	2b17      	cmp	r3, #23
 80019e6:	dc0a      	bgt.n	80019fe <octUpTrig+0x2e>
	{

	}
	else
	{
		octave += 12;
 80019e8:	4b07      	ldr	r3, [pc, #28]	@ (8001a08 <octUpTrig+0x38>)
 80019ea:	f993 3000 	ldrsb.w	r3, [r3]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	330c      	adds	r3, #12
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	b25a      	sxtb	r2, r3
 80019f6:	4b04      	ldr	r3, [pc, #16]	@ (8001a08 <octUpTrig+0x38>)
 80019f8:	701a      	strb	r2, [r3, #0]
		octaveUpdate();
 80019fa:	f000 f8c9 	bl	8001b90 <octaveUpdate>
	}

}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200003a3 	.word	0x200003a3

08001a0c <octDownRel>:


void octDownRel(note *currentNote)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	currentNote->isHeld = false;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	769a      	strb	r2, [r3, #26]
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <controlFunction>:

void controlFunction(note *currentNote)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b084      	sub	sp, #16
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
	currentNote->vA = lerpF(currentNote->vA, currentNote->vel);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a3a:	eef0 0a47 	vmov.f32	s1, s14
 8001a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a42:	f000 f959 	bl	8001cf8 <lerpF>
 8001a46:	eef0 7a40 	vmov.f32	s15, s0
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	edc3 7a04 	vstr	s15, [r3, #16]

	MidiCC(currentNote->ccNum, (uint8_t)currentNote->vA);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	7e1b      	ldrb	r3, [r3, #24]
 8001a54:	461a      	mov	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a60:	edc7 7a00 	vstr	s15, [r7]
 8001a64:	783b      	ldrb	r3, [r7, #0]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	f7ff fcb2 	bl	80013d4 <MidiCC>
	uint8_t colL = (uint8_t)(currentNote->vA * 2.0);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7fe fe3d 	bl	80006f4 <__aeabi_f2d>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	f7fe fcdb 	bl	8000438 <__adddf3>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4610      	mov	r0, r2
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f7fe fe8b 	bl	80007a4 <__aeabi_d2uiz>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	73fb      	strb	r3, [r7, #15]
	SK6812_SetColour(currentNote->ledIndex, &(interFaceCol){0, colL, 255 - colL});
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	7e5a      	ldrb	r2, [r3, #25]
 8001a96:	2300      	movs	r3, #0
 8001a98:	733b      	strb	r3, [r7, #12]
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	737b      	strb	r3, [r7, #13]
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	73bb      	strb	r3, [r7, #14]
 8001aa6:	f107 030c 	add.w	r3, r7, #12
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4610      	mov	r0, r2
 8001aae:	f000 f981 	bl	8001db4 <SK6812_SetColour>
}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <controlTrig>:

void controlTrig(note *currentNote)
{
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	currentNote->isHeld = true;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	769a      	strb	r2, [r3, #26]
	MidiCC(currentNote->ccNum, currentNote->vel);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	7e1b      	ldrb	r3, [r3, #24]
 8001ace:	461c      	mov	r4, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fe0d 	bl	80006f4 <__aeabi_f2d>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	ec43 2b10 	vmov	d0, r2, r3
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	f7ff fc76 	bl	80013d4 <MidiCC>
	currentNote->vA = currentNote->vel;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	611a      	str	r2, [r3, #16]
	numActive++;
 8001af0:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <controlTrig+0x8c>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	3301      	adds	r3, #1
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	4b13      	ldr	r3, [pc, #76]	@ (8001b48 <controlTrig+0x8c>)
 8001afa:	701a      	strb	r2, [r3, #0]
	uint8_t colL = (uint8_t)(currentNote->vA * 2.0);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7fe fdf7 	bl	80006f4 <__aeabi_f2d>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	f7fe fc95 	bl	8000438 <__adddf3>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	f7fe fe45 	bl	80007a4 <__aeabi_d2uiz>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	73fb      	strb	r3, [r7, #15]
	SK6812_SetColour(currentNote->ledIndex, &(interFaceCol){0, colL, 255 - colL});
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	7e5a      	ldrb	r2, [r3, #25]
 8001b22:	2300      	movs	r3, #0
 8001b24:	733b      	strb	r3, [r7, #12]
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	737b      	strb	r3, [r7, #13]
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	73bb      	strb	r3, [r7, #14]
 8001b32:	f107 030c 	add.w	r3, r7, #12
 8001b36:	4619      	mov	r1, r3
 8001b38:	4610      	mov	r0, r2
 8001b3a:	f000 f93b 	bl	8001db4 <SK6812_SetColour>
}
 8001b3e:	bf00      	nop
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd90      	pop	{r4, r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200003a1 	.word	0x200003a1

08001b4c <controlRel>:
void controlRel(note *currentNote)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	currentNote->isHeld = false;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	769a      	strb	r2, [r3, #26]
	MidiCC(currentNote->ccNum, (uint8_t)0);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	7e1b      	ldrb	r3, [r3, #24]
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fc37 	bl	80013d4 <MidiCC>
	SK6812_SetColour(currentNote->ledIndex, &Colours[COLOUR_OFF]);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	7e5b      	ldrb	r3, [r3, #25]
 8001b6a:	4907      	ldr	r1, [pc, #28]	@ (8001b88 <controlRel+0x3c>)
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f000 f921 	bl	8001db4 <SK6812_SetColour>


	numActive--;
 8001b72:	4b06      	ldr	r3, [pc, #24]	@ (8001b8c <controlRel+0x40>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4b04      	ldr	r3, [pc, #16]	@ (8001b8c <controlRel+0x40>)
 8001b7c:	701a      	strb	r2, [r3, #0]
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	0800a761 	.word	0x0800a761
 8001b8c:	200003a1 	.word	0x200003a1

08001b90 <octaveUpdate>:

void octaveUpdate()
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
	//update all notes

	for(uint8_t i = 0; i< numKeys;i++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	71fb      	strb	r3, [r7, #7]
 8001b9a:	e022      	b.n	8001be2 <octaveUpdate+0x52>
	{
		if(noteArray[i].isHeld)
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	4a37      	ldr	r2, [pc, #220]	@ (8001c7c <octaveUpdate+0xec>)
 8001ba0:	212c      	movs	r1, #44	@ 0x2c
 8001ba2:	fb01 f303 	mul.w	r3, r1, r3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	331a      	adds	r3, #26
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d009      	beq.n	8001bc4 <octaveUpdate+0x34>
		{
			//flag octave for update in note release
			noteArray[i].octUpdate = true;
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	4a32      	ldr	r2, [pc, #200]	@ (8001c7c <octaveUpdate+0xec>)
 8001bb4:	212c      	movs	r1, #44	@ 0x2c
 8001bb6:	fb01 f303 	mul.w	r3, r1, r3
 8001bba:	4413      	add	r3, r2
 8001bbc:	331c      	adds	r3, #28
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	701a      	strb	r2, [r3, #0]
 8001bc2:	e00b      	b.n	8001bdc <octaveUpdate+0x4c>
		}
		else
		{
			noteArray[i].oct = octave;
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	4a2e      	ldr	r2, [pc, #184]	@ (8001c80 <octaveUpdate+0xf0>)
 8001bc8:	f992 0000 	ldrsb.w	r0, [r2]
 8001bcc:	4a2b      	ldr	r2, [pc, #172]	@ (8001c7c <octaveUpdate+0xec>)
 8001bce:	212c      	movs	r1, #44	@ 0x2c
 8001bd0:	fb01 f303 	mul.w	r3, r1, r3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	331d      	adds	r3, #29
 8001bd8:	4602      	mov	r2, r0
 8001bda:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i< numKeys;i++)
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	3301      	adds	r3, #1
 8001be0:	71fb      	strb	r3, [r7, #7]
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	2b0f      	cmp	r3, #15
 8001be6:	d9d9      	bls.n	8001b9c <octaveUpdate+0xc>
		}
	}


	switch (octave) {
 8001be8:	4b25      	ldr	r3, [pc, #148]	@ (8001c80 <octaveUpdate+0xf0>)
 8001bea:	f993 3000 	ldrsb.w	r3, [r3]
 8001bee:	2b18      	cmp	r3, #24
 8001bf0:	d037      	beq.n	8001c62 <octaveUpdate+0xd2>
 8001bf2:	2b18      	cmp	r3, #24
 8001bf4:	dc3d      	bgt.n	8001c72 <octaveUpdate+0xe2>
 8001bf6:	2b0c      	cmp	r3, #12
 8001bf8:	d02b      	beq.n	8001c52 <octaveUpdate+0xc2>
 8001bfa:	2b0c      	cmp	r3, #12
 8001bfc:	dc39      	bgt.n	8001c72 <octaveUpdate+0xe2>
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d008      	beq.n	8001c14 <octaveUpdate+0x84>
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	dc35      	bgt.n	8001c72 <octaveUpdate+0xe2>
 8001c06:	f113 0f18 	cmn.w	r3, #24
 8001c0a:	d01a      	beq.n	8001c42 <octaveUpdate+0xb2>
 8001c0c:	f113 0f0c 	cmn.w	r3, #12
 8001c10:	d00f      	beq.n	8001c32 <octaveUpdate+0xa2>
			break;
		case 24:
				SK6812_SetColour(noteArray[7].ledIndex,&Colours[COLOUR_RED]);
			break;
	}
}
 8001c12:	e02e      	b.n	8001c72 <octaveUpdate+0xe2>
				SK6812_SetColour(noteArray[14].ledIndex,&Colours[COLOUR_OFF]);
 8001c14:	4b19      	ldr	r3, [pc, #100]	@ (8001c7c <octaveUpdate+0xec>)
 8001c16:	f893 3281 	ldrb.w	r3, [r3, #641]	@ 0x281
 8001c1a:	491a      	ldr	r1, [pc, #104]	@ (8001c84 <octaveUpdate+0xf4>)
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 f8c9 	bl	8001db4 <SK6812_SetColour>
				SK6812_SetColour(noteArray[7].ledIndex,&Colours[COLOUR_OFF]);
 8001c22:	4b16      	ldr	r3, [pc, #88]	@ (8001c7c <octaveUpdate+0xec>)
 8001c24:	f893 314d 	ldrb.w	r3, [r3, #333]	@ 0x14d
 8001c28:	4916      	ldr	r1, [pc, #88]	@ (8001c84 <octaveUpdate+0xf4>)
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 f8c2 	bl	8001db4 <SK6812_SetColour>
			break;
 8001c30:	e01f      	b.n	8001c72 <octaveUpdate+0xe2>
				SK6812_SetColour(noteArray[14].ledIndex,&Colours[COLOUR_ORANGE]);
 8001c32:	4b12      	ldr	r3, [pc, #72]	@ (8001c7c <octaveUpdate+0xec>)
 8001c34:	f893 3281 	ldrb.w	r3, [r3, #641]	@ 0x281
 8001c38:	4913      	ldr	r1, [pc, #76]	@ (8001c88 <octaveUpdate+0xf8>)
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 f8ba 	bl	8001db4 <SK6812_SetColour>
			break;
 8001c40:	e017      	b.n	8001c72 <octaveUpdate+0xe2>
				SK6812_SetColour(noteArray[14].ledIndex,&Colours[COLOUR_RED]);
 8001c42:	4b0e      	ldr	r3, [pc, #56]	@ (8001c7c <octaveUpdate+0xec>)
 8001c44:	f893 3281 	ldrb.w	r3, [r3, #641]	@ 0x281
 8001c48:	4910      	ldr	r1, [pc, #64]	@ (8001c8c <octaveUpdate+0xfc>)
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f8b2 	bl	8001db4 <SK6812_SetColour>
			break;
 8001c50:	e00f      	b.n	8001c72 <octaveUpdate+0xe2>
				SK6812_SetColour(noteArray[7].ledIndex,&Colours[COLOUR_ORANGE]);
 8001c52:	4b0a      	ldr	r3, [pc, #40]	@ (8001c7c <octaveUpdate+0xec>)
 8001c54:	f893 314d 	ldrb.w	r3, [r3, #333]	@ 0x14d
 8001c58:	490b      	ldr	r1, [pc, #44]	@ (8001c88 <octaveUpdate+0xf8>)
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 f8aa 	bl	8001db4 <SK6812_SetColour>
			break;
 8001c60:	e007      	b.n	8001c72 <octaveUpdate+0xe2>
				SK6812_SetColour(noteArray[7].ledIndex,&Colours[COLOUR_RED]);
 8001c62:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <octaveUpdate+0xec>)
 8001c64:	f893 314d 	ldrb.w	r3, [r3, #333]	@ 0x14d
 8001c68:	4908      	ldr	r1, [pc, #32]	@ (8001c8c <octaveUpdate+0xfc>)
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 f8a2 	bl	8001db4 <SK6812_SetColour>
			break;
 8001c70:	bf00      	nop
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200003e8 	.word	0x200003e8
 8001c80:	200003a3 	.word	0x200003a3
 8001c84:	0800a761 	.word	0x0800a761
 8001c88:	0800a764 	.word	0x0800a764
 8001c8c:	0800a74c 	.word	0x0800a74c

08001c90 <selectMuxPin>:




void selectMuxPin(int pin)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  for (int i=0; i<3; i++)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	e01f      	b.n	8001cde <selectMuxPin+0x4e>
  {
    if (pin & (1<<i))
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	fa42 f303 	asr.w	r3, r2, r3
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00a      	beq.n	8001cc4 <selectMuxPin+0x34>
      HAL_GPIO_WritePin(selectpinsPort, selectPins[i], GPIO_PIN_SET);
 8001cae:	4a10      	ldr	r2, [pc, #64]	@ (8001cf0 <selectMuxPin+0x60>)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	2201      	movs	r2, #1
 8001cba:	4619      	mov	r1, r3
 8001cbc:	480d      	ldr	r0, [pc, #52]	@ (8001cf4 <selectMuxPin+0x64>)
 8001cbe:	f001 ff11 	bl	8003ae4 <HAL_GPIO_WritePin>
 8001cc2:	e009      	b.n	8001cd8 <selectMuxPin+0x48>
    else
      HAL_GPIO_WritePin(selectpinsPort, selectPins[i], GPIO_PIN_RESET);
 8001cc4:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf0 <selectMuxPin+0x60>)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	2200      	movs	r2, #0
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4808      	ldr	r0, [pc, #32]	@ (8001cf4 <selectMuxPin+0x64>)
 8001cd4:	f001 ff06 	bl	8003ae4 <HAL_GPIO_WritePin>
  for (int i=0; i<3; i++)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	dddc      	ble.n	8001c9e <selectMuxPin+0xe>
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	0800a6c0 	.word	0x0800a6c0
 8001cf4:	40020400 	.word	0x40020400

08001cf8 <lerpF>:


float lerpF(float a,float b)
{
 8001cf8:	b5b0      	push	{r4, r5, r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d02:	edc7 0a00 	vstr	s1, [r7]
	return a + lerpAmt * (b - a);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7fe fcf4 	bl	80006f4 <__aeabi_f2d>
 8001d0c:	4604      	mov	r4, r0
 8001d0e:	460d      	mov	r5, r1
 8001d10:	ed97 7a00 	vldr	s14, [r7]
 8001d14:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d1c:	ee17 0a90 	vmov	r0, s15
 8001d20:	f7fe fce8 	bl	80006f4 <__aeabi_f2d>
 8001d24:	a30c      	add	r3, pc, #48	@ (adr r3, 8001d58 <lerpF+0x60>)
 8001d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2a:	f7fe fa55 	bl	80001d8 <__aeabi_dmul>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4620      	mov	r0, r4
 8001d34:	4629      	mov	r1, r5
 8001d36:	f7fe fb7f 	bl	8000438 <__adddf3>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4610      	mov	r0, r2
 8001d40:	4619      	mov	r1, r3
 8001d42:	f7fe fd4f 	bl	80007e4 <__aeabi_d2f>
 8001d46:	4603      	mov	r3, r0
 8001d48:	ee07 3a90 	vmov	s15, r3
}
 8001d4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bdb0      	pop	{r4, r5, r7, pc}
 8001d56:	bf00      	nop
 8001d58:	1eb851ec 	.word	0x1eb851ec
 8001d5c:	3fb1eb85 	.word	0x3fb1eb85

08001d60 <SK6812_Init>:
    {0, 0, 0},      // Black
    {255,165,0} // Orange
};

HAL_StatusTypeDef SK6812_Init()
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Init(&SK6812_TIM);
 8001d66:	480f      	ldr	r0, [pc, #60]	@ (8001da4 <SK6812_Init+0x44>)
 8001d68:	f003 fdf2 	bl	8005950 <HAL_TIM_PWM_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	717b      	strb	r3, [r7, #5]

    //clear buffer
    for(uint16_t i = 0; i < SK6812_DMA_BUF_LEN;i++)
 8001d70:	2300      	movs	r3, #0
 8001d72:	80fb      	strh	r3, [r7, #6]
 8001d74:	e007      	b.n	8001d86 <SK6812_Init+0x26>
    {
        SK6812_DMA_BUF[i] = 0;
 8001d76:	88fb      	ldrh	r3, [r7, #6]
 8001d78:	4a0b      	ldr	r2, [pc, #44]	@ (8001da8 <SK6812_Init+0x48>)
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(uint16_t i = 0; i < SK6812_DMA_BUF_LEN;i++)
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	3301      	adds	r3, #1
 8001d84:	80fb      	strh	r3, [r7, #6]
 8001d86:	88fb      	ldrh	r3, [r7, #6]
 8001d88:	f5b3 7fe8 	cmp.w	r3, #464	@ 0x1d0
 8001d8c:	d3f3      	bcc.n	8001d76 <SK6812_Init+0x16>
    }

    //set ready flag
    SK6812_DMA_COMPLETE_FLAG = 1;
 8001d8e:	4b07      	ldr	r3, [pc, #28]	@ (8001dac <SK6812_Init+0x4c>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	701a      	strb	r2, [r3, #0]
    SK6812_UPDATE_READY = true;
 8001d94:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <SK6812_Init+0x50>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	701a      	strb	r2, [r3, #0]

    return halStatus;
 8001d9a:	797b      	ldrb	r3, [r7, #5]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000224 	.word	0x20000224
 8001da8:	200006ec 	.word	0x200006ec
 8001dac:	200006aa 	.word	0x200006aa
 8001db0:	20000e2c 	.word	0x20000e2c

08001db4 <SK6812_SetColour>:

void SK6812_SetColour(uint8_t index,const interFaceCol *col)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	6039      	str	r1, [r7, #0]
 8001dbe:	71fb      	strb	r3, [r7, #7]
    SK6812_LEDDATA[index].colour.r = col->r;
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	7811      	ldrb	r1, [r2, #0]
 8001dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8001e00 <SK6812_SetColour+0x4c>)
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	460a      	mov	r2, r1
 8001dce:	705a      	strb	r2, [r3, #1]
    SK6812_LEDDATA[index].colour.g = col->g;
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	7851      	ldrb	r1, [r2, #1]
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e00 <SK6812_SetColour+0x4c>)
 8001dd8:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    SK6812_LEDDATA[index].colour.b = col->b;
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	7891      	ldrb	r1, [r2, #2]
 8001de2:	4a07      	ldr	r2, [pc, #28]	@ (8001e00 <SK6812_SetColour+0x4c>)
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	460a      	mov	r2, r1
 8001dea:	709a      	strb	r2, [r3, #2]

    //set updateready flag to signal an update is needed
    SK6812_UPDATE_READY = true;
 8001dec:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <SK6812_SetColour+0x50>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	701a      	strb	r2, [r3, #0]

}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	200006ac 	.word	0x200006ac
 8001e04:	20000e2c 	.word	0x20000e2c

08001e08 <SK6812_Update>:


HAL_StatusTypeDef SK6812_Update()
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
    if(!SK6812_DMA_COMPLETE_FLAG)
 8001e0e:	4b25      	ldr	r3, [pc, #148]	@ (8001ea4 <SK6812_Update+0x9c>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <SK6812_Update+0x14>
    {
        return HAL_BUSY;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e03f      	b.n	8001e9c <SK6812_Update+0x94>
    }

//    xSemaphoreTake(SK6812_DMA_CompleteHandle,portMAX_DELAY);

    uint16_t bufIndex = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	80fb      	strh	r3, [r7, #6]

    for(uint8_t ledIndex = 0;ledIndex < SK6812_NUM_LEDS;ledIndex++)
 8001e20:	2300      	movs	r3, #0
 8001e22:	717b      	strb	r3, [r7, #5]
 8001e24:	e024      	b.n	8001e70 <SK6812_Update+0x68>
    {
        for(uint8_t bitIndex = 0; bitIndex<SK6812_BITS_PER_LED;bitIndex++)
 8001e26:	2300      	movs	r3, #0
 8001e28:	713b      	strb	r3, [r7, #4]
 8001e2a:	e01b      	b.n	8001e64 <SK6812_Update+0x5c>
        {

            if((SK6812_LEDDATA[ledIndex].data >> bitIndex) & 0x01)
 8001e2c:	797b      	ldrb	r3, [r7, #5]
 8001e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ea8 <SK6812_Update+0xa0>)
 8001e30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e34:	793b      	ldrb	r3, [r7, #4]
 8001e36:	fa22 f303 	lsr.w	r3, r2, r3
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d005      	beq.n	8001e4e <SK6812_Update+0x46>
            {
                SK6812_DMA_BUF[bufIndex] = SK6812_HI_VAL;
 8001e42:	88fb      	ldrh	r3, [r7, #6]
 8001e44:	4a19      	ldr	r2, [pc, #100]	@ (8001eac <SK6812_Update+0xa4>)
 8001e46:	213c      	movs	r1, #60	@ 0x3c
 8001e48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001e4c:	e004      	b.n	8001e58 <SK6812_Update+0x50>
            }
            else
            {
                SK6812_DMA_BUF[bufIndex] = SK6812_LO_VAL;
 8001e4e:	88fb      	ldrh	r3, [r7, #6]
 8001e50:	4a16      	ldr	r2, [pc, #88]	@ (8001eac <SK6812_Update+0xa4>)
 8001e52:	211e      	movs	r1, #30
 8001e54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            }

            bufIndex++;
 8001e58:	88fb      	ldrh	r3, [r7, #6]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	80fb      	strh	r3, [r7, #6]
        for(uint8_t bitIndex = 0; bitIndex<SK6812_BITS_PER_LED;bitIndex++)
 8001e5e:	793b      	ldrb	r3, [r7, #4]
 8001e60:	3301      	adds	r3, #1
 8001e62:	713b      	strb	r3, [r7, #4]
 8001e64:	793b      	ldrb	r3, [r7, #4]
 8001e66:	2b17      	cmp	r3, #23
 8001e68:	d9e0      	bls.n	8001e2c <SK6812_Update+0x24>
    for(uint8_t ledIndex = 0;ledIndex < SK6812_NUM_LEDS;ledIndex++)
 8001e6a:	797b      	ldrb	r3, [r7, #5]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	717b      	strb	r3, [r7, #5]
 8001e70:	797b      	ldrb	r3, [r7, #5]
 8001e72:	2b0f      	cmp	r3, #15
 8001e74:	d9d7      	bls.n	8001e26 <SK6812_Update+0x1e>
        }

    }

    HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Start_DMA(&SK6812_TIM,SK6812_TIM_CHANNEL,(uint32_t *)SK6812_DMA_BUF,SK6812_DMA_BUF_LEN);
 8001e76:	f44f 73e8 	mov.w	r3, #464	@ 0x1d0
 8001e7a:	4a0c      	ldr	r2, [pc, #48]	@ (8001eac <SK6812_Update+0xa4>)
 8001e7c:	2108      	movs	r1, #8
 8001e7e:	480c      	ldr	r0, [pc, #48]	@ (8001eb0 <SK6812_Update+0xa8>)
 8001e80:	f003 fdc0 	bl	8005a04 <HAL_TIM_PWM_Start_DMA>
 8001e84:	4603      	mov	r3, r0
 8001e86:	70fb      	strb	r3, [r7, #3]
    if (halStatus == HAL_OK)
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d105      	bne.n	8001e9a <SK6812_Update+0x92>
    {
        SK6812_DMA_COMPLETE_FLAG = 0;
 8001e8e:	4b05      	ldr	r3, [pc, #20]	@ (8001ea4 <SK6812_Update+0x9c>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
        //signal that update is not needed
        SK6812_UPDATE_READY = false;
 8001e94:	4b07      	ldr	r3, [pc, #28]	@ (8001eb4 <SK6812_Update+0xac>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]
    }

    return halStatus;
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
    
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	200006aa 	.word	0x200006aa
 8001ea8:	200006ac 	.word	0x200006ac
 8001eac:	200006ec 	.word	0x200006ec
 8001eb0:	20000224 	.word	0x20000224
 8001eb4:	20000e2c 	.word	0x20000e2c

08001eb8 <SK6812_Callback>:

void SK6812_Callback()
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop_DMA(&SK6812_TIM,SK6812_TIM_CHANNEL);
 8001ebc:	2108      	movs	r1, #8
 8001ebe:	4804      	ldr	r0, [pc, #16]	@ (8001ed0 <SK6812_Callback+0x18>)
 8001ec0:	f003 ff50 	bl	8005d64 <HAL_TIM_PWM_Stop_DMA>
    SK6812_DMA_COMPLETE_FLAG = 1;
 8001ec4:	4b03      	ldr	r3, [pc, #12]	@ (8001ed4 <SK6812_Callback+0x1c>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	701a      	strb	r2, [r3, #0]
//    BaseType_t xHigherPriorityTaskWoken;
//    xHigherPriorityTaskWoken = pdFALSE;
//    xSemaphoreGiveFromISR(SK6812_DMA_CompleteHandle,&xHigherPriorityTaskWoken);
//    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000224 	.word	0x20000224
 8001ed4:	200006aa 	.word	0x200006aa

08001ed8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	607b      	str	r3, [r7, #4]
 8001ee2:	4b10      	ldr	r3, [pc, #64]	@ (8001f24 <HAL_MspInit+0x4c>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8001f24 <HAL_MspInit+0x4c>)
 8001ee8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eee:	4b0d      	ldr	r3, [pc, #52]	@ (8001f24 <HAL_MspInit+0x4c>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	603b      	str	r3, [r7, #0]
 8001efe:	4b09      	ldr	r3, [pc, #36]	@ (8001f24 <HAL_MspInit+0x4c>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	4a08      	ldr	r2, [pc, #32]	@ (8001f24 <HAL_MspInit+0x4c>)
 8001f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f0a:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <HAL_MspInit+0x4c>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f12:	603b      	str	r3, [r7, #0]
 8001f14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800

08001f28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	@ 0x28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a32      	ldr	r2, [pc, #200]	@ (8002010 <HAL_ADC_MspInit+0xe8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d15e      	bne.n	8002008 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	4b31      	ldr	r3, [pc, #196]	@ (8002014 <HAL_ADC_MspInit+0xec>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f52:	4a30      	ldr	r2, [pc, #192]	@ (8002014 <HAL_ADC_MspInit+0xec>)
 8001f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f5a:	4b2e      	ldr	r3, [pc, #184]	@ (8002014 <HAL_ADC_MspInit+0xec>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8002014 <HAL_ADC_MspInit+0xec>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	4a29      	ldr	r2, [pc, #164]	@ (8002014 <HAL_ADC_MspInit+0xec>)
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f76:	4b27      	ldr	r3, [pc, #156]	@ (8002014 <HAL_ADC_MspInit+0xec>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f82:	2303      	movs	r3, #3
 8001f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f86:	2303      	movs	r3, #3
 8001f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8e:	f107 0314 	add.w	r3, r7, #20
 8001f92:	4619      	mov	r1, r3
 8001f94:	4820      	ldr	r0, [pc, #128]	@ (8002018 <HAL_ADC_MspInit+0xf0>)
 8001f96:	f001 fc21 	bl	80037dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001f9a:	4b20      	ldr	r3, [pc, #128]	@ (800201c <HAL_ADC_MspInit+0xf4>)
 8001f9c:	4a20      	ldr	r2, [pc, #128]	@ (8002020 <HAL_ADC_MspInit+0xf8>)
 8001f9e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001fa0:	4b1e      	ldr	r3, [pc, #120]	@ (800201c <HAL_ADC_MspInit+0xf4>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800201c <HAL_ADC_MspInit+0xf4>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fac:	4b1b      	ldr	r3, [pc, #108]	@ (800201c <HAL_ADC_MspInit+0xf4>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800201c <HAL_ADC_MspInit+0xf4>)
 8001fb4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fb8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001fba:	4b18      	ldr	r3, [pc, #96]	@ (800201c <HAL_ADC_MspInit+0xf4>)
 8001fbc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001fc0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001fc2:	4b16      	ldr	r3, [pc, #88]	@ (800201c <HAL_ADC_MspInit+0xf4>)
 8001fc4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fc8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001fca:	4b14      	ldr	r3, [pc, #80]	@ (800201c <HAL_ADC_MspInit+0xf4>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001fd0:	4b12      	ldr	r3, [pc, #72]	@ (800201c <HAL_ADC_MspInit+0xf4>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fd6:	4b11      	ldr	r3, [pc, #68]	@ (800201c <HAL_ADC_MspInit+0xf4>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001fdc:	480f      	ldr	r0, [pc, #60]	@ (800201c <HAL_ADC_MspInit+0xf4>)
 8001fde:	f001 f86b 	bl	80030b8 <HAL_DMA_Init>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001fe8:	f7ff f920 	bl	800122c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a0b      	ldr	r2, [pc, #44]	@ (800201c <HAL_ADC_MspInit+0xf4>)
 8001ff0:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800201c <HAL_ADC_MspInit+0xf4>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	2012      	movs	r0, #18
 8001ffe:	f001 f824 	bl	800304a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002002:	2012      	movs	r0, #18
 8002004:	f001 f83d 	bl	8003082 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002008:	bf00      	nop
 800200a:	3728      	adds	r7, #40	@ 0x28
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40012000 	.word	0x40012000
 8002014:	40023800 	.word	0x40023800
 8002018:	40020400 	.word	0x40020400
 800201c:	200001c4 	.word	0x200001c4
 8002020:	40026410 	.word	0x40026410

08002024 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002034:	d14c      	bne.n	80020d0 <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	4b43      	ldr	r3, [pc, #268]	@ (8002148 <HAL_TIM_Base_MspInit+0x124>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	4a42      	ldr	r2, [pc, #264]	@ (8002148 <HAL_TIM_Base_MspInit+0x124>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6413      	str	r3, [r2, #64]	@ 0x40
 8002046:	4b40      	ldr	r3, [pc, #256]	@ (8002148 <HAL_TIM_Base_MspInit+0x124>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH3_UP Init */
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 8002052:	4b3e      	ldr	r3, [pc, #248]	@ (800214c <HAL_TIM_Base_MspInit+0x128>)
 8002054:	4a3e      	ldr	r2, [pc, #248]	@ (8002150 <HAL_TIM_Base_MspInit+0x12c>)
 8002056:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 8002058:	4b3c      	ldr	r3, [pc, #240]	@ (800214c <HAL_TIM_Base_MspInit+0x128>)
 800205a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800205e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002060:	4b3a      	ldr	r3, [pc, #232]	@ (800214c <HAL_TIM_Base_MspInit+0x128>)
 8002062:	2240      	movs	r2, #64	@ 0x40
 8002064:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002066:	4b39      	ldr	r3, [pc, #228]	@ (800214c <HAL_TIM_Base_MspInit+0x128>)
 8002068:	2200      	movs	r2, #0
 800206a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 800206c:	4b37      	ldr	r3, [pc, #220]	@ (800214c <HAL_TIM_Base_MspInit+0x128>)
 800206e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002072:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002074:	4b35      	ldr	r3, [pc, #212]	@ (800214c <HAL_TIM_Base_MspInit+0x128>)
 8002076:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800207a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800207c:	4b33      	ldr	r3, [pc, #204]	@ (800214c <HAL_TIM_Base_MspInit+0x128>)
 800207e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002082:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 8002084:	4b31      	ldr	r3, [pc, #196]	@ (800214c <HAL_TIM_Base_MspInit+0x128>)
 8002086:	2200      	movs	r2, #0
 8002088:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_LOW;
 800208a:	4b30      	ldr	r3, [pc, #192]	@ (800214c <HAL_TIM_Base_MspInit+0x128>)
 800208c:	2200      	movs	r2, #0
 800208e:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002090:	4b2e      	ldr	r3, [pc, #184]	@ (800214c <HAL_TIM_Base_MspInit+0x128>)
 8002092:	2200      	movs	r2, #0
 8002094:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 8002096:	482d      	ldr	r0, [pc, #180]	@ (800214c <HAL_TIM_Base_MspInit+0x128>)
 8002098:	f001 f80e 	bl	80030b8 <HAL_DMA_Init>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80020a2:	f7ff f8c3 	bl	800122c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a28      	ldr	r2, [pc, #160]	@ (800214c <HAL_TIM_Base_MspInit+0x128>)
 80020aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80020ac:	4a27      	ldr	r2, [pc, #156]	@ (800214c <HAL_TIM_Base_MspInit+0x128>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a25      	ldr	r2, [pc, #148]	@ (800214c <HAL_TIM_Base_MspInit+0x128>)
 80020b6:	621a      	str	r2, [r3, #32]
 80020b8:	4a24      	ldr	r2, [pc, #144]	@ (800214c <HAL_TIM_Base_MspInit+0x128>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	2100      	movs	r1, #0
 80020c2:	201c      	movs	r0, #28
 80020c4:	f000 ffc1 	bl	800304a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020c8:	201c      	movs	r0, #28
 80020ca:	f000 ffda 	bl	8003082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80020ce:	e036      	b.n	800213e <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM4)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002154 <HAL_TIM_Base_MspInit+0x130>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d116      	bne.n	8002108 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	4b1a      	ldr	r3, [pc, #104]	@ (8002148 <HAL_TIM_Base_MspInit+0x124>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	4a19      	ldr	r2, [pc, #100]	@ (8002148 <HAL_TIM_Base_MspInit+0x124>)
 80020e4:	f043 0304 	orr.w	r3, r3, #4
 80020e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ea:	4b17      	ldr	r3, [pc, #92]	@ (8002148 <HAL_TIM_Base_MspInit+0x124>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80020f6:	2200      	movs	r2, #0
 80020f8:	2100      	movs	r1, #0
 80020fa:	201e      	movs	r0, #30
 80020fc:	f000 ffa5 	bl	800304a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002100:	201e      	movs	r0, #30
 8002102:	f000 ffbe 	bl	8003082 <HAL_NVIC_EnableIRQ>
}
 8002106:	e01a      	b.n	800213e <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM5)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a12      	ldr	r2, [pc, #72]	@ (8002158 <HAL_TIM_Base_MspInit+0x134>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d115      	bne.n	800213e <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	4b0c      	ldr	r3, [pc, #48]	@ (8002148 <HAL_TIM_Base_MspInit+0x124>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211a:	4a0b      	ldr	r2, [pc, #44]	@ (8002148 <HAL_TIM_Base_MspInit+0x124>)
 800211c:	f043 0308 	orr.w	r3, r3, #8
 8002120:	6413      	str	r3, [r2, #64]	@ 0x40
 8002122:	4b09      	ldr	r3, [pc, #36]	@ (8002148 <HAL_TIM_Base_MspInit+0x124>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800212e:	2200      	movs	r2, #0
 8002130:	2100      	movs	r1, #0
 8002132:	2032      	movs	r0, #50	@ 0x32
 8002134:	f000 ff89 	bl	800304a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002138:	2032      	movs	r0, #50	@ 0x32
 800213a:	f000 ffa2 	bl	8003082 <HAL_NVIC_EnableIRQ>
}
 800213e:	bf00      	nop
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40023800 	.word	0x40023800
 800214c:	200002fc 	.word	0x200002fc
 8002150:	40026028 	.word	0x40026028
 8002154:	40000800 	.word	0x40000800
 8002158:	40000c00 	.word	0x40000c00

0800215c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 030c 	add.w	r3, r7, #12
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800217c:	d11e      	bne.n	80021bc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	4b10      	ldr	r3, [pc, #64]	@ (80021c4 <HAL_TIM_MspPostInit+0x68>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002186:	4a0f      	ldr	r2, [pc, #60]	@ (80021c4 <HAL_TIM_MspPostInit+0x68>)
 8002188:	f043 0302 	orr.w	r3, r3, #2
 800218c:	6313      	str	r3, [r2, #48]	@ 0x30
 800218e:	4b0d      	ldr	r3, [pc, #52]	@ (80021c4 <HAL_TIM_MspPostInit+0x68>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800219a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800219e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a0:	2302      	movs	r3, #2
 80021a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021ac:	2301      	movs	r3, #1
 80021ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b0:	f107 030c 	add.w	r3, r7, #12
 80021b4:	4619      	mov	r1, r3
 80021b6:	4804      	ldr	r0, [pc, #16]	@ (80021c8 <HAL_TIM_MspPostInit+0x6c>)
 80021b8:	f001 fb10 	bl	80037dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80021bc:	bf00      	nop
 80021be:	3720      	adds	r7, #32
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40020400 	.word	0x40020400

080021cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021d0:	bf00      	nop
 80021d2:	e7fd      	b.n	80021d0 <NMI_Handler+0x4>

080021d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021d8:	bf00      	nop
 80021da:	e7fd      	b.n	80021d8 <HardFault_Handler+0x4>

080021dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e0:	bf00      	nop
 80021e2:	e7fd      	b.n	80021e0 <MemManage_Handler+0x4>

080021e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021e8:	bf00      	nop
 80021ea:	e7fd      	b.n	80021e8 <BusFault_Handler+0x4>

080021ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f0:	bf00      	nop
 80021f2:	e7fd      	b.n	80021f0 <UsageFault_Handler+0x4>

080021f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002222:	f000 f8d7 	bl	80023d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 8002230:	4802      	ldr	r0, [pc, #8]	@ (800223c <DMA1_Stream1_IRQHandler+0x10>)
 8002232:	f001 f869 	bl	8003308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	200002fc 	.word	0x200002fc

08002240 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002244:	4802      	ldr	r0, [pc, #8]	@ (8002250 <ADC_IRQHandler+0x10>)
 8002246:	f000 f94c 	bl	80024e2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	2000017c 	.word	0x2000017c

08002254 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002258:	4802      	ldr	r0, [pc, #8]	@ (8002264 <TIM2_IRQHandler+0x10>)
 800225a:	f003 fe49 	bl	8005ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000224 	.word	0x20000224

08002268 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800226c:	4802      	ldr	r0, [pc, #8]	@ (8002278 <TIM4_IRQHandler+0x10>)
 800226e:	f003 fe3f 	bl	8005ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	2000026c 	.word	0x2000026c

0800227c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002280:	4802      	ldr	r0, [pc, #8]	@ (800228c <TIM5_IRQHandler+0x10>)
 8002282:	f003 fe35 	bl	8005ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	200002b4 	.word	0x200002b4

08002290 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002294:	4802      	ldr	r0, [pc, #8]	@ (80022a0 <DMA2_Stream0_IRQHandler+0x10>)
 8002296:	f001 f837 	bl	8003308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	200001c4 	.word	0x200001c4

080022a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80022a8:	4802      	ldr	r0, [pc, #8]	@ (80022b4 <OTG_FS_IRQHandler+0x10>)
 80022aa:	f001 fd78 	bl	8003d9e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20001314 	.word	0x20001314

080022b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022bc:	4b06      	ldr	r3, [pc, #24]	@ (80022d8 <SystemInit+0x20>)
 80022be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c2:	4a05      	ldr	r2, [pc, #20]	@ (80022d8 <SystemInit+0x20>)
 80022c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002314 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022e0:	f7ff ffea 	bl	80022b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022e4:	480c      	ldr	r0, [pc, #48]	@ (8002318 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022e6:	490d      	ldr	r1, [pc, #52]	@ (800231c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002320 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022ec:	e002      	b.n	80022f4 <LoopCopyDataInit>

080022ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022f2:	3304      	adds	r3, #4

080022f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f8:	d3f9      	bcc.n	80022ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002324 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002328 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002300:	e001      	b.n	8002306 <LoopFillZerobss>

08002302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002304:	3204      	adds	r2, #4

08002306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002308:	d3fb      	bcc.n	8002302 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800230a:	f008 f985 	bl	800a618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800230e:	f7fe fcc5 	bl	8000c9c <main>
  bx  lr    
 8002312:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002314:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800231c:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8002320:	0800a790 	.word	0x0800a790
  ldr r2, =_sbss
 8002324:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8002328:	2000180c 	.word	0x2000180c

0800232c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800232c:	e7fe      	b.n	800232c <DMA1_Stream0_IRQHandler>
	...

08002330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002334:	4b0e      	ldr	r3, [pc, #56]	@ (8002370 <HAL_Init+0x40>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a0d      	ldr	r2, [pc, #52]	@ (8002370 <HAL_Init+0x40>)
 800233a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800233e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002340:	4b0b      	ldr	r3, [pc, #44]	@ (8002370 <HAL_Init+0x40>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a0a      	ldr	r2, [pc, #40]	@ (8002370 <HAL_Init+0x40>)
 8002346:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800234a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800234c:	4b08      	ldr	r3, [pc, #32]	@ (8002370 <HAL_Init+0x40>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a07      	ldr	r2, [pc, #28]	@ (8002370 <HAL_Init+0x40>)
 8002352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002356:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002358:	2003      	movs	r0, #3
 800235a:	f000 fe6b 	bl	8003034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800235e:	200f      	movs	r0, #15
 8002360:	f000 f808 	bl	8002374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002364:	f7ff fdb8 	bl	8001ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40023c00 	.word	0x40023c00

08002374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800237c:	4b12      	ldr	r3, [pc, #72]	@ (80023c8 <HAL_InitTick+0x54>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b12      	ldr	r3, [pc, #72]	@ (80023cc <HAL_InitTick+0x58>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	4619      	mov	r1, r3
 8002386:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800238a:	fbb3 f3f1 	udiv	r3, r3, r1
 800238e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002392:	4618      	mov	r0, r3
 8002394:	f000 fe83 	bl	800309e <HAL_SYSTICK_Config>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e00e      	b.n	80023c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b0f      	cmp	r3, #15
 80023a6:	d80a      	bhi.n	80023be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023a8:	2200      	movs	r2, #0
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295
 80023b0:	f000 fe4b 	bl	800304a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023b4:	4a06      	ldr	r2, [pc, #24]	@ (80023d0 <HAL_InitTick+0x5c>)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	e000      	b.n	80023c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20000000 	.word	0x20000000
 80023cc:	20000008 	.word	0x20000008
 80023d0:	20000004 	.word	0x20000004

080023d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023d8:	4b06      	ldr	r3, [pc, #24]	@ (80023f4 <HAL_IncTick+0x20>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	461a      	mov	r2, r3
 80023de:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <HAL_IncTick+0x24>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4413      	add	r3, r2
 80023e4:	4a04      	ldr	r2, [pc, #16]	@ (80023f8 <HAL_IncTick+0x24>)
 80023e6:	6013      	str	r3, [r2, #0]
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	20000008 	.word	0x20000008
 80023f8:	20000e30 	.word	0x20000e30

080023fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002400:	4b03      	ldr	r3, [pc, #12]	@ (8002410 <HAL_GetTick+0x14>)
 8002402:	681b      	ldr	r3, [r3, #0]
}
 8002404:	4618      	mov	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20000e30 	.word	0x20000e30

08002414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800241c:	f7ff ffee 	bl	80023fc <HAL_GetTick>
 8002420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242c:	d005      	beq.n	800243a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800242e:	4b0a      	ldr	r3, [pc, #40]	@ (8002458 <HAL_Delay+0x44>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4413      	add	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800243a:	bf00      	nop
 800243c:	f7ff ffde 	bl	80023fc <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	429a      	cmp	r2, r3
 800244a:	d8f7      	bhi.n	800243c <HAL_Delay+0x28>
  {
  }
}
 800244c:	bf00      	nop
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000008 	.word	0x20000008

0800245c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e033      	b.n	80024da <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002476:	2b00      	cmp	r3, #0
 8002478:	d109      	bne.n	800248e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff fd54 	bl	8001f28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	2b00      	cmp	r3, #0
 8002498:	d118      	bne.n	80024cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80024a2:	f023 0302 	bic.w	r3, r3, #2
 80024a6:	f043 0202 	orr.w	r2, r3, #2
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fb68 	bl	8002b84 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	f023 0303 	bic.w	r3, r3, #3
 80024c2:	f043 0201 	orr.w	r2, r3, #1
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80024ca:	e001      	b.n	80024d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	2300      	movs	r3, #0
 80024f0:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	f003 0320 	and.w	r3, r3, #32
 8002510:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d049      	beq.n	80025ac <HAL_ADC_IRQHandler+0xca>
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d046      	beq.n	80025ac <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	2b00      	cmp	r3, #0
 8002528:	d105      	bne.n	8002536 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d12b      	bne.n	800259c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002548:	2b00      	cmp	r3, #0
 800254a:	d127      	bne.n	800259c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002552:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002556:	2b00      	cmp	r3, #0
 8002558:	d006      	beq.n	8002568 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002564:	2b00      	cmp	r3, #0
 8002566:	d119      	bne.n	800259c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0220 	bic.w	r2, r2, #32
 8002576:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002588:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d105      	bne.n	800259c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002594:	f043 0201 	orr.w	r2, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7fe fb25 	bl	8000bec <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f06f 0212 	mvn.w	r2, #18
 80025aa:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ba:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d057      	beq.n	8002672 <HAL_ADC_IRQHandler+0x190>
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d054      	beq.n	8002672 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025cc:	f003 0310 	and.w	r3, r3, #16
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d105      	bne.n	80025e0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d139      	bne.n	8002662 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d006      	beq.n	800260a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002606:	2b00      	cmp	r3, #0
 8002608:	d12b      	bne.n	8002662 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002614:	2b00      	cmp	r3, #0
 8002616:	d124      	bne.n	8002662 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002622:	2b00      	cmp	r3, #0
 8002624:	d11d      	bne.n	8002662 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800262a:	2b00      	cmp	r3, #0
 800262c:	d119      	bne.n	8002662 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800263c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002652:	2b00      	cmp	r3, #0
 8002654:	d105      	bne.n	8002662 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265a:	f043 0201 	orr.w	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fc0c 	bl	8002e80 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f06f 020c 	mvn.w	r2, #12
 8002670:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002680:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d017      	beq.n	80026b8 <HAL_ADC_IRQHandler+0x1d6>
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d014      	beq.n	80026b8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b01      	cmp	r3, #1
 800269a:	d10d      	bne.n	80026b8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f925 	bl	80028f8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f06f 0201 	mvn.w	r2, #1
 80026b6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 0320 	and.w	r3, r3, #32
 80026be:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026c6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d015      	beq.n	80026fa <HAL_ADC_IRQHandler+0x218>
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d012      	beq.n	80026fa <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d8:	f043 0202 	orr.w	r2, r3, #2
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f06f 0220 	mvn.w	r2, #32
 80026e8:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f90e 	bl	800290c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f06f 0220 	mvn.w	r2, #32
 80026f8:	601a      	str	r2, [r3, #0]
  }
}
 80026fa:	bf00      	nop
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_ADC_Start_DMA+0x1e>
 800271e:	2302      	movs	r3, #2
 8002720:	e0ce      	b.n	80028c0 <HAL_ADC_Start_DMA+0x1bc>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b01      	cmp	r3, #1
 8002736:	d018      	beq.n	800276a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002748:	4b5f      	ldr	r3, [pc, #380]	@ (80028c8 <HAL_ADC_Start_DMA+0x1c4>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a5f      	ldr	r2, [pc, #380]	@ (80028cc <HAL_ADC_Start_DMA+0x1c8>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	0c9a      	lsrs	r2, r3, #18
 8002754:	4613      	mov	r3, r2
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	4413      	add	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800275c:	e002      	b.n	8002764 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	3b01      	subs	r3, #1
 8002762:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f9      	bne.n	800275e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002774:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002778:	d107      	bne.n	800278a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002788:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b01      	cmp	r3, #1
 8002796:	f040 8086 	bne.w	80028a6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80027a2:	f023 0301 	bic.w	r3, r3, #1
 80027a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d007      	beq.n	80027cc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027c4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027d8:	d106      	bne.n	80027e8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027de:	f023 0206 	bic.w	r2, r3, #6
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	645a      	str	r2, [r3, #68]	@ 0x44
 80027e6:	e002      	b.n	80027ee <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027f6:	4b36      	ldr	r3, [pc, #216]	@ (80028d0 <HAL_ADC_Start_DMA+0x1cc>)
 80027f8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027fe:	4a35      	ldr	r2, [pc, #212]	@ (80028d4 <HAL_ADC_Start_DMA+0x1d0>)
 8002800:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002806:	4a34      	ldr	r2, [pc, #208]	@ (80028d8 <HAL_ADC_Start_DMA+0x1d4>)
 8002808:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800280e:	4a33      	ldr	r2, [pc, #204]	@ (80028dc <HAL_ADC_Start_DMA+0x1d8>)
 8002810:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800281a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800282a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800283a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	334c      	adds	r3, #76	@ 0x4c
 8002846:	4619      	mov	r1, r3
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f000 fce2 	bl	8003214 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 031f 	and.w	r3, r3, #31
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10f      	bne.n	800287c <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d129      	bne.n	80028be <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002878:	609a      	str	r2, [r3, #8]
 800287a:	e020      	b.n	80028be <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a17      	ldr	r2, [pc, #92]	@ (80028e0 <HAL_ADC_Start_DMA+0x1dc>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d11b      	bne.n	80028be <HAL_ADC_Start_DMA+0x1ba>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d114      	bne.n	80028be <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	e00b      	b.n	80028be <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	f043 0210 	orr.w	r2, r3, #16
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b6:	f043 0201 	orr.w	r2, r3, #1
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000000 	.word	0x20000000
 80028cc:	431bde83 	.word	0x431bde83
 80028d0:	40012300 	.word	0x40012300
 80028d4:	08002d7d 	.word	0x08002d7d
 80028d8:	08002e37 	.word	0x08002e37
 80028dc:	08002e53 	.word	0x08002e53
 80028e0:	40012000 	.word	0x40012000

080028e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <HAL_ADC_ConfigChannel+0x1c>
 8002938:	2302      	movs	r3, #2
 800293a:	e113      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x244>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b09      	cmp	r3, #9
 800294a:	d925      	bls.n	8002998 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68d9      	ldr	r1, [r3, #12]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	b29b      	uxth	r3, r3
 8002958:	461a      	mov	r2, r3
 800295a:	4613      	mov	r3, r2
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	4413      	add	r3, r2
 8002960:	3b1e      	subs	r3, #30
 8002962:	2207      	movs	r2, #7
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43da      	mvns	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	400a      	ands	r2, r1
 8002970:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68d9      	ldr	r1, [r3, #12]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	b29b      	uxth	r3, r3
 8002982:	4618      	mov	r0, r3
 8002984:	4603      	mov	r3, r0
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4403      	add	r3, r0
 800298a:	3b1e      	subs	r3, #30
 800298c:	409a      	lsls	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	e022      	b.n	80029de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6919      	ldr	r1, [r3, #16]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	461a      	mov	r2, r3
 80029a6:	4613      	mov	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	2207      	movs	r2, #7
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43da      	mvns	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	400a      	ands	r2, r1
 80029ba:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6919      	ldr	r1, [r3, #16]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	4618      	mov	r0, r3
 80029ce:	4603      	mov	r3, r0
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	4403      	add	r3, r0
 80029d4:	409a      	lsls	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b06      	cmp	r3, #6
 80029e4:	d824      	bhi.n	8002a30 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	3b05      	subs	r3, #5
 80029f8:	221f      	movs	r2, #31
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43da      	mvns	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	400a      	ands	r2, r1
 8002a06:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	4618      	mov	r0, r3
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	3b05      	subs	r3, #5
 8002a22:	fa00 f203 	lsl.w	r2, r0, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a2e:	e04c      	b.n	8002aca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b0c      	cmp	r3, #12
 8002a36:	d824      	bhi.n	8002a82 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	3b23      	subs	r3, #35	@ 0x23
 8002a4a:	221f      	movs	r2, #31
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43da      	mvns	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	400a      	ands	r2, r1
 8002a58:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	4618      	mov	r0, r3
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	3b23      	subs	r3, #35	@ 0x23
 8002a74:	fa00 f203 	lsl.w	r2, r0, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a80:	e023      	b.n	8002aca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	3b41      	subs	r3, #65	@ 0x41
 8002a94:	221f      	movs	r2, #31
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43da      	mvns	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	400a      	ands	r2, r1
 8002aa2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	3b41      	subs	r3, #65	@ 0x41
 8002abe:	fa00 f203 	lsl.w	r2, r0, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002aca:	4b29      	ldr	r3, [pc, #164]	@ (8002b70 <HAL_ADC_ConfigChannel+0x250>)
 8002acc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a28      	ldr	r2, [pc, #160]	@ (8002b74 <HAL_ADC_ConfigChannel+0x254>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d10f      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x1d8>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b12      	cmp	r3, #18
 8002ade:	d10b      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a1d      	ldr	r2, [pc, #116]	@ (8002b74 <HAL_ADC_ConfigChannel+0x254>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d12b      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x23a>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a1c      	ldr	r2, [pc, #112]	@ (8002b78 <HAL_ADC_ConfigChannel+0x258>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d003      	beq.n	8002b14 <HAL_ADC_ConfigChannel+0x1f4>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b11      	cmp	r3, #17
 8002b12:	d122      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a11      	ldr	r2, [pc, #68]	@ (8002b78 <HAL_ADC_ConfigChannel+0x258>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d111      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b36:	4b11      	ldr	r3, [pc, #68]	@ (8002b7c <HAL_ADC_ConfigChannel+0x25c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a11      	ldr	r2, [pc, #68]	@ (8002b80 <HAL_ADC_ConfigChannel+0x260>)
 8002b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b40:	0c9a      	lsrs	r2, r3, #18
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002b4c:	e002      	b.n	8002b54 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	3b01      	subs	r3, #1
 8002b52:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f9      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	40012300 	.word	0x40012300
 8002b74:	40012000 	.word	0x40012000
 8002b78:	10000012 	.word	0x10000012
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	431bde83 	.word	0x431bde83

08002b84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b8c:	4b79      	ldr	r3, [pc, #484]	@ (8002d74 <ADC_Init+0x1f0>)
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6859      	ldr	r1, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	021a      	lsls	r2, r3, #8
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002bdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6859      	ldr	r1, [r3, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6899      	ldr	r1, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c16:	4a58      	ldr	r2, [pc, #352]	@ (8002d78 <ADC_Init+0x1f4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d022      	beq.n	8002c62 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6899      	ldr	r1, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6899      	ldr	r1, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	609a      	str	r2, [r3, #8]
 8002c60:	e00f      	b.n	8002c82 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c80:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0202 	bic.w	r2, r2, #2
 8002c90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6899      	ldr	r1, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	7e1b      	ldrb	r3, [r3, #24]
 8002c9c:	005a      	lsls	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d01b      	beq.n	8002ce8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cbe:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002cce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6859      	ldr	r1, [r3, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	035a      	lsls	r2, r3, #13
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	e007      	b.n	8002cf8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cf6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002d06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	051a      	lsls	r2, r3, #20
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002d2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6899      	ldr	r1, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d3a:	025a      	lsls	r2, r3, #9
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6899      	ldr	r1, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	029a      	lsls	r2, r3, #10
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	609a      	str	r2, [r3, #8]
}
 8002d68:	bf00      	nop
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	40012300 	.word	0x40012300
 8002d78:	0f000001 	.word	0x0f000001

08002d7c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d88:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d13c      	bne.n	8002e10 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d12b      	bne.n	8002e08 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d127      	bne.n	8002e08 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dbe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d006      	beq.n	8002dd4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d119      	bne.n	8002e08 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0220 	bic.w	r2, r2, #32
 8002de2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d105      	bne.n	8002e08 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e00:	f043 0201 	orr.w	r2, r3, #1
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f7fd feef 	bl	8000bec <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e0e:	e00e      	b.n	8002e2e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f7ff fd75 	bl	800290c <HAL_ADC_ErrorCallback>
}
 8002e22:	e004      	b.n	8002e2e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	4798      	blx	r3
}
 8002e2e:	bf00      	nop
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b084      	sub	sp, #16
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e42:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f7ff fd4d 	bl	80028e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e4a:	bf00      	nop
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b084      	sub	sp, #16
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e5e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2240      	movs	r2, #64	@ 0x40
 8002e64:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6a:	f043 0204 	orr.w	r2, r3, #4
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f7ff fd4a 	bl	800290c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e78:	bf00      	nop
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ebc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ec6:	4a04      	ldr	r2, [pc, #16]	@ (8002ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	60d3      	str	r3, [r2, #12]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ee0:	4b04      	ldr	r3, [pc, #16]	@ (8002ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	0a1b      	lsrs	r3, r3, #8
 8002ee6:	f003 0307 	and.w	r3, r3, #7
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	e000ed00 	.word	0xe000ed00

08002ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	db0b      	blt.n	8002f22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	f003 021f 	and.w	r2, r3, #31
 8002f10:	4907      	ldr	r1, [pc, #28]	@ (8002f30 <__NVIC_EnableIRQ+0x38>)
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	2001      	movs	r0, #1
 8002f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	e000e100 	.word	0xe000e100

08002f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	6039      	str	r1, [r7, #0]
 8002f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	db0a      	blt.n	8002f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	490c      	ldr	r1, [pc, #48]	@ (8002f80 <__NVIC_SetPriority+0x4c>)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	0112      	lsls	r2, r2, #4
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	440b      	add	r3, r1
 8002f58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f5c:	e00a      	b.n	8002f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	4908      	ldr	r1, [pc, #32]	@ (8002f84 <__NVIC_SetPriority+0x50>)
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	3b04      	subs	r3, #4
 8002f6c:	0112      	lsls	r2, r2, #4
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	440b      	add	r3, r1
 8002f72:	761a      	strb	r2, [r3, #24]
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	e000e100 	.word	0xe000e100
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b089      	sub	sp, #36	@ 0x24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f1c3 0307 	rsb	r3, r3, #7
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	bf28      	it	cs
 8002fa6:	2304      	movcs	r3, #4
 8002fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	3304      	adds	r3, #4
 8002fae:	2b06      	cmp	r3, #6
 8002fb0:	d902      	bls.n	8002fb8 <NVIC_EncodePriority+0x30>
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	3b03      	subs	r3, #3
 8002fb6:	e000      	b.n	8002fba <NVIC_EncodePriority+0x32>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43da      	mvns	r2, r3
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	401a      	ands	r2, r3
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fda:	43d9      	mvns	r1, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe0:	4313      	orrs	r3, r2
         );
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3724      	adds	r7, #36	@ 0x24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
	...

08002ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003000:	d301      	bcc.n	8003006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003002:	2301      	movs	r3, #1
 8003004:	e00f      	b.n	8003026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003006:	4a0a      	ldr	r2, [pc, #40]	@ (8003030 <SysTick_Config+0x40>)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3b01      	subs	r3, #1
 800300c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800300e:	210f      	movs	r1, #15
 8003010:	f04f 30ff 	mov.w	r0, #4294967295
 8003014:	f7ff ff8e 	bl	8002f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003018:	4b05      	ldr	r3, [pc, #20]	@ (8003030 <SysTick_Config+0x40>)
 800301a:	2200      	movs	r2, #0
 800301c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800301e:	4b04      	ldr	r3, [pc, #16]	@ (8003030 <SysTick_Config+0x40>)
 8003020:	2207      	movs	r2, #7
 8003022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	e000e010 	.word	0xe000e010

08003034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff ff29 	bl	8002e94 <__NVIC_SetPriorityGrouping>
}
 8003042:	bf00      	nop
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800304a:	b580      	push	{r7, lr}
 800304c:	b086      	sub	sp, #24
 800304e:	af00      	add	r7, sp, #0
 8003050:	4603      	mov	r3, r0
 8003052:	60b9      	str	r1, [r7, #8]
 8003054:	607a      	str	r2, [r7, #4]
 8003056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800305c:	f7ff ff3e 	bl	8002edc <__NVIC_GetPriorityGrouping>
 8003060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	68b9      	ldr	r1, [r7, #8]
 8003066:	6978      	ldr	r0, [r7, #20]
 8003068:	f7ff ff8e 	bl	8002f88 <NVIC_EncodePriority>
 800306c:	4602      	mov	r2, r0
 800306e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003072:	4611      	mov	r1, r2
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff ff5d 	bl	8002f34 <__NVIC_SetPriority>
}
 800307a:	bf00      	nop
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	4603      	mov	r3, r0
 800308a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800308c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff ff31 	bl	8002ef8 <__NVIC_EnableIRQ>
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7ff ffa2 	bl	8002ff0 <SysTick_Config>
 80030ac:	4603      	mov	r3, r0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030c4:	f7ff f99a 	bl	80023fc <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e099      	b.n	8003208 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0201 	bic.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030f4:	e00f      	b.n	8003116 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030f6:	f7ff f981 	bl	80023fc <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b05      	cmp	r3, #5
 8003102:	d908      	bls.n	8003116 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2220      	movs	r2, #32
 8003108:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2203      	movs	r2, #3
 800310e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e078      	b.n	8003208 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1e8      	bne.n	80030f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	4b38      	ldr	r3, [pc, #224]	@ (8003210 <HAL_DMA_Init+0x158>)
 8003130:	4013      	ands	r3, r2
 8003132:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003142:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800314e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800315a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316c:	2b04      	cmp	r3, #4
 800316e:	d107      	bne.n	8003180 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003178:	4313      	orrs	r3, r2
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	4313      	orrs	r3, r2
 800317e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f023 0307 	bic.w	r3, r3, #7
 8003196:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	4313      	orrs	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d117      	bne.n	80031da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00e      	beq.n	80031da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 fa91 	bl	80036e4 <DMA_CheckFifoParam>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d008      	beq.n	80031da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2240      	movs	r2, #64	@ 0x40
 80031cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80031d6:	2301      	movs	r3, #1
 80031d8:	e016      	b.n	8003208 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fa48 	bl	8003678 <DMA_CalcBaseAndBitshift>
 80031e8:	4603      	mov	r3, r0
 80031ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f0:	223f      	movs	r2, #63	@ 0x3f
 80031f2:	409a      	lsls	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	f010803f 	.word	0xf010803f

08003214 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
 8003220:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_DMA_Start_IT+0x26>
 8003236:	2302      	movs	r3, #2
 8003238:	e040      	b.n	80032bc <HAL_DMA_Start_IT+0xa8>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b01      	cmp	r3, #1
 800324c:	d12f      	bne.n	80032ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2202      	movs	r2, #2
 8003252:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	68b9      	ldr	r1, [r7, #8]
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 f9da 	bl	800361c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800326c:	223f      	movs	r2, #63	@ 0x3f
 800326e:	409a      	lsls	r2, r3
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0216 	orr.w	r2, r2, #22
 8003282:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	2b00      	cmp	r3, #0
 800328a:	d007      	beq.n	800329c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0208 	orr.w	r2, r2, #8
 800329a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	e005      	b.n	80032ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80032b6:	2302      	movs	r3, #2
 80032b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80032ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d004      	beq.n	80032e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2280      	movs	r2, #128	@ 0x80
 80032dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e00c      	b.n	80032fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2205      	movs	r2, #5
 80032e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0201 	bic.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003314:	4b8e      	ldr	r3, [pc, #568]	@ (8003550 <HAL_DMA_IRQHandler+0x248>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a8e      	ldr	r2, [pc, #568]	@ (8003554 <HAL_DMA_IRQHandler+0x24c>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	0a9b      	lsrs	r3, r3, #10
 8003320:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003326:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003332:	2208      	movs	r2, #8
 8003334:	409a      	lsls	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4013      	ands	r3, r2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d01a      	beq.n	8003374 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d013      	beq.n	8003374 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0204 	bic.w	r2, r2, #4
 800335a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003360:	2208      	movs	r2, #8
 8003362:	409a      	lsls	r2, r3
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800336c:	f043 0201 	orr.w	r2, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003378:	2201      	movs	r2, #1
 800337a:	409a      	lsls	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4013      	ands	r3, r2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d012      	beq.n	80033aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00b      	beq.n	80033aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003396:	2201      	movs	r2, #1
 8003398:	409a      	lsls	r2, r3
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a2:	f043 0202 	orr.w	r2, r3, #2
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ae:	2204      	movs	r2, #4
 80033b0:	409a      	lsls	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d012      	beq.n	80033e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00b      	beq.n	80033e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033cc:	2204      	movs	r2, #4
 80033ce:	409a      	lsls	r2, r3
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d8:	f043 0204 	orr.w	r2, r3, #4
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e4:	2210      	movs	r2, #16
 80033e6:	409a      	lsls	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d043      	beq.n	8003478 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d03c      	beq.n	8003478 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003402:	2210      	movs	r2, #16
 8003404:	409a      	lsls	r2, r3
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d018      	beq.n	800344a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d108      	bne.n	8003438 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d024      	beq.n	8003478 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	4798      	blx	r3
 8003436:	e01f      	b.n	8003478 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800343c:	2b00      	cmp	r3, #0
 800343e:	d01b      	beq.n	8003478 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	4798      	blx	r3
 8003448:	e016      	b.n	8003478 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003454:	2b00      	cmp	r3, #0
 8003456:	d107      	bne.n	8003468 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0208 	bic.w	r2, r2, #8
 8003466:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800347c:	2220      	movs	r2, #32
 800347e:	409a      	lsls	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4013      	ands	r3, r2
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 808f 	beq.w	80035a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 8087 	beq.w	80035a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349e:	2220      	movs	r2, #32
 80034a0:	409a      	lsls	r2, r3
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b05      	cmp	r3, #5
 80034b0:	d136      	bne.n	8003520 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0216 	bic.w	r2, r2, #22
 80034c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695a      	ldr	r2, [r3, #20]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d103      	bne.n	80034e2 <HAL_DMA_IRQHandler+0x1da>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0208 	bic.w	r2, r2, #8
 80034f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f6:	223f      	movs	r2, #63	@ 0x3f
 80034f8:	409a      	lsls	r2, r3
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003512:	2b00      	cmp	r3, #0
 8003514:	d07e      	beq.n	8003614 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	4798      	blx	r3
        }
        return;
 800351e:	e079      	b.n	8003614 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d01d      	beq.n	800356a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10d      	bne.n	8003558 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003540:	2b00      	cmp	r3, #0
 8003542:	d031      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	4798      	blx	r3
 800354c:	e02c      	b.n	80035a8 <HAL_DMA_IRQHandler+0x2a0>
 800354e:	bf00      	nop
 8003550:	20000000 	.word	0x20000000
 8003554:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800355c:	2b00      	cmp	r3, #0
 800355e:	d023      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	4798      	blx	r3
 8003568:	e01e      	b.n	80035a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10f      	bne.n	8003598 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0210 	bic.w	r2, r2, #16
 8003586:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d032      	beq.n	8003616 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d022      	beq.n	8003602 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2205      	movs	r2, #5
 80035c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0201 	bic.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	3301      	adds	r3, #1
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d307      	bcc.n	80035f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f2      	bne.n	80035d4 <HAL_DMA_IRQHandler+0x2cc>
 80035ee:	e000      	b.n	80035f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003606:	2b00      	cmp	r3, #0
 8003608:	d005      	beq.n	8003616 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	4798      	blx	r3
 8003612:	e000      	b.n	8003616 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003614:	bf00      	nop
    }
  }
}
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
 8003628:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003638:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	2b40      	cmp	r3, #64	@ 0x40
 8003648:	d108      	bne.n	800365c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800365a:	e007      	b.n	800366c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	60da      	str	r2, [r3, #12]
}
 800366c:	bf00      	nop
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	3b10      	subs	r3, #16
 8003688:	4a14      	ldr	r2, [pc, #80]	@ (80036dc <DMA_CalcBaseAndBitshift+0x64>)
 800368a:	fba2 2303 	umull	r2, r3, r2, r3
 800368e:	091b      	lsrs	r3, r3, #4
 8003690:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003692:	4a13      	ldr	r2, [pc, #76]	@ (80036e0 <DMA_CalcBaseAndBitshift+0x68>)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4413      	add	r3, r2
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d909      	bls.n	80036ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036ae:	f023 0303 	bic.w	r3, r3, #3
 80036b2:	1d1a      	adds	r2, r3, #4
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80036b8:	e007      	b.n	80036ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036c2:	f023 0303 	bic.w	r3, r3, #3
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	aaaaaaab 	.word	0xaaaaaaab
 80036e0:	0800a778 	.word	0x0800a778

080036e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d11f      	bne.n	800373e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2b03      	cmp	r3, #3
 8003702:	d856      	bhi.n	80037b2 <DMA_CheckFifoParam+0xce>
 8003704:	a201      	add	r2, pc, #4	@ (adr r2, 800370c <DMA_CheckFifoParam+0x28>)
 8003706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370a:	bf00      	nop
 800370c:	0800371d 	.word	0x0800371d
 8003710:	0800372f 	.word	0x0800372f
 8003714:	0800371d 	.word	0x0800371d
 8003718:	080037b3 	.word	0x080037b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003720:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d046      	beq.n	80037b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800372c:	e043      	b.n	80037b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003732:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003736:	d140      	bne.n	80037ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800373c:	e03d      	b.n	80037ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003746:	d121      	bne.n	800378c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b03      	cmp	r3, #3
 800374c:	d837      	bhi.n	80037be <DMA_CheckFifoParam+0xda>
 800374e:	a201      	add	r2, pc, #4	@ (adr r2, 8003754 <DMA_CheckFifoParam+0x70>)
 8003750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003754:	08003765 	.word	0x08003765
 8003758:	0800376b 	.word	0x0800376b
 800375c:	08003765 	.word	0x08003765
 8003760:	0800377d 	.word	0x0800377d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
      break;
 8003768:	e030      	b.n	80037cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d025      	beq.n	80037c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800377a:	e022      	b.n	80037c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003780:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003784:	d11f      	bne.n	80037c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800378a:	e01c      	b.n	80037c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b02      	cmp	r3, #2
 8003790:	d903      	bls.n	800379a <DMA_CheckFifoParam+0xb6>
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	2b03      	cmp	r3, #3
 8003796:	d003      	beq.n	80037a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003798:	e018      	b.n	80037cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	73fb      	strb	r3, [r7, #15]
      break;
 800379e:	e015      	b.n	80037cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00e      	beq.n	80037ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	73fb      	strb	r3, [r7, #15]
      break;
 80037b0:	e00b      	b.n	80037ca <DMA_CheckFifoParam+0xe6>
      break;
 80037b2:	bf00      	nop
 80037b4:	e00a      	b.n	80037cc <DMA_CheckFifoParam+0xe8>
      break;
 80037b6:	bf00      	nop
 80037b8:	e008      	b.n	80037cc <DMA_CheckFifoParam+0xe8>
      break;
 80037ba:	bf00      	nop
 80037bc:	e006      	b.n	80037cc <DMA_CheckFifoParam+0xe8>
      break;
 80037be:	bf00      	nop
 80037c0:	e004      	b.n	80037cc <DMA_CheckFifoParam+0xe8>
      break;
 80037c2:	bf00      	nop
 80037c4:	e002      	b.n	80037cc <DMA_CheckFifoParam+0xe8>
      break;   
 80037c6:	bf00      	nop
 80037c8:	e000      	b.n	80037cc <DMA_CheckFifoParam+0xe8>
      break;
 80037ca:	bf00      	nop
    }
  } 
  
  return status; 
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop

080037dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037dc:	b480      	push	{r7}
 80037de:	b089      	sub	sp, #36	@ 0x24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037f2:	2300      	movs	r3, #0
 80037f4:	61fb      	str	r3, [r7, #28]
 80037f6:	e159      	b.n	8003aac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037f8:	2201      	movs	r2, #1
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4013      	ands	r3, r2
 800380a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	429a      	cmp	r2, r3
 8003812:	f040 8148 	bne.w	8003aa6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	2b01      	cmp	r3, #1
 8003820:	d005      	beq.n	800382e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800382a:	2b02      	cmp	r3, #2
 800382c:	d130      	bne.n	8003890 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	2203      	movs	r2, #3
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43db      	mvns	r3, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4013      	ands	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4313      	orrs	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003864:	2201      	movs	r2, #1
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	43db      	mvns	r3, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4013      	ands	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	091b      	lsrs	r3, r3, #4
 800387a:	f003 0201 	and.w	r2, r3, #1
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4313      	orrs	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 0303 	and.w	r3, r3, #3
 8003898:	2b03      	cmp	r3, #3
 800389a:	d017      	beq.n	80038cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	2203      	movs	r2, #3
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	43db      	mvns	r3, r3
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4013      	ands	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d123      	bne.n	8003920 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	08da      	lsrs	r2, r3, #3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3208      	adds	r2, #8
 80038e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	220f      	movs	r2, #15
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	43db      	mvns	r3, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4013      	ands	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4313      	orrs	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	08da      	lsrs	r2, r3, #3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	3208      	adds	r2, #8
 800391a:	69b9      	ldr	r1, [r7, #24]
 800391c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	2203      	movs	r2, #3
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	43db      	mvns	r3, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f003 0203 	and.w	r2, r3, #3
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4313      	orrs	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 80a2 	beq.w	8003aa6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	4b57      	ldr	r3, [pc, #348]	@ (8003ac4 <HAL_GPIO_Init+0x2e8>)
 8003968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396a:	4a56      	ldr	r2, [pc, #344]	@ (8003ac4 <HAL_GPIO_Init+0x2e8>)
 800396c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003970:	6453      	str	r3, [r2, #68]	@ 0x44
 8003972:	4b54      	ldr	r3, [pc, #336]	@ (8003ac4 <HAL_GPIO_Init+0x2e8>)
 8003974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003976:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800397e:	4a52      	ldr	r2, [pc, #328]	@ (8003ac8 <HAL_GPIO_Init+0x2ec>)
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	089b      	lsrs	r3, r3, #2
 8003984:	3302      	adds	r3, #2
 8003986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800398a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	220f      	movs	r2, #15
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	43db      	mvns	r3, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4013      	ands	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a49      	ldr	r2, [pc, #292]	@ (8003acc <HAL_GPIO_Init+0x2f0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d019      	beq.n	80039de <HAL_GPIO_Init+0x202>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a48      	ldr	r2, [pc, #288]	@ (8003ad0 <HAL_GPIO_Init+0x2f4>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d013      	beq.n	80039da <HAL_GPIO_Init+0x1fe>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a47      	ldr	r2, [pc, #284]	@ (8003ad4 <HAL_GPIO_Init+0x2f8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00d      	beq.n	80039d6 <HAL_GPIO_Init+0x1fa>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a46      	ldr	r2, [pc, #280]	@ (8003ad8 <HAL_GPIO_Init+0x2fc>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d007      	beq.n	80039d2 <HAL_GPIO_Init+0x1f6>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a45      	ldr	r2, [pc, #276]	@ (8003adc <HAL_GPIO_Init+0x300>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d101      	bne.n	80039ce <HAL_GPIO_Init+0x1f2>
 80039ca:	2304      	movs	r3, #4
 80039cc:	e008      	b.n	80039e0 <HAL_GPIO_Init+0x204>
 80039ce:	2307      	movs	r3, #7
 80039d0:	e006      	b.n	80039e0 <HAL_GPIO_Init+0x204>
 80039d2:	2303      	movs	r3, #3
 80039d4:	e004      	b.n	80039e0 <HAL_GPIO_Init+0x204>
 80039d6:	2302      	movs	r3, #2
 80039d8:	e002      	b.n	80039e0 <HAL_GPIO_Init+0x204>
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <HAL_GPIO_Init+0x204>
 80039de:	2300      	movs	r3, #0
 80039e0:	69fa      	ldr	r2, [r7, #28]
 80039e2:	f002 0203 	and.w	r2, r2, #3
 80039e6:	0092      	lsls	r2, r2, #2
 80039e8:	4093      	lsls	r3, r2
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039f0:	4935      	ldr	r1, [pc, #212]	@ (8003ac8 <HAL_GPIO_Init+0x2ec>)
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	089b      	lsrs	r3, r3, #2
 80039f6:	3302      	adds	r3, #2
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039fe:	4b38      	ldr	r3, [pc, #224]	@ (8003ae0 <HAL_GPIO_Init+0x304>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	43db      	mvns	r3, r3
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a22:	4a2f      	ldr	r2, [pc, #188]	@ (8003ae0 <HAL_GPIO_Init+0x304>)
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a28:	4b2d      	ldr	r3, [pc, #180]	@ (8003ae0 <HAL_GPIO_Init+0x304>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	43db      	mvns	r3, r3
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	4013      	ands	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a4c:	4a24      	ldr	r2, [pc, #144]	@ (8003ae0 <HAL_GPIO_Init+0x304>)
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a52:	4b23      	ldr	r3, [pc, #140]	@ (8003ae0 <HAL_GPIO_Init+0x304>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a76:	4a1a      	ldr	r2, [pc, #104]	@ (8003ae0 <HAL_GPIO_Init+0x304>)
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a7c:	4b18      	ldr	r3, [pc, #96]	@ (8003ae0 <HAL_GPIO_Init+0x304>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	43db      	mvns	r3, r3
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003aa0:	4a0f      	ldr	r2, [pc, #60]	@ (8003ae0 <HAL_GPIO_Init+0x304>)
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	61fb      	str	r3, [r7, #28]
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	2b0f      	cmp	r3, #15
 8003ab0:	f67f aea2 	bls.w	80037f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop
 8003ab8:	3724      	adds	r7, #36	@ 0x24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	40013800 	.word	0x40013800
 8003acc:	40020000 	.word	0x40020000
 8003ad0:	40020400 	.word	0x40020400
 8003ad4:	40020800 	.word	0x40020800
 8003ad8:	40020c00 	.word	0x40020c00
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	40013c00 	.word	0x40013c00

08003ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	460b      	mov	r3, r1
 8003aee:	807b      	strh	r3, [r7, #2]
 8003af0:	4613      	mov	r3, r2
 8003af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003af4:	787b      	ldrb	r3, [r7, #1]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003afa:	887a      	ldrh	r2, [r7, #2]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b00:	e003      	b.n	8003b0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b02:	887b      	ldrh	r3, [r7, #2]
 8003b04:	041a      	lsls	r2, r3, #16
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	619a      	str	r2, [r3, #24]
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b086      	sub	sp, #24
 8003b1a:	af02      	add	r7, sp, #8
 8003b1c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e101      	b.n	8003d2c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d106      	bne.n	8003b48 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f006 fa68 	bl	800a018 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2203      	movs	r2, #3
 8003b4c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b56:	d102      	bne.n	8003b5e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f003 f9b1 	bl	8006eca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6818      	ldr	r0, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	7c1a      	ldrb	r2, [r3, #16]
 8003b70:	f88d 2000 	strb.w	r2, [sp]
 8003b74:	3304      	adds	r3, #4
 8003b76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b78:	f003 f890 	bl	8006c9c <USB_CoreInit>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2202      	movs	r2, #2
 8003b86:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e0ce      	b.n	8003d2c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2100      	movs	r1, #0
 8003b94:	4618      	mov	r0, r3
 8003b96:	f003 f9a9 	bl	8006eec <USB_SetCurrentMode>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0bf      	b.n	8003d2c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bac:	2300      	movs	r3, #0
 8003bae:	73fb      	strb	r3, [r7, #15]
 8003bb0:	e04a      	b.n	8003c48 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003bb2:	7bfa      	ldrb	r2, [r7, #15]
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	4413      	add	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	3315      	adds	r3, #21
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003bc6:	7bfa      	ldrb	r2, [r7, #15]
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	4413      	add	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	3314      	adds	r3, #20
 8003bd6:	7bfa      	ldrb	r2, [r7, #15]
 8003bd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003bda:	7bfa      	ldrb	r2, [r7, #15]
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
 8003bde:	b298      	uxth	r0, r3
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	4413      	add	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	440b      	add	r3, r1
 8003bec:	332e      	adds	r3, #46	@ 0x2e
 8003bee:	4602      	mov	r2, r0
 8003bf0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003bf2:	7bfa      	ldrb	r2, [r7, #15]
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	3318      	adds	r3, #24
 8003c02:	2200      	movs	r2, #0
 8003c04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c06:	7bfa      	ldrb	r2, [r7, #15]
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	4413      	add	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	440b      	add	r3, r1
 8003c14:	331c      	adds	r3, #28
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c1a:	7bfa      	ldrb	r2, [r7, #15]
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	4413      	add	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	440b      	add	r3, r1
 8003c28:	3320      	adds	r3, #32
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c2e:	7bfa      	ldrb	r2, [r7, #15]
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	4613      	mov	r3, r2
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	4413      	add	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	440b      	add	r3, r1
 8003c3c:	3324      	adds	r3, #36	@ 0x24
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
 8003c44:	3301      	adds	r3, #1
 8003c46:	73fb      	strb	r3, [r7, #15]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	791b      	ldrb	r3, [r3, #4]
 8003c4c:	7bfa      	ldrb	r2, [r7, #15]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d3af      	bcc.n	8003bb2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c52:	2300      	movs	r3, #0
 8003c54:	73fb      	strb	r3, [r7, #15]
 8003c56:	e044      	b.n	8003ce2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c58:	7bfa      	ldrb	r2, [r7, #15]
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	4413      	add	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c6e:	7bfa      	ldrb	r2, [r7, #15]
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	4613      	mov	r3, r2
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	4413      	add	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003c80:	7bfa      	ldrb	r2, [r7, #15]
 8003c82:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c84:	7bfa      	ldrb	r2, [r7, #15]
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	440b      	add	r3, r1
 8003c92:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003c96:	2200      	movs	r2, #0
 8003c98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c9a:	7bfa      	ldrb	r2, [r7, #15]
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003cb0:	7bfa      	ldrb	r2, [r7, #15]
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	4413      	add	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003cc6:	7bfa      	ldrb	r2, [r7, #15]
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	4413      	add	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	73fb      	strb	r3, [r7, #15]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	791b      	ldrb	r3, [r3, #4]
 8003ce6:	7bfa      	ldrb	r2, [r7, #15]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d3b5      	bcc.n	8003c58 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6818      	ldr	r0, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	7c1a      	ldrb	r2, [r3, #16]
 8003cf4:	f88d 2000 	strb.w	r2, [sp]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cfc:	f003 f942 	bl	8006f84 <USB_DevInit>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d005      	beq.n	8003d12 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2202      	movs	r2, #2
 8003d0a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e00c      	b.n	8003d2c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f004 f98c 	bl	8008042 <USB_DevDisconnect>

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_PCD_Start+0x1c>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e022      	b.n	8003d96 <HAL_PCD_Start+0x62>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d009      	beq.n	8003d78 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d105      	bne.n	8003d78 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d70:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f003 f893 	bl	8006ea8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f004 f93a 	bl	8008000 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003d9e:	b590      	push	{r4, r7, lr}
 8003da0:	b08d      	sub	sp, #52	@ 0x34
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f004 f9f8 	bl	80081aa <USB_GetMode>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f040 848c 	bne.w	80046da <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f004 f95c 	bl	8008084 <USB_ReadInterrupts>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 8482 	beq.w	80046d8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	0a1b      	lsrs	r3, r3, #8
 8003dde:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f004 f949 	bl	8008084 <USB_ReadInterrupts>
 8003df2:	4603      	mov	r3, r0
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d107      	bne.n	8003e0c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695a      	ldr	r2, [r3, #20]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f002 0202 	and.w	r2, r2, #2
 8003e0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f004 f937 	bl	8008084 <USB_ReadInterrupts>
 8003e16:	4603      	mov	r3, r0
 8003e18:	f003 0310 	and.w	r3, r3, #16
 8003e1c:	2b10      	cmp	r3, #16
 8003e1e:	d161      	bne.n	8003ee4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699a      	ldr	r2, [r3, #24]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0210 	bic.w	r2, r2, #16
 8003e2e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	f003 020f 	and.w	r2, r3, #15
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	4413      	add	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	0c5b      	lsrs	r3, r3, #17
 8003e54:	f003 030f 	and.w	r3, r3, #15
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d124      	bne.n	8003ea6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003e62:	4013      	ands	r3, r2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d035      	beq.n	8003ed4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	091b      	lsrs	r3, r3, #4
 8003e70:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	461a      	mov	r2, r3
 8003e7a:	6a38      	ldr	r0, [r7, #32]
 8003e7c:	f003 ff6e 	bl	8007d5c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	68da      	ldr	r2, [r3, #12]
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	091b      	lsrs	r3, r3, #4
 8003e88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e8c:	441a      	add	r2, r3
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	695a      	ldr	r2, [r3, #20]
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	091b      	lsrs	r3, r3, #4
 8003e9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e9e:	441a      	add	r2, r3
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	615a      	str	r2, [r3, #20]
 8003ea4:	e016      	b.n	8003ed4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	0c5b      	lsrs	r3, r3, #17
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	2b06      	cmp	r3, #6
 8003eb0:	d110      	bne.n	8003ed4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003eb8:	2208      	movs	r2, #8
 8003eba:	4619      	mov	r1, r3
 8003ebc:	6a38      	ldr	r0, [r7, #32]
 8003ebe:	f003 ff4d 	bl	8007d5c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	695a      	ldr	r2, [r3, #20]
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	091b      	lsrs	r3, r3, #4
 8003eca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ece:	441a      	add	r2, r3
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699a      	ldr	r2, [r3, #24]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0210 	orr.w	r2, r2, #16
 8003ee2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f004 f8cb 	bl	8008084 <USB_ReadInterrupts>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ef4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003ef8:	f040 80a7 	bne.w	800404a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f004 f8d0 	bl	80080aa <USB_ReadDevAllOutEpInterrupt>
 8003f0a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003f0c:	e099      	b.n	8004042 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 808e 	beq.w	8004036 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	4611      	mov	r1, r2
 8003f24:	4618      	mov	r0, r3
 8003f26:	f004 f8f4 	bl	8008112 <USB_ReadDevOutEPInterrupt>
 8003f2a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00c      	beq.n	8003f50 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f42:	461a      	mov	r2, r3
 8003f44:	2301      	movs	r3, #1
 8003f46:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003f48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fe8c 	bl	8004c68 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00c      	beq.n	8003f74 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f66:	461a      	mov	r2, r3
 8003f68:	2308      	movs	r3, #8
 8003f6a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003f6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 ff62 	bl	8004e38 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f003 0310 	and.w	r3, r3, #16
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d008      	beq.n	8003f90 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	2310      	movs	r3, #16
 8003f8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d030      	beq.n	8003ffc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa2:	2b80      	cmp	r3, #128	@ 0x80
 8003fa4:	d109      	bne.n	8003fba <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	69fa      	ldr	r2, [r7, #28]
 8003fb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fb4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fb8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	4413      	add	r3, r2
 8003fcc:	3304      	adds	r3, #4
 8003fce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	78db      	ldrb	r3, [r3, #3]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d108      	bne.n	8003fea <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f006 f913 	bl	800a210 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fec:	015a      	lsls	r2, r3, #5
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	f003 0320 	and.w	r3, r3, #32
 8004002:	2b00      	cmp	r3, #0
 8004004:	d008      	beq.n	8004018 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004008:	015a      	lsls	r2, r3, #5
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	4413      	add	r3, r2
 800400e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004012:	461a      	mov	r2, r3
 8004014:	2320      	movs	r3, #32
 8004016:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d009      	beq.n	8004036 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	4413      	add	r3, r2
 800402a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800402e:	461a      	mov	r2, r3
 8004030:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004034:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004038:	3301      	adds	r3, #1
 800403a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800403c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403e:	085b      	lsrs	r3, r3, #1
 8004040:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004044:	2b00      	cmp	r3, #0
 8004046:	f47f af62 	bne.w	8003f0e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f004 f818 	bl	8008084 <USB_ReadInterrupts>
 8004054:	4603      	mov	r3, r0
 8004056:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800405a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800405e:	f040 80db 	bne.w	8004218 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f004 f839 	bl	80080de <USB_ReadDevAllInEpInterrupt>
 800406c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800406e:	2300      	movs	r3, #0
 8004070:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004072:	e0cd      	b.n	8004210 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 80c2 	beq.w	8004204 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	4611      	mov	r1, r2
 800408a:	4618      	mov	r0, r3
 800408c:	f004 f85f 	bl	800814e <USB_ReadDevInEPInterrupt>
 8004090:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d057      	beq.n	800414c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800409c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	2201      	movs	r2, #1
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	43db      	mvns	r3, r3
 80040b6:	69f9      	ldr	r1, [r7, #28]
 80040b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040bc:	4013      	ands	r3, r2
 80040be:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80040c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040cc:	461a      	mov	r2, r3
 80040ce:	2301      	movs	r3, #1
 80040d0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	799b      	ldrb	r3, [r3, #6]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d132      	bne.n	8004140 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040de:	4613      	mov	r3, r2
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	440b      	add	r3, r1
 80040e8:	3320      	adds	r3, #32
 80040ea:	6819      	ldr	r1, [r3, #0]
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040f0:	4613      	mov	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	4413      	add	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4403      	add	r3, r0
 80040fa:	331c      	adds	r3, #28
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4419      	add	r1, r3
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004104:	4613      	mov	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4403      	add	r3, r0
 800410e:	3320      	adds	r3, #32
 8004110:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004114:	2b00      	cmp	r3, #0
 8004116:	d113      	bne.n	8004140 <HAL_PCD_IRQHandler+0x3a2>
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800411c:	4613      	mov	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	4413      	add	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	3324      	adds	r3, #36	@ 0x24
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d108      	bne.n	8004140 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004138:	461a      	mov	r2, r3
 800413a:	2101      	movs	r1, #1
 800413c:	f004 f866 	bl	800820c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004142:	b2db      	uxtb	r3, r3
 8004144:	4619      	mov	r1, r3
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f005 ffe7 	bl	800a11a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d008      	beq.n	8004168 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	4413      	add	r3, r2
 800415e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004162:	461a      	mov	r2, r3
 8004164:	2308      	movs	r3, #8
 8004166:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	f003 0310 	and.w	r3, r3, #16
 800416e:	2b00      	cmp	r3, #0
 8004170:	d008      	beq.n	8004184 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800417e:	461a      	mov	r2, r3
 8004180:	2310      	movs	r3, #16
 8004182:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800418a:	2b00      	cmp	r3, #0
 800418c:	d008      	beq.n	80041a0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800418e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800419a:	461a      	mov	r2, r3
 800419c:	2340      	movs	r3, #64	@ 0x40
 800419e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d023      	beq.n	80041f2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80041aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041ac:	6a38      	ldr	r0, [r7, #32]
 80041ae:	f003 f84d 	bl	800724c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80041b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041b4:	4613      	mov	r3, r2
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	4413      	add	r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	3310      	adds	r3, #16
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	4413      	add	r3, r2
 80041c2:	3304      	adds	r3, #4
 80041c4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	78db      	ldrb	r3, [r3, #3]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d108      	bne.n	80041e0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2200      	movs	r2, #0
 80041d2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80041d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	4619      	mov	r1, r3
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f006 f82a 	bl	800a234 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80041e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041ec:	461a      	mov	r2, r3
 80041ee:	2302      	movs	r3, #2
 80041f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80041fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fca5 	bl	8004b4e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004206:	3301      	adds	r3, #1
 8004208:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800420a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420c:	085b      	lsrs	r3, r3, #1
 800420e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004212:	2b00      	cmp	r3, #0
 8004214:	f47f af2e 	bne.w	8004074 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4618      	mov	r0, r3
 800421e:	f003 ff31 	bl	8008084 <USB_ReadInterrupts>
 8004222:	4603      	mov	r3, r0
 8004224:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004228:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800422c:	d122      	bne.n	8004274 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800423c:	f023 0301 	bic.w	r3, r3, #1
 8004240:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004248:	2b01      	cmp	r3, #1
 800424a:	d108      	bne.n	800425e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004254:	2100      	movs	r1, #0
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 fe8c 	bl	8004f74 <HAL_PCDEx_LPM_Callback>
 800425c:	e002      	b.n	8004264 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f005 ffc8 	bl	800a1f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695a      	ldr	r2, [r3, #20]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004272:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f003 ff03 	bl	8008084 <USB_ReadInterrupts>
 800427e:	4603      	mov	r3, r0
 8004280:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004284:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004288:	d112      	bne.n	80042b0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b01      	cmp	r3, #1
 8004298:	d102      	bne.n	80042a0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f005 ff84 	bl	800a1a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695a      	ldr	r2, [r3, #20]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80042ae:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f003 fee5 	bl	8008084 <USB_ReadInterrupts>
 80042ba:	4603      	mov	r3, r0
 80042bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042c4:	f040 80b7 	bne.w	8004436 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	69fa      	ldr	r2, [r7, #28]
 80042d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042d6:	f023 0301 	bic.w	r3, r3, #1
 80042da:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2110      	movs	r1, #16
 80042e2:	4618      	mov	r0, r3
 80042e4:	f002 ffb2 	bl	800724c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042e8:	2300      	movs	r3, #0
 80042ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042ec:	e046      	b.n	800437c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80042ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042fa:	461a      	mov	r2, r3
 80042fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004300:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	4413      	add	r3, r2
 800430a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004312:	0151      	lsls	r1, r2, #5
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	440a      	add	r2, r1
 8004318:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800431c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004320:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	4413      	add	r3, r2
 800432a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800432e:	461a      	mov	r2, r3
 8004330:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004334:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	4413      	add	r3, r2
 800433e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004346:	0151      	lsls	r1, r2, #5
 8004348:	69fa      	ldr	r2, [r7, #28]
 800434a:	440a      	add	r2, r1
 800434c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004350:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004354:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004366:	0151      	lsls	r1, r2, #5
 8004368:	69fa      	ldr	r2, [r7, #28]
 800436a:	440a      	add	r2, r1
 800436c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004370:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004374:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004378:	3301      	adds	r3, #1
 800437a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	791b      	ldrb	r3, [r3, #4]
 8004380:	461a      	mov	r2, r3
 8004382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004384:	4293      	cmp	r3, r2
 8004386:	d3b2      	bcc.n	80042ee <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	69fa      	ldr	r2, [r7, #28]
 8004392:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004396:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800439a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	7bdb      	ldrb	r3, [r3, #15]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d016      	beq.n	80043d2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043ae:	69fa      	ldr	r2, [r7, #28]
 80043b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043b4:	f043 030b 	orr.w	r3, r3, #11
 80043b8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c4:	69fa      	ldr	r2, [r7, #28]
 80043c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043ca:	f043 030b 	orr.w	r3, r3, #11
 80043ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80043d0:	e015      	b.n	80043fe <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	69fa      	ldr	r2, [r7, #28]
 80043dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80043e4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80043e8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043f8:	f043 030b 	orr.w	r3, r3, #11
 80043fc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	69fa      	ldr	r2, [r7, #28]
 8004408:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800440c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004410:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6818      	ldr	r0, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004420:	461a      	mov	r2, r3
 8004422:	f003 fef3 	bl	800820c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695a      	ldr	r2, [r3, #20]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004434:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f003 fe22 	bl	8008084 <USB_ReadInterrupts>
 8004440:	4603      	mov	r3, r0
 8004442:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004446:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800444a:	d123      	bne.n	8004494 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f003 feb8 	bl	80081c6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f002 ff6f 	bl	800733e <USB_GetDevSpeed>
 8004460:	4603      	mov	r3, r0
 8004462:	461a      	mov	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681c      	ldr	r4, [r3, #0]
 800446c:	f001 f9b2 	bl	80057d4 <HAL_RCC_GetHCLKFreq>
 8004470:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004476:	461a      	mov	r2, r3
 8004478:	4620      	mov	r0, r4
 800447a:	f002 fc73 	bl	8006d64 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f005 fe73 	bl	800a16a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695a      	ldr	r2, [r3, #20]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004492:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4618      	mov	r0, r3
 800449a:	f003 fdf3 	bl	8008084 <USB_ReadInterrupts>
 800449e:	4603      	mov	r3, r0
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d10a      	bne.n	80044be <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f005 fe50 	bl	800a14e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695a      	ldr	r2, [r3, #20]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f002 0208 	and.w	r2, r2, #8
 80044bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f003 fdde 	bl	8008084 <USB_ReadInterrupts>
 80044c8:	4603      	mov	r3, r0
 80044ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ce:	2b80      	cmp	r3, #128	@ 0x80
 80044d0:	d123      	bne.n	800451a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044de:	2301      	movs	r3, #1
 80044e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80044e2:	e014      	b.n	800450e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80044e4:	6879      	ldr	r1, [r7, #4]
 80044e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044e8:	4613      	mov	r3, r2
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d105      	bne.n	8004508 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80044fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	4619      	mov	r1, r3
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 faf2 	bl	8004aec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450a:	3301      	adds	r3, #1
 800450c:	627b      	str	r3, [r7, #36]	@ 0x24
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	791b      	ldrb	r3, [r3, #4]
 8004512:	461a      	mov	r2, r3
 8004514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004516:	4293      	cmp	r3, r2
 8004518:	d3e4      	bcc.n	80044e4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f003 fdb0 	bl	8008084 <USB_ReadInterrupts>
 8004524:	4603      	mov	r3, r0
 8004526:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800452a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800452e:	d13c      	bne.n	80045aa <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004530:	2301      	movs	r3, #1
 8004532:	627b      	str	r3, [r7, #36]	@ 0x24
 8004534:	e02b      	b.n	800458e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800454a:	4613      	mov	r3, r2
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	4413      	add	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	440b      	add	r3, r1
 8004554:	3318      	adds	r3, #24
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d115      	bne.n	8004588 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800455c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800455e:	2b00      	cmp	r3, #0
 8004560:	da12      	bge.n	8004588 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004566:	4613      	mov	r3, r2
 8004568:	00db      	lsls	r3, r3, #3
 800456a:	4413      	add	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	440b      	add	r3, r1
 8004570:	3317      	adds	r3, #23
 8004572:	2201      	movs	r2, #1
 8004574:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004578:	b2db      	uxtb	r3, r3
 800457a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800457e:	b2db      	uxtb	r3, r3
 8004580:	4619      	mov	r1, r3
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 fab2 	bl	8004aec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458a:	3301      	adds	r3, #1
 800458c:	627b      	str	r3, [r7, #36]	@ 0x24
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	791b      	ldrb	r3, [r3, #4]
 8004592:	461a      	mov	r2, r3
 8004594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004596:	4293      	cmp	r3, r2
 8004598:	d3cd      	bcc.n	8004536 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695a      	ldr	r2, [r3, #20]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80045a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f003 fd68 	bl	8008084 <USB_ReadInterrupts>
 80045b4:	4603      	mov	r3, r0
 80045b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045be:	d156      	bne.n	800466e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045c0:	2301      	movs	r3, #1
 80045c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80045c4:	e045      	b.n	8004652 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80045c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80045d6:	6879      	ldr	r1, [r7, #4]
 80045d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045da:	4613      	mov	r3, r2
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	4413      	add	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	440b      	add	r3, r1
 80045e4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d12e      	bne.n	800464c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80045ee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	da2b      	bge.n	800464c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004600:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004604:	429a      	cmp	r2, r3
 8004606:	d121      	bne.n	800464c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800460c:	4613      	mov	r3, r2
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800461a:	2201      	movs	r2, #1
 800461c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10a      	bne.n	800464c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	69fa      	ldr	r2, [r7, #28]
 8004640:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004644:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004648:	6053      	str	r3, [r2, #4]
            break;
 800464a:	e008      	b.n	800465e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800464c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464e:	3301      	adds	r3, #1
 8004650:	627b      	str	r3, [r7, #36]	@ 0x24
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	791b      	ldrb	r3, [r3, #4]
 8004656:	461a      	mov	r2, r3
 8004658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465a:	4293      	cmp	r3, r2
 800465c:	d3b3      	bcc.n	80045c6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695a      	ldr	r2, [r3, #20]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800466c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f003 fd06 	bl	8008084 <USB_ReadInterrupts>
 8004678:	4603      	mov	r3, r0
 800467a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800467e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004682:	d10a      	bne.n	800469a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f005 fde7 	bl	800a258 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695a      	ldr	r2, [r3, #20]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004698:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4618      	mov	r0, r3
 80046a0:	f003 fcf0 	bl	8008084 <USB_ReadInterrupts>
 80046a4:	4603      	mov	r3, r0
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d115      	bne.n	80046da <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f005 fdd7 	bl	800a274 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6859      	ldr	r1, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
 80046d6:	e000      	b.n	80046da <HAL_PCD_IRQHandler+0x93c>
      return;
 80046d8:	bf00      	nop
    }
  }
}
 80046da:	3734      	adds	r7, #52	@ 0x34
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd90      	pop	{r4, r7, pc}

080046e0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	460b      	mov	r3, r1
 80046ea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d101      	bne.n	80046fa <HAL_PCD_SetAddress+0x1a>
 80046f6:	2302      	movs	r3, #2
 80046f8:	e012      	b.n	8004720 <HAL_PCD_SetAddress+0x40>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	78fa      	ldrb	r2, [r7, #3]
 8004706:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	78fa      	ldrb	r2, [r7, #3]
 800470e:	4611      	mov	r1, r2
 8004710:	4618      	mov	r0, r3
 8004712:	f003 fc4f 	bl	8007fb4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	4608      	mov	r0, r1
 8004732:	4611      	mov	r1, r2
 8004734:	461a      	mov	r2, r3
 8004736:	4603      	mov	r3, r0
 8004738:	70fb      	strb	r3, [r7, #3]
 800473a:	460b      	mov	r3, r1
 800473c:	803b      	strh	r3, [r7, #0]
 800473e:	4613      	mov	r3, r2
 8004740:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004746:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800474a:	2b00      	cmp	r3, #0
 800474c:	da0f      	bge.n	800476e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	f003 020f 	and.w	r2, r3, #15
 8004754:	4613      	mov	r3, r2
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	4413      	add	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	3310      	adds	r3, #16
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	4413      	add	r3, r2
 8004762:	3304      	adds	r3, #4
 8004764:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2201      	movs	r2, #1
 800476a:	705a      	strb	r2, [r3, #1]
 800476c:	e00f      	b.n	800478e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800476e:	78fb      	ldrb	r3, [r7, #3]
 8004770:	f003 020f 	and.w	r2, r3, #15
 8004774:	4613      	mov	r3, r2
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	4413      	add	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	4413      	add	r3, r2
 8004784:	3304      	adds	r3, #4
 8004786:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800478e:	78fb      	ldrb	r3, [r7, #3]
 8004790:	f003 030f 	and.w	r3, r3, #15
 8004794:	b2da      	uxtb	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800479a:	883b      	ldrh	r3, [r7, #0]
 800479c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	78ba      	ldrb	r2, [r7, #2]
 80047a8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	785b      	ldrb	r3, [r3, #1]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d004      	beq.n	80047bc <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	461a      	mov	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80047bc:	78bb      	ldrb	r3, [r7, #2]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d102      	bne.n	80047c8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d101      	bne.n	80047d6 <HAL_PCD_EP_Open+0xae>
 80047d2:	2302      	movs	r3, #2
 80047d4:	e00e      	b.n	80047f4 <HAL_PCD_EP_Open+0xcc>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68f9      	ldr	r1, [r7, #12]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f002 fdcf 	bl	8007388 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80047f2:	7afb      	ldrb	r3, [r7, #11]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004808:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800480c:	2b00      	cmp	r3, #0
 800480e:	da0f      	bge.n	8004830 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004810:	78fb      	ldrb	r3, [r7, #3]
 8004812:	f003 020f 	and.w	r2, r3, #15
 8004816:	4613      	mov	r3, r2
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	3310      	adds	r3, #16
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	4413      	add	r3, r2
 8004824:	3304      	adds	r3, #4
 8004826:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2201      	movs	r2, #1
 800482c:	705a      	strb	r2, [r3, #1]
 800482e:	e00f      	b.n	8004850 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004830:	78fb      	ldrb	r3, [r7, #3]
 8004832:	f003 020f 	and.w	r2, r3, #15
 8004836:	4613      	mov	r3, r2
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	4413      	add	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	4413      	add	r3, r2
 8004846:	3304      	adds	r3, #4
 8004848:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004850:	78fb      	ldrb	r3, [r7, #3]
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	b2da      	uxtb	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004862:	2b01      	cmp	r3, #1
 8004864:	d101      	bne.n	800486a <HAL_PCD_EP_Close+0x6e>
 8004866:	2302      	movs	r3, #2
 8004868:	e00e      	b.n	8004888 <HAL_PCD_EP_Close+0x8c>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68f9      	ldr	r1, [r7, #12]
 8004878:	4618      	mov	r0, r3
 800487a:	f002 fe0d 	bl	8007498 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	607a      	str	r2, [r7, #4]
 800489a:	603b      	str	r3, [r7, #0]
 800489c:	460b      	mov	r3, r1
 800489e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048a0:	7afb      	ldrb	r3, [r7, #11]
 80048a2:	f003 020f 	and.w	r2, r3, #15
 80048a6:	4613      	mov	r3, r2
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	4413      	add	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	4413      	add	r3, r2
 80048b6:	3304      	adds	r3, #4
 80048b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2200      	movs	r2, #0
 80048ca:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2200      	movs	r2, #0
 80048d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048d2:	7afb      	ldrb	r3, [r7, #11]
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	799b      	ldrb	r3, [r3, #6]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d102      	bne.n	80048ec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6818      	ldr	r0, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	799b      	ldrb	r3, [r3, #6]
 80048f4:	461a      	mov	r2, r3
 80048f6:	6979      	ldr	r1, [r7, #20]
 80048f8:	f002 feaa 	bl	8007650 <USB_EPStartXfer>

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b086      	sub	sp, #24
 800490a:	af00      	add	r7, sp, #0
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	603b      	str	r3, [r7, #0]
 8004912:	460b      	mov	r3, r1
 8004914:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004916:	7afb      	ldrb	r3, [r7, #11]
 8004918:	f003 020f 	and.w	r2, r3, #15
 800491c:	4613      	mov	r3, r2
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	4413      	add	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	3310      	adds	r3, #16
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4413      	add	r3, r2
 800492a:	3304      	adds	r3, #4
 800492c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2200      	movs	r2, #0
 800493e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	2201      	movs	r2, #1
 8004944:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004946:	7afb      	ldrb	r3, [r7, #11]
 8004948:	f003 030f 	and.w	r3, r3, #15
 800494c:	b2da      	uxtb	r2, r3
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	799b      	ldrb	r3, [r3, #6]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d102      	bne.n	8004960 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6818      	ldr	r0, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	799b      	ldrb	r3, [r3, #6]
 8004968:	461a      	mov	r2, r3
 800496a:	6979      	ldr	r1, [r7, #20]
 800496c:	f002 fe70 	bl	8007650 <USB_EPStartXfer>

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b084      	sub	sp, #16
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	460b      	mov	r3, r1
 8004984:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004986:	78fb      	ldrb	r3, [r7, #3]
 8004988:	f003 030f 	and.w	r3, r3, #15
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	7912      	ldrb	r2, [r2, #4]
 8004990:	4293      	cmp	r3, r2
 8004992:	d901      	bls.n	8004998 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e04f      	b.n	8004a38 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004998:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800499c:	2b00      	cmp	r3, #0
 800499e:	da0f      	bge.n	80049c0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	f003 020f 	and.w	r2, r3, #15
 80049a6:	4613      	mov	r3, r2
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	4413      	add	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	3310      	adds	r3, #16
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	4413      	add	r3, r2
 80049b4:	3304      	adds	r3, #4
 80049b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2201      	movs	r2, #1
 80049bc:	705a      	strb	r2, [r3, #1]
 80049be:	e00d      	b.n	80049dc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049c0:	78fa      	ldrb	r2, [r7, #3]
 80049c2:	4613      	mov	r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	4413      	add	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	4413      	add	r3, r2
 80049d2:	3304      	adds	r3, #4
 80049d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2201      	movs	r2, #1
 80049e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049e2:	78fb      	ldrb	r3, [r7, #3]
 80049e4:	f003 030f 	and.w	r3, r3, #15
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <HAL_PCD_EP_SetStall+0x82>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e01d      	b.n	8004a38 <HAL_PCD_EP_SetStall+0xbe>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68f9      	ldr	r1, [r7, #12]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f003 f9fe 	bl	8007e0c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d109      	bne.n	8004a2e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6818      	ldr	r0, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	7999      	ldrb	r1, [r3, #6]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a28:	461a      	mov	r2, r3
 8004a2a:	f003 fbef 	bl	800820c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a4c:	78fb      	ldrb	r3, [r7, #3]
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	7912      	ldrb	r2, [r2, #4]
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d901      	bls.n	8004a5e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e042      	b.n	8004ae4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	da0f      	bge.n	8004a86 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a66:	78fb      	ldrb	r3, [r7, #3]
 8004a68:	f003 020f 	and.w	r2, r3, #15
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	3310      	adds	r3, #16
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	4413      	add	r3, r2
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2201      	movs	r2, #1
 8004a82:	705a      	strb	r2, [r3, #1]
 8004a84:	e00f      	b.n	8004aa6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a86:	78fb      	ldrb	r3, [r7, #3]
 8004a88:	f003 020f 	and.w	r2, r3, #15
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	4413      	add	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004aac:	78fb      	ldrb	r3, [r7, #3]
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_PCD_EP_ClrStall+0x86>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	e00e      	b.n	8004ae4 <HAL_PCD_EP_ClrStall+0xa4>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68f9      	ldr	r1, [r7, #12]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f003 fa07 	bl	8007ee8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	460b      	mov	r3, r1
 8004af6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004af8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	da0c      	bge.n	8004b1a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	f003 020f 	and.w	r2, r3, #15
 8004b06:	4613      	mov	r3, r2
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	4413      	add	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	3310      	adds	r3, #16
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	4413      	add	r3, r2
 8004b14:	3304      	adds	r3, #4
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	e00c      	b.n	8004b34 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b1a:	78fb      	ldrb	r3, [r7, #3]
 8004b1c:	f003 020f 	and.w	r2, r3, #15
 8004b20:	4613      	mov	r3, r2
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	4413      	add	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	4413      	add	r3, r2
 8004b30:	3304      	adds	r3, #4
 8004b32:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68f9      	ldr	r1, [r7, #12]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f003 f826 	bl	8007b8c <USB_EPStopXfer>
 8004b40:	4603      	mov	r3, r0
 8004b42:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004b44:	7afb      	ldrb	r3, [r7, #11]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b08a      	sub	sp, #40	@ 0x28
 8004b52:	af02      	add	r7, sp, #8
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	4613      	mov	r3, r2
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	4413      	add	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	3310      	adds	r3, #16
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	4413      	add	r3, r2
 8004b72:	3304      	adds	r3, #4
 8004b74:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	695a      	ldr	r2, [r3, #20]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d901      	bls.n	8004b86 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e06b      	b.n	8004c5e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	691a      	ldr	r2, [r3, #16]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	69fa      	ldr	r2, [r7, #28]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d902      	bls.n	8004ba2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	3303      	adds	r3, #3
 8004ba6:	089b      	lsrs	r3, r3, #2
 8004ba8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004baa:	e02a      	b.n	8004c02 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	691a      	ldr	r2, [r3, #16]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	69fa      	ldr	r2, [r7, #28]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d902      	bls.n	8004bc8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	3303      	adds	r3, #3
 8004bcc:	089b      	lsrs	r3, r3, #2
 8004bce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	68d9      	ldr	r1, [r3, #12]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	4603      	mov	r3, r0
 8004be4:	6978      	ldr	r0, [r7, #20]
 8004be6:	f003 f87b 	bl	8007ce0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	441a      	add	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	695a      	ldr	r2, [r3, #20]
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	441a      	add	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d809      	bhi.n	8004c2c <PCD_WriteEmptyTxFifo+0xde>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	695a      	ldr	r2, [r3, #20]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d203      	bcs.n	8004c2c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1bf      	bne.n	8004bac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	691a      	ldr	r2, [r3, #16]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d811      	bhi.n	8004c5c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	2201      	movs	r2, #1
 8004c40:	fa02 f303 	lsl.w	r3, r2, r3
 8004c44:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	43db      	mvns	r3, r3
 8004c52:	6939      	ldr	r1, [r7, #16]
 8004c54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c58:	4013      	ands	r3, r2
 8004c5a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3720      	adds	r7, #32
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b088      	sub	sp, #32
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	333c      	adds	r3, #60	@ 0x3c
 8004c80:	3304      	adds	r3, #4
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	015a      	lsls	r2, r3, #5
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	799b      	ldrb	r3, [r3, #6]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d17b      	bne.n	8004d96 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f003 0308 	and.w	r3, r3, #8
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d015      	beq.n	8004cd4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	4a61      	ldr	r2, [pc, #388]	@ (8004e30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	f240 80b9 	bls.w	8004e24 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 80b3 	beq.w	8004e24 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cd0:	6093      	str	r3, [r2, #8]
 8004cd2:	e0a7      	b.n	8004e24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	f003 0320 	and.w	r3, r3, #32
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d009      	beq.n	8004cf2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	015a      	lsls	r2, r3, #5
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cea:	461a      	mov	r2, r3
 8004cec:	2320      	movs	r3, #32
 8004cee:	6093      	str	r3, [r2, #8]
 8004cf0:	e098      	b.n	8004e24 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f040 8093 	bne.w	8004e24 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	4a4b      	ldr	r2, [pc, #300]	@ (8004e30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d90f      	bls.n	8004d26 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00a      	beq.n	8004d26 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d22:	6093      	str	r3, [r2, #8]
 8004d24:	e07e      	b.n	8004e24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	4413      	add	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	4413      	add	r3, r2
 8004d38:	3304      	adds	r3, #4
 8004d3a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a1a      	ldr	r2, [r3, #32]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	0159      	lsls	r1, r3, #5
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	440b      	add	r3, r1
 8004d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d52:	1ad2      	subs	r2, r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d114      	bne.n	8004d88 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d109      	bne.n	8004d7a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6818      	ldr	r0, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004d70:	461a      	mov	r2, r3
 8004d72:	2101      	movs	r1, #1
 8004d74:	f003 fa4a 	bl	800820c <USB_EP0_OutStart>
 8004d78:	e006      	b.n	8004d88 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	68da      	ldr	r2, [r3, #12]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	441a      	add	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f005 f9a8 	bl	800a0e4 <HAL_PCD_DataOutStageCallback>
 8004d94:	e046      	b.n	8004e24 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	4a26      	ldr	r2, [pc, #152]	@ (8004e34 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d124      	bne.n	8004de8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db4:	461a      	mov	r2, r3
 8004db6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dba:	6093      	str	r3, [r2, #8]
 8004dbc:	e032      	b.n	8004e24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	f003 0320 	and.w	r3, r3, #32
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d008      	beq.n	8004dda <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	2320      	movs	r3, #32
 8004dd8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	4619      	mov	r1, r3
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f005 f97f 	bl	800a0e4 <HAL_PCD_DataOutStageCallback>
 8004de6:	e01d      	b.n	8004e24 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d114      	bne.n	8004e18 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	4613      	mov	r3, r2
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	4413      	add	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	440b      	add	r3, r1
 8004dfc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d108      	bne.n	8004e18 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6818      	ldr	r0, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e10:	461a      	mov	r2, r3
 8004e12:	2100      	movs	r1, #0
 8004e14:	f003 f9fa 	bl	800820c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f005 f960 	bl	800a0e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3720      	adds	r7, #32
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	4f54300a 	.word	0x4f54300a
 8004e34:	4f54310a 	.word	0x4f54310a

08004e38 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	333c      	adds	r3, #60	@ 0x3c
 8004e50:	3304      	adds	r3, #4
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	4a15      	ldr	r2, [pc, #84]	@ (8004ec0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d90e      	bls.n	8004e8c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d009      	beq.n	8004e8c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e84:	461a      	mov	r2, r3
 8004e86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e8a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f005 f917 	bl	800a0c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	4a0a      	ldr	r2, [pc, #40]	@ (8004ec0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d90c      	bls.n	8004eb4 <PCD_EP_OutSetupPacket_int+0x7c>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	799b      	ldrb	r3, [r3, #6]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d108      	bne.n	8004eb4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6818      	ldr	r0, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004eac:	461a      	mov	r2, r3
 8004eae:	2101      	movs	r1, #1
 8004eb0:	f003 f9ac 	bl	800820c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	4f54300a 	.word	0x4f54300a

08004ec4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	70fb      	strb	r3, [r7, #3]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eda:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004edc:	78fb      	ldrb	r3, [r7, #3]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d107      	bne.n	8004ef2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004ee2:	883b      	ldrh	r3, [r7, #0]
 8004ee4:	0419      	lsls	r1, r3, #16
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ef0:	e028      	b.n	8004f44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef8:	0c1b      	lsrs	r3, r3, #16
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	4413      	add	r3, r2
 8004efe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f00:	2300      	movs	r3, #0
 8004f02:	73fb      	strb	r3, [r7, #15]
 8004f04:	e00d      	b.n	8004f22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
 8004f0c:	3340      	adds	r3, #64	@ 0x40
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	0c1b      	lsrs	r3, r3, #16
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	4413      	add	r3, r2
 8004f1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	73fb      	strb	r3, [r7, #15]
 8004f22:	7bfa      	ldrb	r2, [r7, #15]
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d3ec      	bcc.n	8004f06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004f2c:	883b      	ldrh	r3, [r7, #0]
 8004f2e:	0418      	lsls	r0, r3, #16
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6819      	ldr	r1, [r3, #0]
 8004f34:	78fb      	ldrb	r3, [r7, #3]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	4302      	orrs	r2, r0
 8004f3c:	3340      	adds	r3, #64	@ 0x40
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	887a      	ldrh	r2, [r7, #2]
 8004f64:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e267      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d075      	beq.n	8005096 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004faa:	4b88      	ldr	r3, [pc, #544]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 030c 	and.w	r3, r3, #12
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d00c      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fb6:	4b85      	ldr	r3, [pc, #532]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004fbe:	2b08      	cmp	r3, #8
 8004fc0:	d112      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fc2:	4b82      	ldr	r3, [pc, #520]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fce:	d10b      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd0:	4b7e      	ldr	r3, [pc, #504]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d05b      	beq.n	8005094 <HAL_RCC_OscConfig+0x108>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d157      	bne.n	8005094 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e242      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ff0:	d106      	bne.n	8005000 <HAL_RCC_OscConfig+0x74>
 8004ff2:	4b76      	ldr	r3, [pc, #472]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a75      	ldr	r2, [pc, #468]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8004ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	e01d      	b.n	800503c <HAL_RCC_OscConfig+0xb0>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005008:	d10c      	bne.n	8005024 <HAL_RCC_OscConfig+0x98>
 800500a:	4b70      	ldr	r3, [pc, #448]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a6f      	ldr	r2, [pc, #444]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8005010:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	4b6d      	ldr	r3, [pc, #436]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a6c      	ldr	r2, [pc, #432]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 800501c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	e00b      	b.n	800503c <HAL_RCC_OscConfig+0xb0>
 8005024:	4b69      	ldr	r3, [pc, #420]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a68      	ldr	r2, [pc, #416]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 800502a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	4b66      	ldr	r3, [pc, #408]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a65      	ldr	r2, [pc, #404]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8005036:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800503a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d013      	beq.n	800506c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005044:	f7fd f9da 	bl	80023fc <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800504c:	f7fd f9d6 	bl	80023fc <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b64      	cmp	r3, #100	@ 0x64
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e207      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800505e:	4b5b      	ldr	r3, [pc, #364]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0f0      	beq.n	800504c <HAL_RCC_OscConfig+0xc0>
 800506a:	e014      	b.n	8005096 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800506c:	f7fd f9c6 	bl	80023fc <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005074:	f7fd f9c2 	bl	80023fc <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b64      	cmp	r3, #100	@ 0x64
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e1f3      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005086:	4b51      	ldr	r3, [pc, #324]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1f0      	bne.n	8005074 <HAL_RCC_OscConfig+0xe8>
 8005092:	e000      	b.n	8005096 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d063      	beq.n	800516a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80050a2:	4b4a      	ldr	r3, [pc, #296]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 030c 	and.w	r3, r3, #12
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00b      	beq.n	80050c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ae:	4b47      	ldr	r3, [pc, #284]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d11c      	bne.n	80050f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ba:	4b44      	ldr	r3, [pc, #272]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d116      	bne.n	80050f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050c6:	4b41      	ldr	r3, [pc, #260]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d005      	beq.n	80050de <HAL_RCC_OscConfig+0x152>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d001      	beq.n	80050de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e1c7      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050de:	4b3b      	ldr	r3, [pc, #236]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	4937      	ldr	r1, [pc, #220]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050f2:	e03a      	b.n	800516a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d020      	beq.n	800513e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050fc:	4b34      	ldr	r3, [pc, #208]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 80050fe:	2201      	movs	r2, #1
 8005100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005102:	f7fd f97b 	bl	80023fc <HAL_GetTick>
 8005106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005108:	e008      	b.n	800511c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800510a:	f7fd f977 	bl	80023fc <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e1a8      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800511c:	4b2b      	ldr	r3, [pc, #172]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0f0      	beq.n	800510a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005128:	4b28      	ldr	r3, [pc, #160]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	4925      	ldr	r1, [pc, #148]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8005138:	4313      	orrs	r3, r2
 800513a:	600b      	str	r3, [r1, #0]
 800513c:	e015      	b.n	800516a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800513e:	4b24      	ldr	r3, [pc, #144]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005144:	f7fd f95a 	bl	80023fc <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800514c:	f7fd f956 	bl	80023fc <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e187      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800515e:	4b1b      	ldr	r3, [pc, #108]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1f0      	bne.n	800514c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0308 	and.w	r3, r3, #8
 8005172:	2b00      	cmp	r3, #0
 8005174:	d036      	beq.n	80051e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d016      	beq.n	80051ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800517e:	4b15      	ldr	r3, [pc, #84]	@ (80051d4 <HAL_RCC_OscConfig+0x248>)
 8005180:	2201      	movs	r2, #1
 8005182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005184:	f7fd f93a 	bl	80023fc <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800518c:	f7fd f936 	bl	80023fc <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e167      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800519e:	4b0b      	ldr	r3, [pc, #44]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 80051a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0f0      	beq.n	800518c <HAL_RCC_OscConfig+0x200>
 80051aa:	e01b      	b.n	80051e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051ac:	4b09      	ldr	r3, [pc, #36]	@ (80051d4 <HAL_RCC_OscConfig+0x248>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051b2:	f7fd f923 	bl	80023fc <HAL_GetTick>
 80051b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051b8:	e00e      	b.n	80051d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051ba:	f7fd f91f 	bl	80023fc <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d907      	bls.n	80051d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e150      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
 80051cc:	40023800 	.word	0x40023800
 80051d0:	42470000 	.word	0x42470000
 80051d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051d8:	4b88      	ldr	r3, [pc, #544]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 80051da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1ea      	bne.n	80051ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 8097 	beq.w	8005320 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051f2:	2300      	movs	r3, #0
 80051f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051f6:	4b81      	ldr	r3, [pc, #516]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 80051f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10f      	bne.n	8005222 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005202:	2300      	movs	r3, #0
 8005204:	60bb      	str	r3, [r7, #8]
 8005206:	4b7d      	ldr	r3, [pc, #500]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 8005208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520a:	4a7c      	ldr	r2, [pc, #496]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 800520c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005210:	6413      	str	r3, [r2, #64]	@ 0x40
 8005212:	4b7a      	ldr	r3, [pc, #488]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 8005214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800521a:	60bb      	str	r3, [r7, #8]
 800521c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800521e:	2301      	movs	r3, #1
 8005220:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005222:	4b77      	ldr	r3, [pc, #476]	@ (8005400 <HAL_RCC_OscConfig+0x474>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800522a:	2b00      	cmp	r3, #0
 800522c:	d118      	bne.n	8005260 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800522e:	4b74      	ldr	r3, [pc, #464]	@ (8005400 <HAL_RCC_OscConfig+0x474>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a73      	ldr	r2, [pc, #460]	@ (8005400 <HAL_RCC_OscConfig+0x474>)
 8005234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800523a:	f7fd f8df 	bl	80023fc <HAL_GetTick>
 800523e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005240:	e008      	b.n	8005254 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005242:	f7fd f8db 	bl	80023fc <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d901      	bls.n	8005254 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e10c      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005254:	4b6a      	ldr	r3, [pc, #424]	@ (8005400 <HAL_RCC_OscConfig+0x474>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0f0      	beq.n	8005242 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d106      	bne.n	8005276 <HAL_RCC_OscConfig+0x2ea>
 8005268:	4b64      	ldr	r3, [pc, #400]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 800526a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800526c:	4a63      	ldr	r2, [pc, #396]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 800526e:	f043 0301 	orr.w	r3, r3, #1
 8005272:	6713      	str	r3, [r2, #112]	@ 0x70
 8005274:	e01c      	b.n	80052b0 <HAL_RCC_OscConfig+0x324>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	2b05      	cmp	r3, #5
 800527c:	d10c      	bne.n	8005298 <HAL_RCC_OscConfig+0x30c>
 800527e:	4b5f      	ldr	r3, [pc, #380]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 8005280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005282:	4a5e      	ldr	r2, [pc, #376]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 8005284:	f043 0304 	orr.w	r3, r3, #4
 8005288:	6713      	str	r3, [r2, #112]	@ 0x70
 800528a:	4b5c      	ldr	r3, [pc, #368]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 800528c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800528e:	4a5b      	ldr	r2, [pc, #364]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 8005290:	f043 0301 	orr.w	r3, r3, #1
 8005294:	6713      	str	r3, [r2, #112]	@ 0x70
 8005296:	e00b      	b.n	80052b0 <HAL_RCC_OscConfig+0x324>
 8005298:	4b58      	ldr	r3, [pc, #352]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 800529a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800529c:	4a57      	ldr	r2, [pc, #348]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 800529e:	f023 0301 	bic.w	r3, r3, #1
 80052a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80052a4:	4b55      	ldr	r3, [pc, #340]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 80052a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a8:	4a54      	ldr	r2, [pc, #336]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 80052aa:	f023 0304 	bic.w	r3, r3, #4
 80052ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d015      	beq.n	80052e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b8:	f7fd f8a0 	bl	80023fc <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052be:	e00a      	b.n	80052d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c0:	f7fd f89c 	bl	80023fc <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e0cb      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d6:	4b49      	ldr	r3, [pc, #292]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 80052d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0ee      	beq.n	80052c0 <HAL_RCC_OscConfig+0x334>
 80052e2:	e014      	b.n	800530e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052e4:	f7fd f88a 	bl	80023fc <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052ea:	e00a      	b.n	8005302 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ec:	f7fd f886 	bl	80023fc <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e0b5      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005302:	4b3e      	ldr	r3, [pc, #248]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 8005304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1ee      	bne.n	80052ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800530e:	7dfb      	ldrb	r3, [r7, #23]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d105      	bne.n	8005320 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005314:	4b39      	ldr	r3, [pc, #228]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 8005316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005318:	4a38      	ldr	r2, [pc, #224]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 800531a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800531e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 80a1 	beq.w	800546c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800532a:	4b34      	ldr	r3, [pc, #208]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f003 030c 	and.w	r3, r3, #12
 8005332:	2b08      	cmp	r3, #8
 8005334:	d05c      	beq.n	80053f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	2b02      	cmp	r3, #2
 800533c:	d141      	bne.n	80053c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800533e:	4b31      	ldr	r3, [pc, #196]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005344:	f7fd f85a 	bl	80023fc <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800534a:	e008      	b.n	800535e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800534c:	f7fd f856 	bl	80023fc <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b02      	cmp	r3, #2
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e087      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800535e:	4b27      	ldr	r3, [pc, #156]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1f0      	bne.n	800534c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	69da      	ldr	r2, [r3, #28]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005378:	019b      	lsls	r3, r3, #6
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005380:	085b      	lsrs	r3, r3, #1
 8005382:	3b01      	subs	r3, #1
 8005384:	041b      	lsls	r3, r3, #16
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538c:	061b      	lsls	r3, r3, #24
 800538e:	491b      	ldr	r1, [pc, #108]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 8005390:	4313      	orrs	r3, r2
 8005392:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005394:	4b1b      	ldr	r3, [pc, #108]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 8005396:	2201      	movs	r2, #1
 8005398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800539a:	f7fd f82f 	bl	80023fc <HAL_GetTick>
 800539e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053a0:	e008      	b.n	80053b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053a2:	f7fd f82b 	bl	80023fc <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e05c      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053b4:	4b11      	ldr	r3, [pc, #68]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d0f0      	beq.n	80053a2 <HAL_RCC_OscConfig+0x416>
 80053c0:	e054      	b.n	800546c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c2:	4b10      	ldr	r3, [pc, #64]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c8:	f7fd f818 	bl	80023fc <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d0:	f7fd f814 	bl	80023fc <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e045      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053e2:	4b06      	ldr	r3, [pc, #24]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1f0      	bne.n	80053d0 <HAL_RCC_OscConfig+0x444>
 80053ee:	e03d      	b.n	800546c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d107      	bne.n	8005408 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e038      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
 80053fc:	40023800 	.word	0x40023800
 8005400:	40007000 	.word	0x40007000
 8005404:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005408:	4b1b      	ldr	r3, [pc, #108]	@ (8005478 <HAL_RCC_OscConfig+0x4ec>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d028      	beq.n	8005468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005420:	429a      	cmp	r2, r3
 8005422:	d121      	bne.n	8005468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800542e:	429a      	cmp	r2, r3
 8005430:	d11a      	bne.n	8005468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005438:	4013      	ands	r3, r2
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800543e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005440:	4293      	cmp	r3, r2
 8005442:	d111      	bne.n	8005468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544e:	085b      	lsrs	r3, r3, #1
 8005450:	3b01      	subs	r3, #1
 8005452:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005454:	429a      	cmp	r2, r3
 8005456:	d107      	bne.n	8005468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005462:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005464:	429a      	cmp	r2, r3
 8005466:	d001      	beq.n	800546c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e000      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	40023800 	.word	0x40023800

0800547c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e0cc      	b.n	800562a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005490:	4b68      	ldr	r3, [pc, #416]	@ (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0307 	and.w	r3, r3, #7
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d90c      	bls.n	80054b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800549e:	4b65      	ldr	r3, [pc, #404]	@ (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054a6:	4b63      	ldr	r3, [pc, #396]	@ (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0307 	and.w	r3, r3, #7
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d001      	beq.n	80054b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e0b8      	b.n	800562a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d020      	beq.n	8005506 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d005      	beq.n	80054dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054d0:	4b59      	ldr	r3, [pc, #356]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	4a58      	ldr	r2, [pc, #352]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 80054d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80054da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0308 	and.w	r3, r3, #8
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d005      	beq.n	80054f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054e8:	4b53      	ldr	r3, [pc, #332]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	4a52      	ldr	r2, [pc, #328]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 80054ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80054f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054f4:	4b50      	ldr	r3, [pc, #320]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	494d      	ldr	r1, [pc, #308]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 8005502:	4313      	orrs	r3, r2
 8005504:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d044      	beq.n	800559c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d107      	bne.n	800552a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800551a:	4b47      	ldr	r3, [pc, #284]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d119      	bne.n	800555a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e07f      	b.n	800562a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2b02      	cmp	r3, #2
 8005530:	d003      	beq.n	800553a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005536:	2b03      	cmp	r3, #3
 8005538:	d107      	bne.n	800554a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800553a:	4b3f      	ldr	r3, [pc, #252]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d109      	bne.n	800555a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e06f      	b.n	800562a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800554a:	4b3b      	ldr	r3, [pc, #236]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e067      	b.n	800562a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800555a:	4b37      	ldr	r3, [pc, #220]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f023 0203 	bic.w	r2, r3, #3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	4934      	ldr	r1, [pc, #208]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 8005568:	4313      	orrs	r3, r2
 800556a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800556c:	f7fc ff46 	bl	80023fc <HAL_GetTick>
 8005570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005572:	e00a      	b.n	800558a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005574:	f7fc ff42 	bl	80023fc <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005582:	4293      	cmp	r3, r2
 8005584:	d901      	bls.n	800558a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e04f      	b.n	800562a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800558a:	4b2b      	ldr	r3, [pc, #172]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f003 020c 	and.w	r2, r3, #12
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	429a      	cmp	r2, r3
 800559a:	d1eb      	bne.n	8005574 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800559c:	4b25      	ldr	r3, [pc, #148]	@ (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d20c      	bcs.n	80055c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055aa:	4b22      	ldr	r3, [pc, #136]	@ (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055b2:	4b20      	ldr	r3, [pc, #128]	@ (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d001      	beq.n	80055c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e032      	b.n	800562a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d008      	beq.n	80055e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055d0:	4b19      	ldr	r3, [pc, #100]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	4916      	ldr	r1, [pc, #88]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d009      	beq.n	8005602 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055ee:	4b12      	ldr	r3, [pc, #72]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	00db      	lsls	r3, r3, #3
 80055fc:	490e      	ldr	r1, [pc, #56]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005602:	f000 f821 	bl	8005648 <HAL_RCC_GetSysClockFreq>
 8005606:	4602      	mov	r2, r0
 8005608:	4b0b      	ldr	r3, [pc, #44]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	091b      	lsrs	r3, r3, #4
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	490a      	ldr	r1, [pc, #40]	@ (800563c <HAL_RCC_ClockConfig+0x1c0>)
 8005614:	5ccb      	ldrb	r3, [r1, r3]
 8005616:	fa22 f303 	lsr.w	r3, r2, r3
 800561a:	4a09      	ldr	r2, [pc, #36]	@ (8005640 <HAL_RCC_ClockConfig+0x1c4>)
 800561c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800561e:	4b09      	ldr	r3, [pc, #36]	@ (8005644 <HAL_RCC_ClockConfig+0x1c8>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4618      	mov	r0, r3
 8005624:	f7fc fea6 	bl	8002374 <HAL_InitTick>

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	40023c00 	.word	0x40023c00
 8005638:	40023800 	.word	0x40023800
 800563c:	0800a768 	.word	0x0800a768
 8005640:	20000000 	.word	0x20000000
 8005644:	20000004 	.word	0x20000004

08005648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800564c:	b090      	sub	sp, #64	@ 0x40
 800564e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005650:	2300      	movs	r3, #0
 8005652:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800565c:	2300      	movs	r3, #0
 800565e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005660:	4b59      	ldr	r3, [pc, #356]	@ (80057c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f003 030c 	and.w	r3, r3, #12
 8005668:	2b08      	cmp	r3, #8
 800566a:	d00d      	beq.n	8005688 <HAL_RCC_GetSysClockFreq+0x40>
 800566c:	2b08      	cmp	r3, #8
 800566e:	f200 80a1 	bhi.w	80057b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <HAL_RCC_GetSysClockFreq+0x34>
 8005676:	2b04      	cmp	r3, #4
 8005678:	d003      	beq.n	8005682 <HAL_RCC_GetSysClockFreq+0x3a>
 800567a:	e09b      	b.n	80057b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800567c:	4b53      	ldr	r3, [pc, #332]	@ (80057cc <HAL_RCC_GetSysClockFreq+0x184>)
 800567e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005680:	e09b      	b.n	80057ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005682:	4b53      	ldr	r3, [pc, #332]	@ (80057d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005684:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005686:	e098      	b.n	80057ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005688:	4b4f      	ldr	r3, [pc, #316]	@ (80057c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005690:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005692:	4b4d      	ldr	r3, [pc, #308]	@ (80057c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d028      	beq.n	80056f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800569e:	4b4a      	ldr	r3, [pc, #296]	@ (80057c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	099b      	lsrs	r3, r3, #6
 80056a4:	2200      	movs	r2, #0
 80056a6:	623b      	str	r3, [r7, #32]
 80056a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80056b0:	2100      	movs	r1, #0
 80056b2:	4b47      	ldr	r3, [pc, #284]	@ (80057d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80056b4:	fb03 f201 	mul.w	r2, r3, r1
 80056b8:	2300      	movs	r3, #0
 80056ba:	fb00 f303 	mul.w	r3, r0, r3
 80056be:	4413      	add	r3, r2
 80056c0:	4a43      	ldr	r2, [pc, #268]	@ (80057d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80056c2:	fba0 1202 	umull	r1, r2, r0, r2
 80056c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056c8:	460a      	mov	r2, r1
 80056ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80056cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056ce:	4413      	add	r3, r2
 80056d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d4:	2200      	movs	r2, #0
 80056d6:	61bb      	str	r3, [r7, #24]
 80056d8:	61fa      	str	r2, [r7, #28]
 80056da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80056e2:	f7fb f8cf 	bl	8000884 <__aeabi_uldivmod>
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	4613      	mov	r3, r2
 80056ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056ee:	e053      	b.n	8005798 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056f0:	4b35      	ldr	r3, [pc, #212]	@ (80057c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	099b      	lsrs	r3, r3, #6
 80056f6:	2200      	movs	r2, #0
 80056f8:	613b      	str	r3, [r7, #16]
 80056fa:	617a      	str	r2, [r7, #20]
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005702:	f04f 0b00 	mov.w	fp, #0
 8005706:	4652      	mov	r2, sl
 8005708:	465b      	mov	r3, fp
 800570a:	f04f 0000 	mov.w	r0, #0
 800570e:	f04f 0100 	mov.w	r1, #0
 8005712:	0159      	lsls	r1, r3, #5
 8005714:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005718:	0150      	lsls	r0, r2, #5
 800571a:	4602      	mov	r2, r0
 800571c:	460b      	mov	r3, r1
 800571e:	ebb2 080a 	subs.w	r8, r2, sl
 8005722:	eb63 090b 	sbc.w	r9, r3, fp
 8005726:	f04f 0200 	mov.w	r2, #0
 800572a:	f04f 0300 	mov.w	r3, #0
 800572e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005732:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005736:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800573a:	ebb2 0408 	subs.w	r4, r2, r8
 800573e:	eb63 0509 	sbc.w	r5, r3, r9
 8005742:	f04f 0200 	mov.w	r2, #0
 8005746:	f04f 0300 	mov.w	r3, #0
 800574a:	00eb      	lsls	r3, r5, #3
 800574c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005750:	00e2      	lsls	r2, r4, #3
 8005752:	4614      	mov	r4, r2
 8005754:	461d      	mov	r5, r3
 8005756:	eb14 030a 	adds.w	r3, r4, sl
 800575a:	603b      	str	r3, [r7, #0]
 800575c:	eb45 030b 	adc.w	r3, r5, fp
 8005760:	607b      	str	r3, [r7, #4]
 8005762:	f04f 0200 	mov.w	r2, #0
 8005766:	f04f 0300 	mov.w	r3, #0
 800576a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800576e:	4629      	mov	r1, r5
 8005770:	028b      	lsls	r3, r1, #10
 8005772:	4621      	mov	r1, r4
 8005774:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005778:	4621      	mov	r1, r4
 800577a:	028a      	lsls	r2, r1, #10
 800577c:	4610      	mov	r0, r2
 800577e:	4619      	mov	r1, r3
 8005780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005782:	2200      	movs	r2, #0
 8005784:	60bb      	str	r3, [r7, #8]
 8005786:	60fa      	str	r2, [r7, #12]
 8005788:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800578c:	f7fb f87a 	bl	8000884 <__aeabi_uldivmod>
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	4613      	mov	r3, r2
 8005796:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005798:	4b0b      	ldr	r3, [pc, #44]	@ (80057c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	0c1b      	lsrs	r3, r3, #16
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	3301      	adds	r3, #1
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80057a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80057aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80057b2:	e002      	b.n	80057ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057b4:	4b05      	ldr	r3, [pc, #20]	@ (80057cc <HAL_RCC_GetSysClockFreq+0x184>)
 80057b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80057b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3740      	adds	r7, #64	@ 0x40
 80057c0:	46bd      	mov	sp, r7
 80057c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057c6:	bf00      	nop
 80057c8:	40023800 	.word	0x40023800
 80057cc:	00f42400 	.word	0x00f42400
 80057d0:	017d7840 	.word	0x017d7840

080057d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057d8:	4b03      	ldr	r3, [pc, #12]	@ (80057e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80057da:	681b      	ldr	r3, [r3, #0]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	20000000 	.word	0x20000000

080057ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e041      	b.n	8005882 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d106      	bne.n	8005818 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7fc fc06 	bl	8002024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3304      	adds	r3, #4
 8005828:	4619      	mov	r1, r3
 800582a:	4610      	mov	r0, r2
 800582c:	f000 fedc 	bl	80065e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
	...

0800588c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b01      	cmp	r3, #1
 800589e:	d001      	beq.n	80058a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e044      	b.n	800592e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0201 	orr.w	r2, r2, #1
 80058ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a1e      	ldr	r2, [pc, #120]	@ (800593c <HAL_TIM_Base_Start_IT+0xb0>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d018      	beq.n	80058f8 <HAL_TIM_Base_Start_IT+0x6c>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ce:	d013      	beq.n	80058f8 <HAL_TIM_Base_Start_IT+0x6c>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a1a      	ldr	r2, [pc, #104]	@ (8005940 <HAL_TIM_Base_Start_IT+0xb4>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00e      	beq.n	80058f8 <HAL_TIM_Base_Start_IT+0x6c>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a19      	ldr	r2, [pc, #100]	@ (8005944 <HAL_TIM_Base_Start_IT+0xb8>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d009      	beq.n	80058f8 <HAL_TIM_Base_Start_IT+0x6c>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a17      	ldr	r2, [pc, #92]	@ (8005948 <HAL_TIM_Base_Start_IT+0xbc>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d004      	beq.n	80058f8 <HAL_TIM_Base_Start_IT+0x6c>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a16      	ldr	r2, [pc, #88]	@ (800594c <HAL_TIM_Base_Start_IT+0xc0>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d111      	bne.n	800591c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b06      	cmp	r3, #6
 8005908:	d010      	beq.n	800592c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f042 0201 	orr.w	r2, r2, #1
 8005918:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800591a:	e007      	b.n	800592c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0201 	orr.w	r2, r2, #1
 800592a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40010000 	.word	0x40010000
 8005940:	40000400 	.word	0x40000400
 8005944:	40000800 	.word	0x40000800
 8005948:	40000c00 	.word	0x40000c00
 800594c:	40014000 	.word	0x40014000

08005950 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e041      	b.n	80059e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d106      	bne.n	800597c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f839 	bl	80059ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2202      	movs	r2, #2
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	3304      	adds	r3, #4
 800598c:	4619      	mov	r1, r3
 800598e:	4610      	mov	r0, r2
 8005990:	f000 fe2a 	bl	80065e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b083      	sub	sp, #12
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059f6:	bf00      	nop
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
	...

08005a04 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
 8005a10:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005a12:	2300      	movs	r3, #0
 8005a14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d109      	bne.n	8005a30 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	bf0c      	ite	eq
 8005a28:	2301      	moveq	r3, #1
 8005a2a:	2300      	movne	r3, #0
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	e022      	b.n	8005a76 <HAL_TIM_PWM_Start_DMA+0x72>
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	d109      	bne.n	8005a4a <HAL_TIM_PWM_Start_DMA+0x46>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	bf0c      	ite	eq
 8005a42:	2301      	moveq	r3, #1
 8005a44:	2300      	movne	r3, #0
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	e015      	b.n	8005a76 <HAL_TIM_PWM_Start_DMA+0x72>
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d109      	bne.n	8005a64 <HAL_TIM_PWM_Start_DMA+0x60>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	bf0c      	ite	eq
 8005a5c:	2301      	moveq	r3, #1
 8005a5e:	2300      	movne	r3, #0
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	e008      	b.n	8005a76 <HAL_TIM_PWM_Start_DMA+0x72>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	bf0c      	ite	eq
 8005a70:	2301      	moveq	r3, #1
 8005a72:	2300      	movne	r3, #0
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	e15d      	b.n	8005d3a <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d109      	bne.n	8005a98 <HAL_TIM_PWM_Start_DMA+0x94>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	bf0c      	ite	eq
 8005a90:	2301      	moveq	r3, #1
 8005a92:	2300      	movne	r3, #0
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	e022      	b.n	8005ade <HAL_TIM_PWM_Start_DMA+0xda>
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	d109      	bne.n	8005ab2 <HAL_TIM_PWM_Start_DMA+0xae>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	bf0c      	ite	eq
 8005aaa:	2301      	moveq	r3, #1
 8005aac:	2300      	movne	r3, #0
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	e015      	b.n	8005ade <HAL_TIM_PWM_Start_DMA+0xda>
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2b08      	cmp	r3, #8
 8005ab6:	d109      	bne.n	8005acc <HAL_TIM_PWM_Start_DMA+0xc8>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	bf0c      	ite	eq
 8005ac4:	2301      	moveq	r3, #1
 8005ac6:	2300      	movne	r3, #0
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	e008      	b.n	8005ade <HAL_TIM_PWM_Start_DMA+0xda>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	bf0c      	ite	eq
 8005ad8:	2301      	moveq	r3, #1
 8005ada:	2300      	movne	r3, #0
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d024      	beq.n	8005b2c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d002      	beq.n	8005aee <HAL_TIM_PWM_Start_DMA+0xea>
 8005ae8:	887b      	ldrh	r3, [r7, #2]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e123      	b.n	8005d3a <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d104      	bne.n	8005b02 <HAL_TIM_PWM_Start_DMA+0xfe>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b00:	e016      	b.n	8005b30 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	2b04      	cmp	r3, #4
 8005b06:	d104      	bne.n	8005b12 <HAL_TIM_PWM_Start_DMA+0x10e>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b10:	e00e      	b.n	8005b30 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d104      	bne.n	8005b22 <HAL_TIM_PWM_Start_DMA+0x11e>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b20:	e006      	b.n	8005b30 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2202      	movs	r2, #2
 8005b26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b2a:	e001      	b.n	8005b30 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e104      	b.n	8005d3a <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2b0c      	cmp	r3, #12
 8005b34:	f200 80ae 	bhi.w	8005c94 <HAL_TIM_PWM_Start_DMA+0x290>
 8005b38:	a201      	add	r2, pc, #4	@ (adr r2, 8005b40 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8005b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3e:	bf00      	nop
 8005b40:	08005b75 	.word	0x08005b75
 8005b44:	08005c95 	.word	0x08005c95
 8005b48:	08005c95 	.word	0x08005c95
 8005b4c:	08005c95 	.word	0x08005c95
 8005b50:	08005bbd 	.word	0x08005bbd
 8005b54:	08005c95 	.word	0x08005c95
 8005b58:	08005c95 	.word	0x08005c95
 8005b5c:	08005c95 	.word	0x08005c95
 8005b60:	08005c05 	.word	0x08005c05
 8005b64:	08005c95 	.word	0x08005c95
 8005b68:	08005c95 	.word	0x08005c95
 8005b6c:	08005c95 	.word	0x08005c95
 8005b70:	08005c4d 	.word	0x08005c4d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b78:	4a72      	ldr	r2, [pc, #456]	@ (8005d44 <HAL_TIM_PWM_Start_DMA+0x340>)
 8005b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b80:	4a71      	ldr	r2, [pc, #452]	@ (8005d48 <HAL_TIM_PWM_Start_DMA+0x344>)
 8005b82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b88:	4a70      	ldr	r2, [pc, #448]	@ (8005d4c <HAL_TIM_PWM_Start_DMA+0x348>)
 8005b8a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005b90:	6879      	ldr	r1, [r7, #4]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3334      	adds	r3, #52	@ 0x34
 8005b98:	461a      	mov	r2, r3
 8005b9a:	887b      	ldrh	r3, [r7, #2]
 8005b9c:	f7fd fb3a 	bl	8003214 <HAL_DMA_Start_IT>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e0c7      	b.n	8005d3a <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bb8:	60da      	str	r2, [r3, #12]
      break;
 8005bba:	e06e      	b.n	8005c9a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc0:	4a60      	ldr	r2, [pc, #384]	@ (8005d44 <HAL_TIM_PWM_Start_DMA+0x340>)
 8005bc2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc8:	4a5f      	ldr	r2, [pc, #380]	@ (8005d48 <HAL_TIM_PWM_Start_DMA+0x344>)
 8005bca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd0:	4a5e      	ldr	r2, [pc, #376]	@ (8005d4c <HAL_TIM_PWM_Start_DMA+0x348>)
 8005bd2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005bd8:	6879      	ldr	r1, [r7, #4]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3338      	adds	r3, #56	@ 0x38
 8005be0:	461a      	mov	r2, r3
 8005be2:	887b      	ldrh	r3, [r7, #2]
 8005be4:	f7fd fb16 	bl	8003214 <HAL_DMA_Start_IT>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e0a3      	b.n	8005d3a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005c00:	60da      	str	r2, [r3, #12]
      break;
 8005c02:	e04a      	b.n	8005c9a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c08:	4a4e      	ldr	r2, [pc, #312]	@ (8005d44 <HAL_TIM_PWM_Start_DMA+0x340>)
 8005c0a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c10:	4a4d      	ldr	r2, [pc, #308]	@ (8005d48 <HAL_TIM_PWM_Start_DMA+0x344>)
 8005c12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c18:	4a4c      	ldr	r2, [pc, #304]	@ (8005d4c <HAL_TIM_PWM_Start_DMA+0x348>)
 8005c1a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8005c20:	6879      	ldr	r1, [r7, #4]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	333c      	adds	r3, #60	@ 0x3c
 8005c28:	461a      	mov	r2, r3
 8005c2a:	887b      	ldrh	r3, [r7, #2]
 8005c2c:	f7fd faf2 	bl	8003214 <HAL_DMA_Start_IT>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e07f      	b.n	8005d3a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68da      	ldr	r2, [r3, #12]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c48:	60da      	str	r2, [r3, #12]
      break;
 8005c4a:	e026      	b.n	8005c9a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c50:	4a3c      	ldr	r2, [pc, #240]	@ (8005d44 <HAL_TIM_PWM_Start_DMA+0x340>)
 8005c52:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c58:	4a3b      	ldr	r2, [pc, #236]	@ (8005d48 <HAL_TIM_PWM_Start_DMA+0x344>)
 8005c5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c60:	4a3a      	ldr	r2, [pc, #232]	@ (8005d4c <HAL_TIM_PWM_Start_DMA+0x348>)
 8005c62:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005c68:	6879      	ldr	r1, [r7, #4]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3340      	adds	r3, #64	@ 0x40
 8005c70:	461a      	mov	r2, r3
 8005c72:	887b      	ldrh	r3, [r7, #2]
 8005c74:	f7fd face 	bl	8003214 <HAL_DMA_Start_IT>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e05b      	b.n	8005d3a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68da      	ldr	r2, [r3, #12]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005c90:	60da      	str	r2, [r3, #12]
      break;
 8005c92:	e002      	b.n	8005c9a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	75fb      	strb	r3, [r7, #23]
      break;
 8005c98:	bf00      	nop
  }

  if (status == HAL_OK)
 8005c9a:	7dfb      	ldrb	r3, [r7, #23]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d14b      	bne.n	8005d38 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	68b9      	ldr	r1, [r7, #8]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f000 ff4f 	bl	8006b4c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a27      	ldr	r2, [pc, #156]	@ (8005d50 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d107      	bne.n	8005cc8 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005cc6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a20      	ldr	r2, [pc, #128]	@ (8005d50 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d018      	beq.n	8005d04 <HAL_TIM_PWM_Start_DMA+0x300>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cda:	d013      	beq.n	8005d04 <HAL_TIM_PWM_Start_DMA+0x300>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a1c      	ldr	r2, [pc, #112]	@ (8005d54 <HAL_TIM_PWM_Start_DMA+0x350>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00e      	beq.n	8005d04 <HAL_TIM_PWM_Start_DMA+0x300>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a1b      	ldr	r2, [pc, #108]	@ (8005d58 <HAL_TIM_PWM_Start_DMA+0x354>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d009      	beq.n	8005d04 <HAL_TIM_PWM_Start_DMA+0x300>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a19      	ldr	r2, [pc, #100]	@ (8005d5c <HAL_TIM_PWM_Start_DMA+0x358>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d004      	beq.n	8005d04 <HAL_TIM_PWM_Start_DMA+0x300>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a18      	ldr	r2, [pc, #96]	@ (8005d60 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d111      	bne.n	8005d28 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f003 0307 	and.w	r3, r3, #7
 8005d0e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	2b06      	cmp	r3, #6
 8005d14:	d010      	beq.n	8005d38 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f042 0201 	orr.w	r2, r2, #1
 8005d24:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d26:	e007      	b.n	8005d38 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 0201 	orr.w	r2, r2, #1
 8005d36:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	080064d9 	.word	0x080064d9
 8005d48:	08006581 	.word	0x08006581
 8005d4c:	08006447 	.word	0x08006447
 8005d50:	40010000 	.word	0x40010000
 8005d54:	40000400 	.word	0x40000400
 8005d58:	40000800 	.word	0x40000800
 8005d5c:	40000c00 	.word	0x40000c00
 8005d60:	40014000 	.word	0x40014000

08005d64 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	2b0c      	cmp	r3, #12
 8005d76:	d855      	bhi.n	8005e24 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005d78:	a201      	add	r2, pc, #4	@ (adr r2, 8005d80 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7e:	bf00      	nop
 8005d80:	08005db5 	.word	0x08005db5
 8005d84:	08005e25 	.word	0x08005e25
 8005d88:	08005e25 	.word	0x08005e25
 8005d8c:	08005e25 	.word	0x08005e25
 8005d90:	08005dd1 	.word	0x08005dd1
 8005d94:	08005e25 	.word	0x08005e25
 8005d98:	08005e25 	.word	0x08005e25
 8005d9c:	08005e25 	.word	0x08005e25
 8005da0:	08005ded 	.word	0x08005ded
 8005da4:	08005e25 	.word	0x08005e25
 8005da8:	08005e25 	.word	0x08005e25
 8005dac:	08005e25 	.word	0x08005e25
 8005db0:	08005e09 	.word	0x08005e09
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68da      	ldr	r2, [r3, #12]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005dc2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7fd fa7b 	bl	80032c4 <HAL_DMA_Abort_IT>
      break;
 8005dce:	e02c      	b.n	8005e2a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dde:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7fd fa6d 	bl	80032c4 <HAL_DMA_Abort_IT>
      break;
 8005dea:	e01e      	b.n	8005e2a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68da      	ldr	r2, [r3, #12]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005dfa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7fd fa5f 	bl	80032c4 <HAL_DMA_Abort_IT>
      break;
 8005e06:	e010      	b.n	8005e2a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68da      	ldr	r2, [r3, #12]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005e16:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7fd fa51 	bl	80032c4 <HAL_DMA_Abort_IT>
      break;
 8005e22:	e002      	b.n	8005e2a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	73fb      	strb	r3, [r7, #15]
      break;
 8005e28:	bf00      	nop
  }

  if (status == HAL_OK)
 8005e2a:	7bfb      	ldrb	r3, [r7, #15]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d157      	bne.n	8005ee0 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2200      	movs	r2, #0
 8005e36:	6839      	ldr	r1, [r7, #0]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 fe87 	bl	8006b4c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a2a      	ldr	r2, [pc, #168]	@ (8005eec <HAL_TIM_PWM_Stop_DMA+0x188>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d117      	bne.n	8005e78 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6a1a      	ldr	r2, [r3, #32]
 8005e4e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005e52:	4013      	ands	r3, r2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10f      	bne.n	8005e78 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6a1a      	ldr	r2, [r3, #32]
 8005e5e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005e62:	4013      	ands	r3, r2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d107      	bne.n	8005e78 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e76:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6a1a      	ldr	r2, [r3, #32]
 8005e7e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005e82:	4013      	ands	r3, r2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10f      	bne.n	8005ea8 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6a1a      	ldr	r2, [r3, #32]
 8005e8e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005e92:	4013      	ands	r3, r2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d107      	bne.n	8005ea8 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0201 	bic.w	r2, r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d104      	bne.n	8005eb8 <HAL_TIM_PWM_Stop_DMA+0x154>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005eb6:	e013      	b.n	8005ee0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	2b04      	cmp	r3, #4
 8005ebc:	d104      	bne.n	8005ec8 <HAL_TIM_PWM_Stop_DMA+0x164>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ec6:	e00b      	b.n	8005ee0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2b08      	cmp	r3, #8
 8005ecc:	d104      	bne.n	8005ed8 <HAL_TIM_PWM_Stop_DMA+0x174>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ed6:	e003      	b.n	8005ee0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	40010000 	.word	0x40010000

08005ef0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d020      	beq.n	8005f54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d01b      	beq.n	8005f54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f06f 0202 	mvn.w	r2, #2
 8005f24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	f003 0303 	and.w	r3, r3, #3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fa5b 	bl	80063f6 <HAL_TIM_IC_CaptureCallback>
 8005f40:	e005      	b.n	8005f4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fa4d 	bl	80063e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f7fa fe13 	bl	8000b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	f003 0304 	and.w	r3, r3, #4
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d020      	beq.n	8005fa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f003 0304 	and.w	r3, r3, #4
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d01b      	beq.n	8005fa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f06f 0204 	mvn.w	r2, #4
 8005f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2202      	movs	r2, #2
 8005f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fa35 	bl	80063f6 <HAL_TIM_IC_CaptureCallback>
 8005f8c:	e005      	b.n	8005f9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 fa27 	bl	80063e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f7fa fded 	bl	8000b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	f003 0308 	and.w	r3, r3, #8
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d020      	beq.n	8005fec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f003 0308 	and.w	r3, r3, #8
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d01b      	beq.n	8005fec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f06f 0208 	mvn.w	r2, #8
 8005fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2204      	movs	r2, #4
 8005fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	f003 0303 	and.w	r3, r3, #3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 fa0f 	bl	80063f6 <HAL_TIM_IC_CaptureCallback>
 8005fd8:	e005      	b.n	8005fe6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fa01 	bl	80063e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7fa fdc7 	bl	8000b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	f003 0310 	and.w	r3, r3, #16
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d020      	beq.n	8006038 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f003 0310 	and.w	r3, r3, #16
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d01b      	beq.n	8006038 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f06f 0210 	mvn.w	r2, #16
 8006008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2208      	movs	r2, #8
 800600e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f9e9 	bl	80063f6 <HAL_TIM_IC_CaptureCallback>
 8006024:	e005      	b.n	8006032 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f9db 	bl	80063e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f7fa fda1 	bl	8000b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00c      	beq.n	800605c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	2b00      	cmp	r3, #0
 800604a:	d007      	beq.n	800605c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f06f 0201 	mvn.w	r2, #1
 8006054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7fa fd9c 	bl	8000b94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00c      	beq.n	8006080 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800606c:	2b00      	cmp	r3, #0
 800606e:	d007      	beq.n	8006080 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fe04 	bl	8006c88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00c      	beq.n	80060a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006090:	2b00      	cmp	r3, #0
 8006092:	d007      	beq.n	80060a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800609c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f9bd 	bl	800641e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	f003 0320 	and.w	r3, r3, #32
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00c      	beq.n	80060c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f003 0320 	and.w	r3, r3, #32
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d007      	beq.n	80060c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f06f 0220 	mvn.w	r2, #32
 80060c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fdd6 	bl	8006c74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060c8:	bf00      	nop
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060dc:	2300      	movs	r3, #0
 80060de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d101      	bne.n	80060ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060ea:	2302      	movs	r3, #2
 80060ec:	e0ae      	b.n	800624c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b0c      	cmp	r3, #12
 80060fa:	f200 809f 	bhi.w	800623c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80060fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006104 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006104:	08006139 	.word	0x08006139
 8006108:	0800623d 	.word	0x0800623d
 800610c:	0800623d 	.word	0x0800623d
 8006110:	0800623d 	.word	0x0800623d
 8006114:	08006179 	.word	0x08006179
 8006118:	0800623d 	.word	0x0800623d
 800611c:	0800623d 	.word	0x0800623d
 8006120:	0800623d 	.word	0x0800623d
 8006124:	080061bb 	.word	0x080061bb
 8006128:	0800623d 	.word	0x0800623d
 800612c:	0800623d 	.word	0x0800623d
 8006130:	0800623d 	.word	0x0800623d
 8006134:	080061fb 	.word	0x080061fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68b9      	ldr	r1, [r7, #8]
 800613e:	4618      	mov	r0, r3
 8006140:	f000 fade 	bl	8006700 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	699a      	ldr	r2, [r3, #24]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f042 0208 	orr.w	r2, r2, #8
 8006152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	699a      	ldr	r2, [r3, #24]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f022 0204 	bic.w	r2, r2, #4
 8006162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6999      	ldr	r1, [r3, #24]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	691a      	ldr	r2, [r3, #16]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	619a      	str	r2, [r3, #24]
      break;
 8006176:	e064      	b.n	8006242 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68b9      	ldr	r1, [r7, #8]
 800617e:	4618      	mov	r0, r3
 8006180:	f000 fb24 	bl	80067cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	699a      	ldr	r2, [r3, #24]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006192:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699a      	ldr	r2, [r3, #24]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6999      	ldr	r1, [r3, #24]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	021a      	lsls	r2, r3, #8
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	619a      	str	r2, [r3, #24]
      break;
 80061b8:	e043      	b.n	8006242 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68b9      	ldr	r1, [r7, #8]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f000 fb6f 	bl	80068a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	69da      	ldr	r2, [r3, #28]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f042 0208 	orr.w	r2, r2, #8
 80061d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	69da      	ldr	r2, [r3, #28]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 0204 	bic.w	r2, r2, #4
 80061e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	69d9      	ldr	r1, [r3, #28]
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	691a      	ldr	r2, [r3, #16]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	61da      	str	r2, [r3, #28]
      break;
 80061f8:	e023      	b.n	8006242 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68b9      	ldr	r1, [r7, #8]
 8006200:	4618      	mov	r0, r3
 8006202:	f000 fbb9 	bl	8006978 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	69da      	ldr	r2, [r3, #28]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006214:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	69da      	ldr	r2, [r3, #28]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006224:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	69d9      	ldr	r1, [r3, #28]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	021a      	lsls	r2, r3, #8
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	430a      	orrs	r2, r1
 8006238:	61da      	str	r2, [r3, #28]
      break;
 800623a:	e002      	b.n	8006242 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	75fb      	strb	r3, [r7, #23]
      break;
 8006240:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800624a:	7dfb      	ldrb	r3, [r7, #23]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3718      	adds	r7, #24
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006268:	2b01      	cmp	r3, #1
 800626a:	d101      	bne.n	8006270 <HAL_TIM_ConfigClockSource+0x1c>
 800626c:	2302      	movs	r3, #2
 800626e:	e0b4      	b.n	80063da <HAL_TIM_ConfigClockSource+0x186>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2202      	movs	r2, #2
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800628e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006296:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062a8:	d03e      	beq.n	8006328 <HAL_TIM_ConfigClockSource+0xd4>
 80062aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062ae:	f200 8087 	bhi.w	80063c0 <HAL_TIM_ConfigClockSource+0x16c>
 80062b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062b6:	f000 8086 	beq.w	80063c6 <HAL_TIM_ConfigClockSource+0x172>
 80062ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062be:	d87f      	bhi.n	80063c0 <HAL_TIM_ConfigClockSource+0x16c>
 80062c0:	2b70      	cmp	r3, #112	@ 0x70
 80062c2:	d01a      	beq.n	80062fa <HAL_TIM_ConfigClockSource+0xa6>
 80062c4:	2b70      	cmp	r3, #112	@ 0x70
 80062c6:	d87b      	bhi.n	80063c0 <HAL_TIM_ConfigClockSource+0x16c>
 80062c8:	2b60      	cmp	r3, #96	@ 0x60
 80062ca:	d050      	beq.n	800636e <HAL_TIM_ConfigClockSource+0x11a>
 80062cc:	2b60      	cmp	r3, #96	@ 0x60
 80062ce:	d877      	bhi.n	80063c0 <HAL_TIM_ConfigClockSource+0x16c>
 80062d0:	2b50      	cmp	r3, #80	@ 0x50
 80062d2:	d03c      	beq.n	800634e <HAL_TIM_ConfigClockSource+0xfa>
 80062d4:	2b50      	cmp	r3, #80	@ 0x50
 80062d6:	d873      	bhi.n	80063c0 <HAL_TIM_ConfigClockSource+0x16c>
 80062d8:	2b40      	cmp	r3, #64	@ 0x40
 80062da:	d058      	beq.n	800638e <HAL_TIM_ConfigClockSource+0x13a>
 80062dc:	2b40      	cmp	r3, #64	@ 0x40
 80062de:	d86f      	bhi.n	80063c0 <HAL_TIM_ConfigClockSource+0x16c>
 80062e0:	2b30      	cmp	r3, #48	@ 0x30
 80062e2:	d064      	beq.n	80063ae <HAL_TIM_ConfigClockSource+0x15a>
 80062e4:	2b30      	cmp	r3, #48	@ 0x30
 80062e6:	d86b      	bhi.n	80063c0 <HAL_TIM_ConfigClockSource+0x16c>
 80062e8:	2b20      	cmp	r3, #32
 80062ea:	d060      	beq.n	80063ae <HAL_TIM_ConfigClockSource+0x15a>
 80062ec:	2b20      	cmp	r3, #32
 80062ee:	d867      	bhi.n	80063c0 <HAL_TIM_ConfigClockSource+0x16c>
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d05c      	beq.n	80063ae <HAL_TIM_ConfigClockSource+0x15a>
 80062f4:	2b10      	cmp	r3, #16
 80062f6:	d05a      	beq.n	80063ae <HAL_TIM_ConfigClockSource+0x15a>
 80062f8:	e062      	b.n	80063c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800630a:	f000 fbff 	bl	8006b0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800631c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	609a      	str	r2, [r3, #8]
      break;
 8006326:	e04f      	b.n	80063c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006338:	f000 fbe8 	bl	8006b0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689a      	ldr	r2, [r3, #8]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800634a:	609a      	str	r2, [r3, #8]
      break;
 800634c:	e03c      	b.n	80063c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800635a:	461a      	mov	r2, r3
 800635c:	f000 fb5c 	bl	8006a18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2150      	movs	r1, #80	@ 0x50
 8006366:	4618      	mov	r0, r3
 8006368:	f000 fbb5 	bl	8006ad6 <TIM_ITRx_SetConfig>
      break;
 800636c:	e02c      	b.n	80063c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800637a:	461a      	mov	r2, r3
 800637c:	f000 fb7b 	bl	8006a76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2160      	movs	r1, #96	@ 0x60
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fba5 	bl	8006ad6 <TIM_ITRx_SetConfig>
      break;
 800638c:	e01c      	b.n	80063c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800639a:	461a      	mov	r2, r3
 800639c:	f000 fb3c 	bl	8006a18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2140      	movs	r1, #64	@ 0x40
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 fb95 	bl	8006ad6 <TIM_ITRx_SetConfig>
      break;
 80063ac:	e00c      	b.n	80063c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4619      	mov	r1, r3
 80063b8:	4610      	mov	r0, r2
 80063ba:	f000 fb8c 	bl	8006ad6 <TIM_ITRx_SetConfig>
      break;
 80063be:	e003      	b.n	80063c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	73fb      	strb	r3, [r7, #15]
      break;
 80063c4:	e000      	b.n	80063c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063fe:	bf00      	nop
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006412:	bf00      	nop
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006432:	b480      	push	{r7}
 8006434:	b083      	sub	sp, #12
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800643a:	bf00      	nop
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b084      	sub	sp, #16
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006452:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	429a      	cmp	r2, r3
 800645c:	d107      	bne.n	800646e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2201      	movs	r2, #1
 8006462:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800646c:	e02a      	b.n	80064c4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	429a      	cmp	r2, r3
 8006476:	d107      	bne.n	8006488 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2202      	movs	r2, #2
 800647c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006486:	e01d      	b.n	80064c4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	429a      	cmp	r2, r3
 8006490:	d107      	bne.n	80064a2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2204      	movs	r2, #4
 8006496:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064a0:	e010      	b.n	80064c4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d107      	bne.n	80064bc <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2208      	movs	r2, #8
 80064b0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80064ba:	e003      	b.n	80064c4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f7ff ffb4 	bl	8006432 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	771a      	strb	r2, [r3, #28]
}
 80064d0:	bf00      	nop
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d10b      	bne.n	8006508 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2201      	movs	r2, #1
 80064f4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d136      	bne.n	800656c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006506:	e031      	b.n	800656c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	429a      	cmp	r2, r3
 8006510:	d10b      	bne.n	800652a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2202      	movs	r2, #2
 8006516:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d125      	bne.n	800656c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006528:	e020      	b.n	800656c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	429a      	cmp	r2, r3
 8006532:	d10b      	bne.n	800654c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2204      	movs	r2, #4
 8006538:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d114      	bne.n	800656c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800654a:	e00f      	b.n	800656c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	429a      	cmp	r2, r3
 8006554:	d10a      	bne.n	800656c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2208      	movs	r2, #8
 800655a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d103      	bne.n	800656c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f7fa fb01 	bl	8000b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	771a      	strb	r2, [r3, #28]
}
 8006578:	bf00      	nop
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800658c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	429a      	cmp	r2, r3
 8006596:	d103      	bne.n	80065a0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2201      	movs	r2, #1
 800659c:	771a      	strb	r2, [r3, #28]
 800659e:	e019      	b.n	80065d4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d103      	bne.n	80065b2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2202      	movs	r2, #2
 80065ae:	771a      	strb	r2, [r3, #28]
 80065b0:	e010      	b.n	80065d4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d103      	bne.n	80065c4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2204      	movs	r2, #4
 80065c0:	771a      	strb	r2, [r3, #28]
 80065c2:	e007      	b.n	80065d4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d102      	bne.n	80065d4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2208      	movs	r2, #8
 80065d2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f7ff ff18 	bl	800640a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	771a      	strb	r2, [r3, #28]
}
 80065e0:	bf00      	nop
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a3a      	ldr	r2, [pc, #232]	@ (80066e4 <TIM_Base_SetConfig+0xfc>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d00f      	beq.n	8006620 <TIM_Base_SetConfig+0x38>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006606:	d00b      	beq.n	8006620 <TIM_Base_SetConfig+0x38>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a37      	ldr	r2, [pc, #220]	@ (80066e8 <TIM_Base_SetConfig+0x100>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d007      	beq.n	8006620 <TIM_Base_SetConfig+0x38>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a36      	ldr	r2, [pc, #216]	@ (80066ec <TIM_Base_SetConfig+0x104>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d003      	beq.n	8006620 <TIM_Base_SetConfig+0x38>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a35      	ldr	r2, [pc, #212]	@ (80066f0 <TIM_Base_SetConfig+0x108>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d108      	bne.n	8006632 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006626:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	4313      	orrs	r3, r2
 8006630:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a2b      	ldr	r2, [pc, #172]	@ (80066e4 <TIM_Base_SetConfig+0xfc>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d01b      	beq.n	8006672 <TIM_Base_SetConfig+0x8a>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006640:	d017      	beq.n	8006672 <TIM_Base_SetConfig+0x8a>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a28      	ldr	r2, [pc, #160]	@ (80066e8 <TIM_Base_SetConfig+0x100>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d013      	beq.n	8006672 <TIM_Base_SetConfig+0x8a>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a27      	ldr	r2, [pc, #156]	@ (80066ec <TIM_Base_SetConfig+0x104>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d00f      	beq.n	8006672 <TIM_Base_SetConfig+0x8a>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a26      	ldr	r2, [pc, #152]	@ (80066f0 <TIM_Base_SetConfig+0x108>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d00b      	beq.n	8006672 <TIM_Base_SetConfig+0x8a>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a25      	ldr	r2, [pc, #148]	@ (80066f4 <TIM_Base_SetConfig+0x10c>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d007      	beq.n	8006672 <TIM_Base_SetConfig+0x8a>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a24      	ldr	r2, [pc, #144]	@ (80066f8 <TIM_Base_SetConfig+0x110>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d003      	beq.n	8006672 <TIM_Base_SetConfig+0x8a>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a23      	ldr	r2, [pc, #140]	@ (80066fc <TIM_Base_SetConfig+0x114>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d108      	bne.n	8006684 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	4313      	orrs	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	4313      	orrs	r3, r2
 8006690:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	689a      	ldr	r2, [r3, #8]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a0e      	ldr	r2, [pc, #56]	@ (80066e4 <TIM_Base_SetConfig+0xfc>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d103      	bne.n	80066b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	691a      	ldr	r2, [r3, #16]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d105      	bne.n	80066d6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	f023 0201 	bic.w	r2, r3, #1
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	611a      	str	r2, [r3, #16]
  }
}
 80066d6:	bf00      	nop
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	40010000 	.word	0x40010000
 80066e8:	40000400 	.word	0x40000400
 80066ec:	40000800 	.word	0x40000800
 80066f0:	40000c00 	.word	0x40000c00
 80066f4:	40014000 	.word	0x40014000
 80066f8:	40014400 	.word	0x40014400
 80066fc:	40014800 	.word	0x40014800

08006700 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	f023 0201 	bic.w	r2, r3, #1
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800672e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f023 0303 	bic.w	r3, r3, #3
 8006736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	4313      	orrs	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f023 0302 	bic.w	r3, r3, #2
 8006748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	4313      	orrs	r3, r2
 8006752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a1c      	ldr	r2, [pc, #112]	@ (80067c8 <TIM_OC1_SetConfig+0xc8>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d10c      	bne.n	8006776 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f023 0308 	bic.w	r3, r3, #8
 8006762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	4313      	orrs	r3, r2
 800676c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f023 0304 	bic.w	r3, r3, #4
 8006774:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a13      	ldr	r2, [pc, #76]	@ (80067c8 <TIM_OC1_SetConfig+0xc8>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d111      	bne.n	80067a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800678c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	4313      	orrs	r3, r2
 8006796:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	4313      	orrs	r3, r2
 80067a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	621a      	str	r2, [r3, #32]
}
 80067bc:	bf00      	nop
 80067be:	371c      	adds	r7, #28
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr
 80067c8:	40010000 	.word	0x40010000

080067cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b087      	sub	sp, #28
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	f023 0210 	bic.w	r2, r3, #16
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006802:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	021b      	lsls	r3, r3, #8
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	4313      	orrs	r3, r2
 800680e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f023 0320 	bic.w	r3, r3, #32
 8006816:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	011b      	lsls	r3, r3, #4
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	4313      	orrs	r3, r2
 8006822:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a1e      	ldr	r2, [pc, #120]	@ (80068a0 <TIM_OC2_SetConfig+0xd4>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d10d      	bne.n	8006848 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	4313      	orrs	r3, r2
 800683e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006846:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a15      	ldr	r2, [pc, #84]	@ (80068a0 <TIM_OC2_SetConfig+0xd4>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d113      	bne.n	8006878 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006856:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800685e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	4313      	orrs	r3, r2
 800686a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	4313      	orrs	r3, r2
 8006876:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	621a      	str	r2, [r3, #32]
}
 8006892:	bf00      	nop
 8006894:	371c      	adds	r7, #28
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	40010000 	.word	0x40010000

080068a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b087      	sub	sp, #28
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	69db      	ldr	r3, [r3, #28]
 80068ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 0303 	bic.w	r3, r3, #3
 80068da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80068ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	021b      	lsls	r3, r3, #8
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006974 <TIM_OC3_SetConfig+0xd0>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d10d      	bne.n	800691e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006908:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	021b      	lsls	r3, r3, #8
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	4313      	orrs	r3, r2
 8006914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800691c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a14      	ldr	r2, [pc, #80]	@ (8006974 <TIM_OC3_SetConfig+0xd0>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d113      	bne.n	800694e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800692c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	011b      	lsls	r3, r3, #4
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	4313      	orrs	r3, r2
 8006940:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	011b      	lsls	r3, r3, #4
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	4313      	orrs	r3, r2
 800694c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	621a      	str	r2, [r3, #32]
}
 8006968:	bf00      	nop
 800696a:	371c      	adds	r7, #28
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	40010000 	.word	0x40010000

08006978 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006978:	b480      	push	{r7}
 800697a:	b087      	sub	sp, #28
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a1b      	ldr	r3, [r3, #32]
 800698c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	021b      	lsls	r3, r3, #8
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	031b      	lsls	r3, r3, #12
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a10      	ldr	r2, [pc, #64]	@ (8006a14 <TIM_OC4_SetConfig+0x9c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d109      	bne.n	80069ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	695b      	ldr	r3, [r3, #20]
 80069e4:	019b      	lsls	r3, r3, #6
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	621a      	str	r2, [r3, #32]
}
 8006a06:	bf00      	nop
 8006a08:	371c      	adds	r7, #28
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	40010000 	.word	0x40010000

08006a18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f023 0201 	bic.w	r2, r3, #1
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f023 030a 	bic.w	r3, r3, #10
 8006a54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	621a      	str	r2, [r3, #32]
}
 8006a6a:	bf00      	nop
 8006a6c:	371c      	adds	r7, #28
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b087      	sub	sp, #28
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	60f8      	str	r0, [r7, #12]
 8006a7e:	60b9      	str	r1, [r7, #8]
 8006a80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6a1b      	ldr	r3, [r3, #32]
 8006a8c:	f023 0210 	bic.w	r2, r3, #16
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006aa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	031b      	lsls	r3, r3, #12
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ab2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	011b      	lsls	r3, r3, #4
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	621a      	str	r2, [r3, #32]
}
 8006aca:	bf00      	nop
 8006acc:	371c      	adds	r7, #28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b085      	sub	sp, #20
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	f043 0307 	orr.w	r3, r3, #7
 8006af8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	609a      	str	r2, [r3, #8]
}
 8006b00:	bf00      	nop
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
 8006b18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	021a      	lsls	r2, r3, #8
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	609a      	str	r2, [r3, #8]
}
 8006b40:	bf00      	nop
 8006b42:	371c      	adds	r7, #28
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b087      	sub	sp, #28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	f003 031f 	and.w	r3, r3, #31
 8006b5e:	2201      	movs	r2, #1
 8006b60:	fa02 f303 	lsl.w	r3, r2, r3
 8006b64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6a1a      	ldr	r2, [r3, #32]
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	43db      	mvns	r3, r3
 8006b6e:	401a      	ands	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6a1a      	ldr	r2, [r3, #32]
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f003 031f 	and.w	r3, r3, #31
 8006b7e:	6879      	ldr	r1, [r7, #4]
 8006b80:	fa01 f303 	lsl.w	r3, r1, r3
 8006b84:	431a      	orrs	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	621a      	str	r2, [r3, #32]
}
 8006b8a:	bf00      	nop
 8006b8c:	371c      	adds	r7, #28
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
	...

08006b98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d101      	bne.n	8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bac:	2302      	movs	r3, #2
 8006bae:	e050      	b.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a1c      	ldr	r2, [pc, #112]	@ (8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d018      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bfc:	d013      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a18      	ldr	r2, [pc, #96]	@ (8006c64 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d00e      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a16      	ldr	r2, [pc, #88]	@ (8006c68 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d009      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a15      	ldr	r2, [pc, #84]	@ (8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d004      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a13      	ldr	r2, [pc, #76]	@ (8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d10c      	bne.n	8006c40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	40010000 	.word	0x40010000
 8006c64:	40000400 	.word	0x40000400
 8006c68:	40000800 	.word	0x40000800
 8006c6c:	40000c00 	.word	0x40000c00
 8006c70:	40014000 	.word	0x40014000

08006c74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c9c:	b084      	sub	sp, #16
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	f107 001c 	add.w	r0, r7, #28
 8006caa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006cae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d123      	bne.n	8006cfe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006cca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006cde:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d105      	bne.n	8006cf2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f001 fae8 	bl	80082c8 <USB_CoreReset>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	73fb      	strb	r3, [r7, #15]
 8006cfc:	e01b      	b.n	8006d36 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f001 fadc 	bl	80082c8 <USB_CoreReset>
 8006d10:	4603      	mov	r3, r0
 8006d12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006d14:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d106      	bne.n	8006d2a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d20:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	639a      	str	r2, [r3, #56]	@ 0x38
 8006d28:	e005      	b.n	8006d36 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006d36:	7fbb      	ldrb	r3, [r7, #30]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d10b      	bne.n	8006d54 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f043 0206 	orr.w	r2, r3, #6
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f043 0220 	orr.w	r2, r3, #32
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d60:	b004      	add	sp, #16
 8006d62:	4770      	bx	lr

08006d64 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b087      	sub	sp, #28
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006d72:	79fb      	ldrb	r3, [r7, #7]
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d165      	bne.n	8006e44 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	4a41      	ldr	r2, [pc, #260]	@ (8006e80 <USB_SetTurnaroundTime+0x11c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d906      	bls.n	8006d8e <USB_SetTurnaroundTime+0x2a>
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	4a40      	ldr	r2, [pc, #256]	@ (8006e84 <USB_SetTurnaroundTime+0x120>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d202      	bcs.n	8006d8e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006d88:	230f      	movs	r3, #15
 8006d8a:	617b      	str	r3, [r7, #20]
 8006d8c:	e062      	b.n	8006e54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	4a3c      	ldr	r2, [pc, #240]	@ (8006e84 <USB_SetTurnaroundTime+0x120>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d306      	bcc.n	8006da4 <USB_SetTurnaroundTime+0x40>
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	4a3b      	ldr	r2, [pc, #236]	@ (8006e88 <USB_SetTurnaroundTime+0x124>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d202      	bcs.n	8006da4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006d9e:	230e      	movs	r3, #14
 8006da0:	617b      	str	r3, [r7, #20]
 8006da2:	e057      	b.n	8006e54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	4a38      	ldr	r2, [pc, #224]	@ (8006e88 <USB_SetTurnaroundTime+0x124>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d306      	bcc.n	8006dba <USB_SetTurnaroundTime+0x56>
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	4a37      	ldr	r2, [pc, #220]	@ (8006e8c <USB_SetTurnaroundTime+0x128>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d202      	bcs.n	8006dba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006db4:	230d      	movs	r3, #13
 8006db6:	617b      	str	r3, [r7, #20]
 8006db8:	e04c      	b.n	8006e54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	4a33      	ldr	r2, [pc, #204]	@ (8006e8c <USB_SetTurnaroundTime+0x128>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d306      	bcc.n	8006dd0 <USB_SetTurnaroundTime+0x6c>
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	4a32      	ldr	r2, [pc, #200]	@ (8006e90 <USB_SetTurnaroundTime+0x12c>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d802      	bhi.n	8006dd0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006dca:	230c      	movs	r3, #12
 8006dcc:	617b      	str	r3, [r7, #20]
 8006dce:	e041      	b.n	8006e54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	4a2f      	ldr	r2, [pc, #188]	@ (8006e90 <USB_SetTurnaroundTime+0x12c>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d906      	bls.n	8006de6 <USB_SetTurnaroundTime+0x82>
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	4a2e      	ldr	r2, [pc, #184]	@ (8006e94 <USB_SetTurnaroundTime+0x130>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d802      	bhi.n	8006de6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006de0:	230b      	movs	r3, #11
 8006de2:	617b      	str	r3, [r7, #20]
 8006de4:	e036      	b.n	8006e54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	4a2a      	ldr	r2, [pc, #168]	@ (8006e94 <USB_SetTurnaroundTime+0x130>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d906      	bls.n	8006dfc <USB_SetTurnaroundTime+0x98>
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	4a29      	ldr	r2, [pc, #164]	@ (8006e98 <USB_SetTurnaroundTime+0x134>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d802      	bhi.n	8006dfc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006df6:	230a      	movs	r3, #10
 8006df8:	617b      	str	r3, [r7, #20]
 8006dfa:	e02b      	b.n	8006e54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	4a26      	ldr	r2, [pc, #152]	@ (8006e98 <USB_SetTurnaroundTime+0x134>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d906      	bls.n	8006e12 <USB_SetTurnaroundTime+0xae>
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	4a25      	ldr	r2, [pc, #148]	@ (8006e9c <USB_SetTurnaroundTime+0x138>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d202      	bcs.n	8006e12 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006e0c:	2309      	movs	r3, #9
 8006e0e:	617b      	str	r3, [r7, #20]
 8006e10:	e020      	b.n	8006e54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	4a21      	ldr	r2, [pc, #132]	@ (8006e9c <USB_SetTurnaroundTime+0x138>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d306      	bcc.n	8006e28 <USB_SetTurnaroundTime+0xc4>
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	4a20      	ldr	r2, [pc, #128]	@ (8006ea0 <USB_SetTurnaroundTime+0x13c>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d802      	bhi.n	8006e28 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006e22:	2308      	movs	r3, #8
 8006e24:	617b      	str	r3, [r7, #20]
 8006e26:	e015      	b.n	8006e54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	4a1d      	ldr	r2, [pc, #116]	@ (8006ea0 <USB_SetTurnaroundTime+0x13c>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d906      	bls.n	8006e3e <USB_SetTurnaroundTime+0xda>
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	4a1c      	ldr	r2, [pc, #112]	@ (8006ea4 <USB_SetTurnaroundTime+0x140>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d202      	bcs.n	8006e3e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006e38:	2307      	movs	r3, #7
 8006e3a:	617b      	str	r3, [r7, #20]
 8006e3c:	e00a      	b.n	8006e54 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006e3e:	2306      	movs	r3, #6
 8006e40:	617b      	str	r3, [r7, #20]
 8006e42:	e007      	b.n	8006e54 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006e44:	79fb      	ldrb	r3, [r7, #7]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d102      	bne.n	8006e50 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006e4a:	2309      	movs	r3, #9
 8006e4c:	617b      	str	r3, [r7, #20]
 8006e4e:	e001      	b.n	8006e54 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006e50:	2309      	movs	r3, #9
 8006e52:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	68da      	ldr	r2, [r3, #12]
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	029b      	lsls	r3, r3, #10
 8006e68:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006e6c:	431a      	orrs	r2, r3
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	371c      	adds	r7, #28
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	00d8acbf 	.word	0x00d8acbf
 8006e84:	00e4e1c0 	.word	0x00e4e1c0
 8006e88:	00f42400 	.word	0x00f42400
 8006e8c:	01067380 	.word	0x01067380
 8006e90:	011a499f 	.word	0x011a499f
 8006e94:	01312cff 	.word	0x01312cff
 8006e98:	014ca43f 	.word	0x014ca43f
 8006e9c:	016e3600 	.word	0x016e3600
 8006ea0:	01a6ab1f 	.word	0x01a6ab1f
 8006ea4:	01e84800 	.word	0x01e84800

08006ea8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f043 0201 	orr.w	r2, r3, #1
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b083      	sub	sp, #12
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f023 0201 	bic.w	r2, r3, #1
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f08:	78fb      	ldrb	r3, [r7, #3]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d115      	bne.n	8006f3a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006f1a:	200a      	movs	r0, #10
 8006f1c:	f7fb fa7a 	bl	8002414 <HAL_Delay>
      ms += 10U;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	330a      	adds	r3, #10
 8006f24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f001 f93f 	bl	80081aa <USB_GetMode>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d01e      	beq.n	8006f70 <USB_SetCurrentMode+0x84>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2bc7      	cmp	r3, #199	@ 0xc7
 8006f36:	d9f0      	bls.n	8006f1a <USB_SetCurrentMode+0x2e>
 8006f38:	e01a      	b.n	8006f70 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f3a:	78fb      	ldrb	r3, [r7, #3]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d115      	bne.n	8006f6c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006f4c:	200a      	movs	r0, #10
 8006f4e:	f7fb fa61 	bl	8002414 <HAL_Delay>
      ms += 10U;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	330a      	adds	r3, #10
 8006f56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f001 f926 	bl	80081aa <USB_GetMode>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d005      	beq.n	8006f70 <USB_SetCurrentMode+0x84>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2bc7      	cmp	r3, #199	@ 0xc7
 8006f68:	d9f0      	bls.n	8006f4c <USB_SetCurrentMode+0x60>
 8006f6a:	e001      	b.n	8006f70 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e005      	b.n	8006f7c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2bc8      	cmp	r3, #200	@ 0xc8
 8006f74:	d101      	bne.n	8006f7a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e000      	b.n	8006f7c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f84:	b084      	sub	sp, #16
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b086      	sub	sp, #24
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
 8006f8e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006f92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	613b      	str	r3, [r7, #16]
 8006fa2:	e009      	b.n	8006fb8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	3340      	adds	r3, #64	@ 0x40
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	2200      	movs	r2, #0
 8006fb0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	613b      	str	r3, [r7, #16]
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	2b0e      	cmp	r3, #14
 8006fbc:	d9f2      	bls.n	8006fa4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006fbe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d11c      	bne.n	8007000 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fd4:	f043 0302 	orr.w	r3, r3, #2
 8006fd8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fde:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fea:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	639a      	str	r2, [r3, #56]	@ 0x38
 8006ffe:	e00b      	b.n	8007018 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007004:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007010:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800701e:	461a      	mov	r2, r3
 8007020:	2300      	movs	r3, #0
 8007022:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007024:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007028:	2b01      	cmp	r3, #1
 800702a:	d10d      	bne.n	8007048 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800702c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007030:	2b00      	cmp	r3, #0
 8007032:	d104      	bne.n	800703e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007034:	2100      	movs	r1, #0
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f968 	bl	800730c <USB_SetDevSpeed>
 800703c:	e008      	b.n	8007050 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800703e:	2101      	movs	r1, #1
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f963 	bl	800730c <USB_SetDevSpeed>
 8007046:	e003      	b.n	8007050 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007048:	2103      	movs	r1, #3
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f95e 	bl	800730c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007050:	2110      	movs	r1, #16
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f8fa 	bl	800724c <USB_FlushTxFifo>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f924 	bl	80072b0 <USB_FlushRxFifo>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d001      	beq.n	8007072 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007078:	461a      	mov	r2, r3
 800707a:	2300      	movs	r3, #0
 800707c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007084:	461a      	mov	r2, r3
 8007086:	2300      	movs	r3, #0
 8007088:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007090:	461a      	mov	r2, r3
 8007092:	2300      	movs	r3, #0
 8007094:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007096:	2300      	movs	r3, #0
 8007098:	613b      	str	r3, [r7, #16]
 800709a:	e043      	b.n	8007124 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	015a      	lsls	r2, r3, #5
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	4413      	add	r3, r2
 80070a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070b2:	d118      	bne.n	80070e6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10a      	bne.n	80070d0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	015a      	lsls	r2, r3, #5
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070c6:	461a      	mov	r2, r3
 80070c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	e013      	b.n	80070f8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070dc:	461a      	mov	r2, r3
 80070de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80070e2:	6013      	str	r3, [r2, #0]
 80070e4:	e008      	b.n	80070f8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	015a      	lsls	r2, r3, #5
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	4413      	add	r3, r2
 80070ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070f2:	461a      	mov	r2, r3
 80070f4:	2300      	movs	r3, #0
 80070f6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007104:	461a      	mov	r2, r3
 8007106:	2300      	movs	r3, #0
 8007108:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	4413      	add	r3, r2
 8007112:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007116:	461a      	mov	r2, r3
 8007118:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800711c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	3301      	adds	r3, #1
 8007122:	613b      	str	r3, [r7, #16]
 8007124:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007128:	461a      	mov	r2, r3
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	4293      	cmp	r3, r2
 800712e:	d3b5      	bcc.n	800709c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007130:	2300      	movs	r3, #0
 8007132:	613b      	str	r3, [r7, #16]
 8007134:	e043      	b.n	80071be <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	4413      	add	r3, r2
 800713e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007148:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800714c:	d118      	bne.n	8007180 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10a      	bne.n	800716a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4413      	add	r3, r2
 800715c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007160:	461a      	mov	r2, r3
 8007162:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007166:	6013      	str	r3, [r2, #0]
 8007168:	e013      	b.n	8007192 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	015a      	lsls	r2, r3, #5
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	4413      	add	r3, r2
 8007172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007176:	461a      	mov	r2, r3
 8007178:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800717c:	6013      	str	r3, [r2, #0]
 800717e:	e008      	b.n	8007192 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	015a      	lsls	r2, r3, #5
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	4413      	add	r3, r2
 8007188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800718c:	461a      	mov	r2, r3
 800718e:	2300      	movs	r3, #0
 8007190:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	015a      	lsls	r2, r3, #5
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	4413      	add	r3, r2
 800719a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800719e:	461a      	mov	r2, r3
 80071a0:	2300      	movs	r3, #0
 80071a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071b0:	461a      	mov	r2, r3
 80071b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80071b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	3301      	adds	r3, #1
 80071bc:	613b      	str	r3, [r7, #16]
 80071be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80071c2:	461a      	mov	r2, r3
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d3b5      	bcc.n	8007136 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071dc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80071ea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80071ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d105      	bne.n	8007200 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	f043 0210 	orr.w	r2, r3, #16
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	699a      	ldr	r2, [r3, #24]
 8007204:	4b10      	ldr	r3, [pc, #64]	@ (8007248 <USB_DevInit+0x2c4>)
 8007206:	4313      	orrs	r3, r2
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800720c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007210:	2b00      	cmp	r3, #0
 8007212:	d005      	beq.n	8007220 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	f043 0208 	orr.w	r2, r3, #8
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007220:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007224:	2b01      	cmp	r3, #1
 8007226:	d107      	bne.n	8007238 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007230:	f043 0304 	orr.w	r3, r3, #4
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007238:	7dfb      	ldrb	r3, [r7, #23]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007244:	b004      	add	sp, #16
 8007246:	4770      	bx	lr
 8007248:	803c3800 	.word	0x803c3800

0800724c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007256:	2300      	movs	r3, #0
 8007258:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	3301      	adds	r3, #1
 800725e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007266:	d901      	bls.n	800726c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	e01b      	b.n	80072a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	daf2      	bge.n	800725a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007274:	2300      	movs	r3, #0
 8007276:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	019b      	lsls	r3, r3, #6
 800727c:	f043 0220 	orr.w	r2, r3, #32
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	3301      	adds	r3, #1
 8007288:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007290:	d901      	bls.n	8007296 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e006      	b.n	80072a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	f003 0320 	and.w	r3, r3, #32
 800729e:	2b20      	cmp	r3, #32
 80072a0:	d0f0      	beq.n	8007284 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	3301      	adds	r3, #1
 80072c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072c8:	d901      	bls.n	80072ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e018      	b.n	8007300 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	daf2      	bge.n	80072bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2210      	movs	r2, #16
 80072de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	3301      	adds	r3, #1
 80072e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072ec:	d901      	bls.n	80072f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e006      	b.n	8007300 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	f003 0310 	and.w	r3, r3, #16
 80072fa:	2b10      	cmp	r3, #16
 80072fc:	d0f0      	beq.n	80072e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	460b      	mov	r3, r1
 8007316:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	78fb      	ldrb	r3, [r7, #3]
 8007326:	68f9      	ldr	r1, [r7, #12]
 8007328:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800732c:	4313      	orrs	r3, r2
 800732e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3714      	adds	r7, #20
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800733e:	b480      	push	{r7}
 8007340:	b087      	sub	sp, #28
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f003 0306 	and.w	r3, r3, #6
 8007356:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d102      	bne.n	8007364 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800735e:	2300      	movs	r3, #0
 8007360:	75fb      	strb	r3, [r7, #23]
 8007362:	e00a      	b.n	800737a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2b02      	cmp	r3, #2
 8007368:	d002      	beq.n	8007370 <USB_GetDevSpeed+0x32>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2b06      	cmp	r3, #6
 800736e:	d102      	bne.n	8007376 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007370:	2302      	movs	r3, #2
 8007372:	75fb      	strb	r3, [r7, #23]
 8007374:	e001      	b.n	800737a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007376:	230f      	movs	r3, #15
 8007378:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800737a:	7dfb      	ldrb	r3, [r7, #23]
}
 800737c:	4618      	mov	r0, r3
 800737e:	371c      	adds	r7, #28
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	785b      	ldrb	r3, [r3, #1]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d13a      	bne.n	800741a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073aa:	69da      	ldr	r2, [r3, #28]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	f003 030f 	and.w	r3, r3, #15
 80073b4:	2101      	movs	r1, #1
 80073b6:	fa01 f303 	lsl.w	r3, r1, r3
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	68f9      	ldr	r1, [r7, #12]
 80073be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073c2:	4313      	orrs	r3, r2
 80073c4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d155      	bne.n	8007488 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	791b      	ldrb	r3, [r3, #4]
 80073f6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80073f8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	059b      	lsls	r3, r3, #22
 80073fe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007400:	4313      	orrs	r3, r2
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	0151      	lsls	r1, r2, #5
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	440a      	add	r2, r1
 800740a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800740e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007412:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007416:	6013      	str	r3, [r2, #0]
 8007418:	e036      	b.n	8007488 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007420:	69da      	ldr	r2, [r3, #28]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	f003 030f 	and.w	r3, r3, #15
 800742a:	2101      	movs	r1, #1
 800742c:	fa01 f303 	lsl.w	r3, r1, r3
 8007430:	041b      	lsls	r3, r3, #16
 8007432:	68f9      	ldr	r1, [r7, #12]
 8007434:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007438:	4313      	orrs	r3, r2
 800743a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	015a      	lsls	r2, r3, #5
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	4413      	add	r3, r2
 8007444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d11a      	bne.n	8007488 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	015a      	lsls	r2, r3, #5
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	4413      	add	r3, r2
 800745a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	791b      	ldrb	r3, [r3, #4]
 800746c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800746e:	430b      	orrs	r3, r1
 8007470:	4313      	orrs	r3, r2
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	0151      	lsls	r1, r2, #5
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	440a      	add	r2, r1
 800747a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800747e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007482:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007486:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
	...

08007498 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	785b      	ldrb	r3, [r3, #1]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d161      	bne.n	8007578 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	015a      	lsls	r2, r3, #5
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	4413      	add	r3, r2
 80074bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074ca:	d11f      	bne.n	800750c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	0151      	lsls	r1, r2, #5
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	440a      	add	r2, r1
 80074e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80074ea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68ba      	ldr	r2, [r7, #8]
 80074fc:	0151      	lsls	r1, r2, #5
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	440a      	add	r2, r1
 8007502:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007506:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800750a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007512:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	f003 030f 	and.w	r3, r3, #15
 800751c:	2101      	movs	r1, #1
 800751e:	fa01 f303 	lsl.w	r3, r1, r3
 8007522:	b29b      	uxth	r3, r3
 8007524:	43db      	mvns	r3, r3
 8007526:	68f9      	ldr	r1, [r7, #12]
 8007528:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800752c:	4013      	ands	r3, r2
 800752e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007536:	69da      	ldr	r2, [r3, #28]
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	f003 030f 	and.w	r3, r3, #15
 8007540:	2101      	movs	r1, #1
 8007542:	fa01 f303 	lsl.w	r3, r1, r3
 8007546:	b29b      	uxth	r3, r3
 8007548:	43db      	mvns	r3, r3
 800754a:	68f9      	ldr	r1, [r7, #12]
 800754c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007550:	4013      	ands	r3, r2
 8007552:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	015a      	lsls	r2, r3, #5
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	4413      	add	r3, r2
 800755c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	0159      	lsls	r1, r3, #5
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	440b      	add	r3, r1
 800756a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800756e:	4619      	mov	r1, r3
 8007570:	4b35      	ldr	r3, [pc, #212]	@ (8007648 <USB_DeactivateEndpoint+0x1b0>)
 8007572:	4013      	ands	r3, r2
 8007574:	600b      	str	r3, [r1, #0]
 8007576:	e060      	b.n	800763a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	015a      	lsls	r2, r3, #5
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4413      	add	r3, r2
 8007580:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800758a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800758e:	d11f      	bne.n	80075d0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4413      	add	r3, r2
 8007598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	0151      	lsls	r1, r2, #5
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	440a      	add	r2, r1
 80075a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80075ae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	015a      	lsls	r2, r3, #5
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68ba      	ldr	r2, [r7, #8]
 80075c0:	0151      	lsls	r1, r2, #5
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	440a      	add	r2, r1
 80075c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80075ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	f003 030f 	and.w	r3, r3, #15
 80075e0:	2101      	movs	r1, #1
 80075e2:	fa01 f303 	lsl.w	r3, r1, r3
 80075e6:	041b      	lsls	r3, r3, #16
 80075e8:	43db      	mvns	r3, r3
 80075ea:	68f9      	ldr	r1, [r7, #12]
 80075ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80075f0:	4013      	ands	r3, r2
 80075f2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075fa:	69da      	ldr	r2, [r3, #28]
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	f003 030f 	and.w	r3, r3, #15
 8007604:	2101      	movs	r1, #1
 8007606:	fa01 f303 	lsl.w	r3, r1, r3
 800760a:	041b      	lsls	r3, r3, #16
 800760c:	43db      	mvns	r3, r3
 800760e:	68f9      	ldr	r1, [r7, #12]
 8007610:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007614:	4013      	ands	r3, r2
 8007616:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	0159      	lsls	r1, r3, #5
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	440b      	add	r3, r1
 800762e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007632:	4619      	mov	r1, r3
 8007634:	4b05      	ldr	r3, [pc, #20]	@ (800764c <USB_DeactivateEndpoint+0x1b4>)
 8007636:	4013      	ands	r3, r2
 8007638:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	ec337800 	.word	0xec337800
 800764c:	eff37800 	.word	0xeff37800

08007650 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b08a      	sub	sp, #40	@ 0x28
 8007654:	af02      	add	r7, sp, #8
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	4613      	mov	r3, r2
 800765c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	785b      	ldrb	r3, [r3, #1]
 800766c:	2b01      	cmp	r3, #1
 800766e:	f040 817f 	bne.w	8007970 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d132      	bne.n	80076e0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	4413      	add	r3, r2
 8007682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	69ba      	ldr	r2, [r7, #24]
 800768a:	0151      	lsls	r1, r2, #5
 800768c:	69fa      	ldr	r2, [r7, #28]
 800768e:	440a      	add	r2, r1
 8007690:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007694:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007698:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800769c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	015a      	lsls	r2, r3, #5
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	69ba      	ldr	r2, [r7, #24]
 80076ae:	0151      	lsls	r1, r2, #5
 80076b0:	69fa      	ldr	r2, [r7, #28]
 80076b2:	440a      	add	r2, r1
 80076b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80076bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	015a      	lsls	r2, r3, #5
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	4413      	add	r3, r2
 80076c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	69ba      	ldr	r2, [r7, #24]
 80076ce:	0151      	lsls	r1, r2, #5
 80076d0:	69fa      	ldr	r2, [r7, #28]
 80076d2:	440a      	add	r2, r1
 80076d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076d8:	0cdb      	lsrs	r3, r3, #19
 80076da:	04db      	lsls	r3, r3, #19
 80076dc:	6113      	str	r3, [r2, #16]
 80076de:	e097      	b.n	8007810 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	015a      	lsls	r2, r3, #5
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	69ba      	ldr	r2, [r7, #24]
 80076f0:	0151      	lsls	r1, r2, #5
 80076f2:	69fa      	ldr	r2, [r7, #28]
 80076f4:	440a      	add	r2, r1
 80076f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076fa:	0cdb      	lsrs	r3, r3, #19
 80076fc:	04db      	lsls	r3, r3, #19
 80076fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	015a      	lsls	r2, r3, #5
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	4413      	add	r3, r2
 8007708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	69ba      	ldr	r2, [r7, #24]
 8007710:	0151      	lsls	r1, r2, #5
 8007712:	69fa      	ldr	r2, [r7, #28]
 8007714:	440a      	add	r2, r1
 8007716:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800771a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800771e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007722:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d11a      	bne.n	8007760 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	691a      	ldr	r2, [r3, #16]
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	429a      	cmp	r2, r3
 8007734:	d903      	bls.n	800773e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	689a      	ldr	r2, [r3, #8]
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	015a      	lsls	r2, r3, #5
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	4413      	add	r3, r2
 8007746:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	69ba      	ldr	r2, [r7, #24]
 800774e:	0151      	lsls	r1, r2, #5
 8007750:	69fa      	ldr	r2, [r7, #28]
 8007752:	440a      	add	r2, r1
 8007754:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007758:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800775c:	6113      	str	r3, [r2, #16]
 800775e:	e044      	b.n	80077ea <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	691a      	ldr	r2, [r3, #16]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	4413      	add	r3, r2
 800776a:	1e5a      	subs	r2, r3, #1
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	fbb2 f3f3 	udiv	r3, r2, r3
 8007774:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	015a      	lsls	r2, r3, #5
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	4413      	add	r3, r2
 800777e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007782:	691a      	ldr	r2, [r3, #16]
 8007784:	8afb      	ldrh	r3, [r7, #22]
 8007786:	04d9      	lsls	r1, r3, #19
 8007788:	4ba4      	ldr	r3, [pc, #656]	@ (8007a1c <USB_EPStartXfer+0x3cc>)
 800778a:	400b      	ands	r3, r1
 800778c:	69b9      	ldr	r1, [r7, #24]
 800778e:	0148      	lsls	r0, r1, #5
 8007790:	69f9      	ldr	r1, [r7, #28]
 8007792:	4401      	add	r1, r0
 8007794:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007798:	4313      	orrs	r3, r2
 800779a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	791b      	ldrb	r3, [r3, #4]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d122      	bne.n	80077ea <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	015a      	lsls	r2, r3, #5
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	4413      	add	r3, r2
 80077ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	69ba      	ldr	r2, [r7, #24]
 80077b4:	0151      	lsls	r1, r2, #5
 80077b6:	69fa      	ldr	r2, [r7, #28]
 80077b8:	440a      	add	r2, r1
 80077ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077be:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80077c2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	015a      	lsls	r2, r3, #5
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	4413      	add	r3, r2
 80077cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077d0:	691a      	ldr	r2, [r3, #16]
 80077d2:	8afb      	ldrh	r3, [r7, #22]
 80077d4:	075b      	lsls	r3, r3, #29
 80077d6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80077da:	69b9      	ldr	r1, [r7, #24]
 80077dc:	0148      	lsls	r0, r1, #5
 80077de:	69f9      	ldr	r1, [r7, #28]
 80077e0:	4401      	add	r1, r0
 80077e2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80077e6:	4313      	orrs	r3, r2
 80077e8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	015a      	lsls	r2, r3, #5
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	4413      	add	r3, r2
 80077f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077f6:	691a      	ldr	r2, [r3, #16]
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007800:	69b9      	ldr	r1, [r7, #24]
 8007802:	0148      	lsls	r0, r1, #5
 8007804:	69f9      	ldr	r1, [r7, #28]
 8007806:	4401      	add	r1, r0
 8007808:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800780c:	4313      	orrs	r3, r2
 800780e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007810:	79fb      	ldrb	r3, [r7, #7]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d14b      	bne.n	80078ae <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d009      	beq.n	8007832 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	015a      	lsls	r2, r3, #5
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	4413      	add	r3, r2
 8007826:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800782a:	461a      	mov	r2, r3
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	69db      	ldr	r3, [r3, #28]
 8007830:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	791b      	ldrb	r3, [r3, #4]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d128      	bne.n	800788c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007846:	2b00      	cmp	r3, #0
 8007848:	d110      	bne.n	800786c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	015a      	lsls	r2, r3, #5
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	4413      	add	r3, r2
 8007852:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	69ba      	ldr	r2, [r7, #24]
 800785a:	0151      	lsls	r1, r2, #5
 800785c:	69fa      	ldr	r2, [r7, #28]
 800785e:	440a      	add	r2, r1
 8007860:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007864:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007868:	6013      	str	r3, [r2, #0]
 800786a:	e00f      	b.n	800788c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	69ba      	ldr	r2, [r7, #24]
 800787c:	0151      	lsls	r1, r2, #5
 800787e:	69fa      	ldr	r2, [r7, #28]
 8007880:	440a      	add	r2, r1
 8007882:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800788a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	4413      	add	r3, r2
 8007894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	69ba      	ldr	r2, [r7, #24]
 800789c:	0151      	lsls	r1, r2, #5
 800789e:	69fa      	ldr	r2, [r7, #28]
 80078a0:	440a      	add	r2, r1
 80078a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078a6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80078aa:	6013      	str	r3, [r2, #0]
 80078ac:	e166      	b.n	8007b7c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	015a      	lsls	r2, r3, #5
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	4413      	add	r3, r2
 80078b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	69ba      	ldr	r2, [r7, #24]
 80078be:	0151      	lsls	r1, r2, #5
 80078c0:	69fa      	ldr	r2, [r7, #28]
 80078c2:	440a      	add	r2, r1
 80078c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078c8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80078cc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	791b      	ldrb	r3, [r3, #4]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d015      	beq.n	8007902 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f000 814e 	beq.w	8007b7c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	f003 030f 	and.w	r3, r3, #15
 80078f0:	2101      	movs	r1, #1
 80078f2:	fa01 f303 	lsl.w	r3, r1, r3
 80078f6:	69f9      	ldr	r1, [r7, #28]
 80078f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078fc:	4313      	orrs	r3, r2
 80078fe:	634b      	str	r3, [r1, #52]	@ 0x34
 8007900:	e13c      	b.n	8007b7c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800790e:	2b00      	cmp	r3, #0
 8007910:	d110      	bne.n	8007934 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	015a      	lsls	r2, r3, #5
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	4413      	add	r3, r2
 800791a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	69ba      	ldr	r2, [r7, #24]
 8007922:	0151      	lsls	r1, r2, #5
 8007924:	69fa      	ldr	r2, [r7, #28]
 8007926:	440a      	add	r2, r1
 8007928:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800792c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007930:	6013      	str	r3, [r2, #0]
 8007932:	e00f      	b.n	8007954 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	4413      	add	r3, r2
 800793c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	69ba      	ldr	r2, [r7, #24]
 8007944:	0151      	lsls	r1, r2, #5
 8007946:	69fa      	ldr	r2, [r7, #28]
 8007948:	440a      	add	r2, r1
 800794a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800794e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007952:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	68d9      	ldr	r1, [r3, #12]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	781a      	ldrb	r2, [r3, #0]
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	b298      	uxth	r0, r3
 8007962:	79fb      	ldrb	r3, [r7, #7]
 8007964:	9300      	str	r3, [sp, #0]
 8007966:	4603      	mov	r3, r0
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f000 f9b9 	bl	8007ce0 <USB_WritePacket>
 800796e:	e105      	b.n	8007b7c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	015a      	lsls	r2, r3, #5
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	4413      	add	r3, r2
 8007978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	69ba      	ldr	r2, [r7, #24]
 8007980:	0151      	lsls	r1, r2, #5
 8007982:	69fa      	ldr	r2, [r7, #28]
 8007984:	440a      	add	r2, r1
 8007986:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800798a:	0cdb      	lsrs	r3, r3, #19
 800798c:	04db      	lsls	r3, r3, #19
 800798e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	015a      	lsls	r2, r3, #5
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	4413      	add	r3, r2
 8007998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	69ba      	ldr	r2, [r7, #24]
 80079a0:	0151      	lsls	r1, r2, #5
 80079a2:	69fa      	ldr	r2, [r7, #28]
 80079a4:	440a      	add	r2, r1
 80079a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079aa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80079ae:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80079b2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d132      	bne.n	8007a20 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d003      	beq.n	80079ca <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	689a      	ldr	r2, [r3, #8]
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	689a      	ldr	r2, [r3, #8]
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	015a      	lsls	r2, r3, #5
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	4413      	add	r3, r2
 80079da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079de:	691a      	ldr	r2, [r3, #16]
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	6a1b      	ldr	r3, [r3, #32]
 80079e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079e8:	69b9      	ldr	r1, [r7, #24]
 80079ea:	0148      	lsls	r0, r1, #5
 80079ec:	69f9      	ldr	r1, [r7, #28]
 80079ee:	4401      	add	r1, r0
 80079f0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80079f4:	4313      	orrs	r3, r2
 80079f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	69ba      	ldr	r2, [r7, #24]
 8007a08:	0151      	lsls	r1, r2, #5
 8007a0a:	69fa      	ldr	r2, [r7, #28]
 8007a0c:	440a      	add	r2, r1
 8007a0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a12:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a16:	6113      	str	r3, [r2, #16]
 8007a18:	e062      	b.n	8007ae0 <USB_EPStartXfer+0x490>
 8007a1a:	bf00      	nop
 8007a1c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d123      	bne.n	8007a70 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	015a      	lsls	r2, r3, #5
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	4413      	add	r3, r2
 8007a30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a34:	691a      	ldr	r2, [r3, #16]
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a3e:	69b9      	ldr	r1, [r7, #24]
 8007a40:	0148      	lsls	r0, r1, #5
 8007a42:	69f9      	ldr	r1, [r7, #28]
 8007a44:	4401      	add	r1, r0
 8007a46:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	015a      	lsls	r2, r3, #5
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	4413      	add	r3, r2
 8007a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	69ba      	ldr	r2, [r7, #24]
 8007a5e:	0151      	lsls	r1, r2, #5
 8007a60:	69fa      	ldr	r2, [r7, #28]
 8007a62:	440a      	add	r2, r1
 8007a64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a6c:	6113      	str	r3, [r2, #16]
 8007a6e:	e037      	b.n	8007ae0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	691a      	ldr	r2, [r3, #16]
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	4413      	add	r3, r2
 8007a7a:	1e5a      	subs	r2, r3, #1
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a84:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	8afa      	ldrh	r2, [r7, #22]
 8007a8c:	fb03 f202 	mul.w	r2, r3, r2
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	015a      	lsls	r2, r3, #5
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aa0:	691a      	ldr	r2, [r3, #16]
 8007aa2:	8afb      	ldrh	r3, [r7, #22]
 8007aa4:	04d9      	lsls	r1, r3, #19
 8007aa6:	4b38      	ldr	r3, [pc, #224]	@ (8007b88 <USB_EPStartXfer+0x538>)
 8007aa8:	400b      	ands	r3, r1
 8007aaa:	69b9      	ldr	r1, [r7, #24]
 8007aac:	0148      	lsls	r0, r1, #5
 8007aae:	69f9      	ldr	r1, [r7, #28]
 8007ab0:	4401      	add	r1, r0
 8007ab2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	015a      	lsls	r2, r3, #5
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ac6:	691a      	ldr	r2, [r3, #16]
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	6a1b      	ldr	r3, [r3, #32]
 8007acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ad0:	69b9      	ldr	r1, [r7, #24]
 8007ad2:	0148      	lsls	r0, r1, #5
 8007ad4:	69f9      	ldr	r1, [r7, #28]
 8007ad6:	4401      	add	r1, r0
 8007ad8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007adc:	4313      	orrs	r3, r2
 8007ade:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007ae0:	79fb      	ldrb	r3, [r7, #7]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d10d      	bne.n	8007b02 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d009      	beq.n	8007b02 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	68d9      	ldr	r1, [r3, #12]
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	015a      	lsls	r2, r3, #5
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	4413      	add	r3, r2
 8007afa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007afe:	460a      	mov	r2, r1
 8007b00:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	791b      	ldrb	r3, [r3, #4]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d128      	bne.n	8007b5c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d110      	bne.n	8007b3c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	015a      	lsls	r2, r3, #5
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	4413      	add	r3, r2
 8007b22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	69ba      	ldr	r2, [r7, #24]
 8007b2a:	0151      	lsls	r1, r2, #5
 8007b2c:	69fa      	ldr	r2, [r7, #28]
 8007b2e:	440a      	add	r2, r1
 8007b30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b34:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007b38:	6013      	str	r3, [r2, #0]
 8007b3a:	e00f      	b.n	8007b5c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	015a      	lsls	r2, r3, #5
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	69ba      	ldr	r2, [r7, #24]
 8007b4c:	0151      	lsls	r1, r2, #5
 8007b4e:	69fa      	ldr	r2, [r7, #28]
 8007b50:	440a      	add	r2, r1
 8007b52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b5a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	015a      	lsls	r2, r3, #5
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	69ba      	ldr	r2, [r7, #24]
 8007b6c:	0151      	lsls	r1, r2, #5
 8007b6e:	69fa      	ldr	r2, [r7, #28]
 8007b70:	440a      	add	r2, r1
 8007b72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b76:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007b7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3720      	adds	r7, #32
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	1ff80000 	.word	0x1ff80000

08007b8c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b087      	sub	sp, #28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b96:	2300      	movs	r3, #0
 8007b98:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	785b      	ldrb	r3, [r3, #1]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d14a      	bne.n	8007c40 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	015a      	lsls	r2, r3, #5
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bc2:	f040 8086 	bne.w	8007cd2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	015a      	lsls	r2, r3, #5
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	4413      	add	r3, r2
 8007bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	7812      	ldrb	r2, [r2, #0]
 8007bda:	0151      	lsls	r1, r2, #5
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	440a      	add	r2, r1
 8007be0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007be4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007be8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	7812      	ldrb	r2, [r2, #0]
 8007bfe:	0151      	lsls	r1, r2, #5
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	440a      	add	r2, r1
 8007c04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c08:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c0c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	3301      	adds	r3, #1
 8007c12:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d902      	bls.n	8007c24 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	75fb      	strb	r3, [r7, #23]
          break;
 8007c22:	e056      	b.n	8007cd2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	015a      	lsls	r2, r3, #5
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c3c:	d0e7      	beq.n	8007c0e <USB_EPStopXfer+0x82>
 8007c3e:	e048      	b.n	8007cd2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	015a      	lsls	r2, r3, #5
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	4413      	add	r3, r2
 8007c4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c58:	d13b      	bne.n	8007cd2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	015a      	lsls	r2, r3, #5
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	4413      	add	r3, r2
 8007c64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	683a      	ldr	r2, [r7, #0]
 8007c6c:	7812      	ldrb	r2, [r2, #0]
 8007c6e:	0151      	lsls	r1, r2, #5
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	440a      	add	r2, r1
 8007c74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c78:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007c7c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	015a      	lsls	r2, r3, #5
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	4413      	add	r3, r2
 8007c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	7812      	ldrb	r2, [r2, #0]
 8007c92:	0151      	lsls	r1, r2, #5
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	440a      	add	r2, r1
 8007c98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ca0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d902      	bls.n	8007cb8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	75fb      	strb	r3, [r7, #23]
          break;
 8007cb6:	e00c      	b.n	8007cd2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	015a      	lsls	r2, r3, #5
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007cd0:	d0e7      	beq.n	8007ca2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	371c      	adds	r7, #28
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b089      	sub	sp, #36	@ 0x24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	4611      	mov	r1, r2
 8007cec:	461a      	mov	r2, r3
 8007cee:	460b      	mov	r3, r1
 8007cf0:	71fb      	strb	r3, [r7, #7]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007cfe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d123      	bne.n	8007d4e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007d06:	88bb      	ldrh	r3, [r7, #4]
 8007d08:	3303      	adds	r3, #3
 8007d0a:	089b      	lsrs	r3, r3, #2
 8007d0c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007d0e:	2300      	movs	r3, #0
 8007d10:	61bb      	str	r3, [r7, #24]
 8007d12:	e018      	b.n	8007d46 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007d14:	79fb      	ldrb	r3, [r7, #7]
 8007d16:	031a      	lsls	r2, r3, #12
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d20:	461a      	mov	r2, r3
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	3301      	adds	r3, #1
 8007d32:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	3301      	adds	r3, #1
 8007d38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	3301      	adds	r3, #1
 8007d44:	61bb      	str	r3, [r7, #24]
 8007d46:	69ba      	ldr	r2, [r7, #24]
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d3e2      	bcc.n	8007d14 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3724      	adds	r7, #36	@ 0x24
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b08b      	sub	sp, #44	@ 0x2c
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	4613      	mov	r3, r2
 8007d68:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007d72:	88fb      	ldrh	r3, [r7, #6]
 8007d74:	089b      	lsrs	r3, r3, #2
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007d7a:	88fb      	ldrh	r3, [r7, #6]
 8007d7c:	f003 0303 	and.w	r3, r3, #3
 8007d80:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007d82:	2300      	movs	r3, #0
 8007d84:	623b      	str	r3, [r7, #32]
 8007d86:	e014      	b.n	8007db2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d92:	601a      	str	r2, [r3, #0]
    pDest++;
 8007d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d96:	3301      	adds	r3, #1
 8007d98:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da2:	3301      	adds	r3, #1
 8007da4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da8:	3301      	adds	r3, #1
 8007daa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007dac:	6a3b      	ldr	r3, [r7, #32]
 8007dae:	3301      	adds	r3, #1
 8007db0:	623b      	str	r3, [r7, #32]
 8007db2:	6a3a      	ldr	r2, [r7, #32]
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d3e6      	bcc.n	8007d88 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007dba:	8bfb      	ldrh	r3, [r7, #30]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d01e      	beq.n	8007dfe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dca:	461a      	mov	r2, r3
 8007dcc:	f107 0310 	add.w	r3, r7, #16
 8007dd0:	6812      	ldr	r2, [r2, #0]
 8007dd2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	00db      	lsls	r3, r3, #3
 8007ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de4:	701a      	strb	r2, [r3, #0]
      i++;
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	3301      	adds	r3, #1
 8007dea:	623b      	str	r3, [r7, #32]
      pDest++;
 8007dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dee:	3301      	adds	r3, #1
 8007df0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007df2:	8bfb      	ldrh	r3, [r7, #30]
 8007df4:	3b01      	subs	r3, #1
 8007df6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007df8:	8bfb      	ldrh	r3, [r7, #30]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1ea      	bne.n	8007dd4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	372c      	adds	r7, #44	@ 0x2c
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	785b      	ldrb	r3, [r3, #1]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d12c      	bne.n	8007e82 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	015a      	lsls	r2, r3, #5
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	4413      	add	r3, r2
 8007e30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	db12      	blt.n	8007e60 <USB_EPSetStall+0x54>
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00f      	beq.n	8007e60 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	0151      	lsls	r1, r2, #5
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	440a      	add	r2, r1
 8007e56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e5a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007e5e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	015a      	lsls	r2, r3, #5
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	4413      	add	r3, r2
 8007e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	0151      	lsls	r1, r2, #5
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	440a      	add	r2, r1
 8007e76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e7a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007e7e:	6013      	str	r3, [r2, #0]
 8007e80:	e02b      	b.n	8007eda <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	015a      	lsls	r2, r3, #5
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	4413      	add	r3, r2
 8007e8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	db12      	blt.n	8007eba <USB_EPSetStall+0xae>
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00f      	beq.n	8007eba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	015a      	lsls	r2, r3, #5
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	0151      	lsls	r1, r2, #5
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	440a      	add	r2, r1
 8007eb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007eb4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007eb8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	015a      	lsls	r2, r3, #5
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	0151      	lsls	r1, r2, #5
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	440a      	add	r2, r1
 8007ed0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ed4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007ed8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3714      	adds	r7, #20
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	785b      	ldrb	r3, [r3, #1]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d128      	bne.n	8007f56 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	015a      	lsls	r2, r3, #5
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	0151      	lsls	r1, r2, #5
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	440a      	add	r2, r1
 8007f1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f22:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	791b      	ldrb	r3, [r3, #4]
 8007f28:	2b03      	cmp	r3, #3
 8007f2a:	d003      	beq.n	8007f34 <USB_EPClearStall+0x4c>
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	791b      	ldrb	r3, [r3, #4]
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d138      	bne.n	8007fa6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	0151      	lsls	r1, r2, #5
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	440a      	add	r2, r1
 8007f4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f52:	6013      	str	r3, [r2, #0]
 8007f54:	e027      	b.n	8007fa6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	015a      	lsls	r2, r3, #5
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	0151      	lsls	r1, r2, #5
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	440a      	add	r2, r1
 8007f6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f70:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f74:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	791b      	ldrb	r3, [r3, #4]
 8007f7a:	2b03      	cmp	r3, #3
 8007f7c:	d003      	beq.n	8007f86 <USB_EPClearStall+0x9e>
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	791b      	ldrb	r3, [r3, #4]
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d10f      	bne.n	8007fa6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	015a      	lsls	r2, r3, #5
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68ba      	ldr	r2, [r7, #8]
 8007f96:	0151      	lsls	r1, r2, #5
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	440a      	add	r2, r1
 8007f9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fa4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3714      	adds	r7, #20
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68fa      	ldr	r2, [r7, #12]
 8007fce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fd2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007fd6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	78fb      	ldrb	r3, [r7, #3]
 8007fe2:	011b      	lsls	r3, r3, #4
 8007fe4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007fe8:	68f9      	ldr	r1, [r7, #12]
 8007fea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008000:	b480      	push	{r7}
 8008002:	b085      	sub	sp, #20
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800801a:	f023 0303 	bic.w	r3, r3, #3
 800801e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800802e:	f023 0302 	bic.w	r3, r3, #2
 8008032:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3714      	adds	r7, #20
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008042:	b480      	push	{r7}
 8008044:	b085      	sub	sp, #20
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800805c:	f023 0303 	bic.w	r3, r3, #3
 8008060:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008070:	f043 0302 	orr.w	r3, r3, #2
 8008074:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3714      	adds	r7, #20
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	695b      	ldr	r3, [r3, #20]
 8008090:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	4013      	ands	r3, r2
 800809a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800809c:	68fb      	ldr	r3, [r7, #12]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3714      	adds	r7, #20
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80080aa:	b480      	push	{r7}
 80080ac:	b085      	sub	sp, #20
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080c6:	69db      	ldr	r3, [r3, #28]
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	4013      	ands	r3, r2
 80080cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	0c1b      	lsrs	r3, r3, #16
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80080de:	b480      	push	{r7}
 80080e0:	b085      	sub	sp, #20
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080f0:	699b      	ldr	r3, [r3, #24]
 80080f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080fa:	69db      	ldr	r3, [r3, #28]
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	4013      	ands	r3, r2
 8008100:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	b29b      	uxth	r3, r3
}
 8008106:	4618      	mov	r0, r3
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008112:	b480      	push	{r7}
 8008114:	b085      	sub	sp, #20
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
 800811a:	460b      	mov	r3, r1
 800811c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008122:	78fb      	ldrb	r3, [r7, #3]
 8008124:	015a      	lsls	r2, r3, #5
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	4413      	add	r3, r2
 800812a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	4013      	ands	r3, r2
 800813e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008140:	68bb      	ldr	r3, [r7, #8]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800814e:	b480      	push	{r7}
 8008150:	b087      	sub	sp, #28
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	460b      	mov	r3, r1
 8008158:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800816e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008170:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008172:	78fb      	ldrb	r3, [r7, #3]
 8008174:	f003 030f 	and.w	r3, r3, #15
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	fa22 f303 	lsr.w	r3, r2, r3
 800817e:	01db      	lsls	r3, r3, #7
 8008180:	b2db      	uxtb	r3, r3
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	4313      	orrs	r3, r2
 8008186:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008188:	78fb      	ldrb	r3, [r7, #3]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	4413      	add	r3, r2
 8008190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	693a      	ldr	r2, [r7, #16]
 8008198:	4013      	ands	r3, r2
 800819a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800819c:	68bb      	ldr	r3, [r7, #8]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	371c      	adds	r7, #28
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b083      	sub	sp, #12
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	f003 0301 	and.w	r3, r3, #1
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	370c      	adds	r7, #12
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80081c6:	b480      	push	{r7}
 80081c8:	b085      	sub	sp, #20
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081e0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80081e4:	f023 0307 	bic.w	r3, r3, #7
 80081e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800820c:	b480      	push	{r7}
 800820e:	b087      	sub	sp, #28
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	460b      	mov	r3, r1
 8008216:	607a      	str	r2, [r7, #4]
 8008218:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	333c      	adds	r3, #60	@ 0x3c
 8008222:	3304      	adds	r3, #4
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	4a26      	ldr	r2, [pc, #152]	@ (80082c4 <USB_EP0_OutStart+0xb8>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d90a      	bls.n	8008246 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800823c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008240:	d101      	bne.n	8008246 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008242:	2300      	movs	r3, #0
 8008244:	e037      	b.n	80082b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800824c:	461a      	mov	r2, r3
 800824e:	2300      	movs	r3, #0
 8008250:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	697a      	ldr	r2, [r7, #20]
 800825c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008260:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008264:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	697a      	ldr	r2, [r7, #20]
 8008270:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008274:	f043 0318 	orr.w	r3, r3, #24
 8008278:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	697a      	ldr	r2, [r7, #20]
 8008284:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008288:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800828c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800828e:	7afb      	ldrb	r3, [r7, #11]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d10f      	bne.n	80082b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800829a:	461a      	mov	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	697a      	ldr	r2, [r7, #20]
 80082aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082ae:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80082b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	371c      	adds	r7, #28
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	4f54300a 	.word	0x4f54300a

080082c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082d0:	2300      	movs	r3, #0
 80082d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	3301      	adds	r3, #1
 80082d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082e0:	d901      	bls.n	80082e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e01b      	b.n	800831e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	daf2      	bge.n	80082d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80082ee:	2300      	movs	r3, #0
 80082f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	f043 0201 	orr.w	r2, r3, #1
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3301      	adds	r3, #1
 8008302:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800830a:	d901      	bls.n	8008310 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800830c:	2303      	movs	r3, #3
 800830e:	e006      	b.n	800831e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	f003 0301 	and.w	r3, r3, #1
 8008318:	2b01      	cmp	r3, #1
 800831a:	d0f0      	beq.n	80082fe <USB_CoreReset+0x36>

  return HAL_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3714      	adds	r7, #20
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr
	...

0800832c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	460b      	mov	r3, r1
 8008336:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008338:	2010      	movs	r0, #16
 800833a:	f002 f921 	bl	800a580 <USBD_static_malloc>
 800833e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d109      	bne.n	800835a <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	32b0      	adds	r2, #176	@ 0xb0
 8008350:	2100      	movs	r1, #0
 8008352:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008356:	2302      	movs	r3, #2
 8008358:	e048      	b.n	80083ec <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	32b0      	adds	r2, #176	@ 0xb0
 8008364:	68f9      	ldr	r1, [r7, #12]
 8008366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	32b0      	adds	r2, #176	@ 0xb0
 8008374:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	7c1b      	ldrb	r3, [r3, #16]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10d      	bne.n	80083a2 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008386:	4b1b      	ldr	r3, [pc, #108]	@ (80083f4 <USBD_HID_Init+0xc8>)
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	f003 020f 	and.w	r2, r3, #15
 800838e:	6879      	ldr	r1, [r7, #4]
 8008390:	4613      	mov	r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	4413      	add	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	440b      	add	r3, r1
 800839a:	3326      	adds	r3, #38	@ 0x26
 800839c:	2207      	movs	r2, #7
 800839e:	801a      	strh	r2, [r3, #0]
 80083a0:	e00c      	b.n	80083bc <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80083a2:	4b14      	ldr	r3, [pc, #80]	@ (80083f4 <USBD_HID_Init+0xc8>)
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	f003 020f 	and.w	r2, r3, #15
 80083aa:	6879      	ldr	r1, [r7, #4]
 80083ac:	4613      	mov	r3, r2
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	4413      	add	r3, r2
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	440b      	add	r3, r1
 80083b6:	3326      	adds	r3, #38	@ 0x26
 80083b8:	220a      	movs	r2, #10
 80083ba:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80083bc:	4b0d      	ldr	r3, [pc, #52]	@ (80083f4 <USBD_HID_Init+0xc8>)
 80083be:	7819      	ldrb	r1, [r3, #0]
 80083c0:	2304      	movs	r3, #4
 80083c2:	2203      	movs	r2, #3
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f001 ffca 	bl	800a35e <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80083ca:	4b0a      	ldr	r3, [pc, #40]	@ (80083f4 <USBD_HID_Init+0xc8>)
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	f003 020f 	and.w	r2, r3, #15
 80083d2:	6879      	ldr	r1, [r7, #4]
 80083d4:	4613      	mov	r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	4413      	add	r3, r2
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	440b      	add	r3, r1
 80083de:	3324      	adds	r3, #36	@ 0x24
 80083e0:	2201      	movs	r2, #1
 80083e2:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2200      	movs	r2, #0
 80083e8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	2000010e 	.word	0x2000010e

080083f8 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	460b      	mov	r3, r1
 8008402:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8008404:	4b1f      	ldr	r3, [pc, #124]	@ (8008484 <USBD_HID_DeInit+0x8c>)
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	4619      	mov	r1, r3
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f001 ffcd 	bl	800a3aa <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8008410:	4b1c      	ldr	r3, [pc, #112]	@ (8008484 <USBD_HID_DeInit+0x8c>)
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	f003 020f 	and.w	r2, r3, #15
 8008418:	6879      	ldr	r1, [r7, #4]
 800841a:	4613      	mov	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	4413      	add	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	440b      	add	r3, r1
 8008424:	3324      	adds	r3, #36	@ 0x24
 8008426:	2200      	movs	r2, #0
 8008428:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800842a:	4b16      	ldr	r3, [pc, #88]	@ (8008484 <USBD_HID_DeInit+0x8c>)
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	f003 020f 	and.w	r2, r3, #15
 8008432:	6879      	ldr	r1, [r7, #4]
 8008434:	4613      	mov	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	440b      	add	r3, r1
 800843e:	3326      	adds	r3, #38	@ 0x26
 8008440:	2200      	movs	r2, #0
 8008442:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	32b0      	adds	r2, #176	@ 0xb0
 800844e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d011      	beq.n	800847a <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	32b0      	adds	r2, #176	@ 0xb0
 8008460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008464:	4618      	mov	r0, r3
 8008466:	f002 f899 	bl	800a59c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	32b0      	adds	r2, #176	@ 0xb0
 8008474:	2100      	movs	r1, #0
 8008476:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	2000010e 	.word	0x2000010e

08008488 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	32b0      	adds	r2, #176	@ 0xb0
 800849c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084a0:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80084a6:	2300      	movs	r3, #0
 80084a8:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d101      	bne.n	80084b4 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80084b0:	2303      	movs	r3, #3
 80084b2:	e0e8      	b.n	8008686 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d046      	beq.n	800854e <USBD_HID_Setup+0xc6>
 80084c0:	2b20      	cmp	r3, #32
 80084c2:	f040 80d8 	bne.w	8008676 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	785b      	ldrb	r3, [r3, #1]
 80084ca:	3b02      	subs	r3, #2
 80084cc:	2b09      	cmp	r3, #9
 80084ce:	d836      	bhi.n	800853e <USBD_HID_Setup+0xb6>
 80084d0:	a201      	add	r2, pc, #4	@ (adr r2, 80084d8 <USBD_HID_Setup+0x50>)
 80084d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d6:	bf00      	nop
 80084d8:	0800852f 	.word	0x0800852f
 80084dc:	0800850f 	.word	0x0800850f
 80084e0:	0800853f 	.word	0x0800853f
 80084e4:	0800853f 	.word	0x0800853f
 80084e8:	0800853f 	.word	0x0800853f
 80084ec:	0800853f 	.word	0x0800853f
 80084f0:	0800853f 	.word	0x0800853f
 80084f4:	0800853f 	.word	0x0800853f
 80084f8:	0800851d 	.word	0x0800851d
 80084fc:	08008501 	.word	0x08008501
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	885b      	ldrh	r3, [r3, #2]
 8008504:	b2db      	uxtb	r3, r3
 8008506:	461a      	mov	r2, r3
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	601a      	str	r2, [r3, #0]
          break;
 800850c:	e01e      	b.n	800854c <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2201      	movs	r2, #1
 8008512:	4619      	mov	r1, r3
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f001 fbe5 	bl	8009ce4 <USBD_CtlSendData>
          break;
 800851a:	e017      	b.n	800854c <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	885b      	ldrh	r3, [r3, #2]
 8008520:	0a1b      	lsrs	r3, r3, #8
 8008522:	b29b      	uxth	r3, r3
 8008524:	b2db      	uxtb	r3, r3
 8008526:	461a      	mov	r2, r3
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	605a      	str	r2, [r3, #4]
          break;
 800852c:	e00e      	b.n	800854c <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	3304      	adds	r3, #4
 8008532:	2201      	movs	r2, #1
 8008534:	4619      	mov	r1, r3
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f001 fbd4 	bl	8009ce4 <USBD_CtlSendData>
          break;
 800853c:	e006      	b.n	800854c <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f001 fb52 	bl	8009bea <USBD_CtlError>
          ret = USBD_FAIL;
 8008546:	2303      	movs	r3, #3
 8008548:	75fb      	strb	r3, [r7, #23]
          break;
 800854a:	bf00      	nop
      }
      break;
 800854c:	e09a      	b.n	8008684 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	785b      	ldrb	r3, [r3, #1]
 8008552:	2b0b      	cmp	r3, #11
 8008554:	f200 8086 	bhi.w	8008664 <USBD_HID_Setup+0x1dc>
 8008558:	a201      	add	r2, pc, #4	@ (adr r2, 8008560 <USBD_HID_Setup+0xd8>)
 800855a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855e:	bf00      	nop
 8008560:	08008591 	.word	0x08008591
 8008564:	08008673 	.word	0x08008673
 8008568:	08008665 	.word	0x08008665
 800856c:	08008665 	.word	0x08008665
 8008570:	08008665 	.word	0x08008665
 8008574:	08008665 	.word	0x08008665
 8008578:	080085bb 	.word	0x080085bb
 800857c:	08008665 	.word	0x08008665
 8008580:	08008665 	.word	0x08008665
 8008584:	08008665 	.word	0x08008665
 8008588:	08008613 	.word	0x08008613
 800858c:	0800863d 	.word	0x0800863d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008596:	b2db      	uxtb	r3, r3
 8008598:	2b03      	cmp	r3, #3
 800859a:	d107      	bne.n	80085ac <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800859c:	f107 030a 	add.w	r3, r7, #10
 80085a0:	2202      	movs	r2, #2
 80085a2:	4619      	mov	r1, r3
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f001 fb9d 	bl	8009ce4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80085aa:	e063      	b.n	8008674 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80085ac:	6839      	ldr	r1, [r7, #0]
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f001 fb1b 	bl	8009bea <USBD_CtlError>
            ret = USBD_FAIL;
 80085b4:	2303      	movs	r3, #3
 80085b6:	75fb      	strb	r3, [r7, #23]
          break;
 80085b8:	e05c      	b.n	8008674 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	885b      	ldrh	r3, [r3, #2]
 80085be:	0a1b      	lsrs	r3, r3, #8
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	2b22      	cmp	r3, #34	@ 0x22
 80085c4:	d108      	bne.n	80085d8 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	88db      	ldrh	r3, [r3, #6]
 80085ca:	2b4a      	cmp	r3, #74	@ 0x4a
 80085cc:	bf28      	it	cs
 80085ce:	234a      	movcs	r3, #74	@ 0x4a
 80085d0:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80085d2:	4b2f      	ldr	r3, [pc, #188]	@ (8008690 <USBD_HID_Setup+0x208>)
 80085d4:	613b      	str	r3, [r7, #16]
 80085d6:	e015      	b.n	8008604 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	885b      	ldrh	r3, [r3, #2]
 80085dc:	0a1b      	lsrs	r3, r3, #8
 80085de:	b29b      	uxth	r3, r3
 80085e0:	2b21      	cmp	r3, #33	@ 0x21
 80085e2:	d108      	bne.n	80085f6 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80085e4:	4b2b      	ldr	r3, [pc, #172]	@ (8008694 <USBD_HID_Setup+0x20c>)
 80085e6:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	88db      	ldrh	r3, [r3, #6]
 80085ec:	2b09      	cmp	r3, #9
 80085ee:	bf28      	it	cs
 80085f0:	2309      	movcs	r3, #9
 80085f2:	82bb      	strh	r3, [r7, #20]
 80085f4:	e006      	b.n	8008604 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f001 faf6 	bl	8009bea <USBD_CtlError>
            ret = USBD_FAIL;
 80085fe:	2303      	movs	r3, #3
 8008600:	75fb      	strb	r3, [r7, #23]
            break;
 8008602:	e037      	b.n	8008674 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008604:	8abb      	ldrh	r3, [r7, #20]
 8008606:	461a      	mov	r2, r3
 8008608:	6939      	ldr	r1, [r7, #16]
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f001 fb6a 	bl	8009ce4 <USBD_CtlSendData>
          break;
 8008610:	e030      	b.n	8008674 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008618:	b2db      	uxtb	r3, r3
 800861a:	2b03      	cmp	r3, #3
 800861c:	d107      	bne.n	800862e <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	3308      	adds	r3, #8
 8008622:	2201      	movs	r2, #1
 8008624:	4619      	mov	r1, r3
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f001 fb5c 	bl	8009ce4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800862c:	e022      	b.n	8008674 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f001 fada 	bl	8009bea <USBD_CtlError>
            ret = USBD_FAIL;
 8008636:	2303      	movs	r3, #3
 8008638:	75fb      	strb	r3, [r7, #23]
          break;
 800863a:	e01b      	b.n	8008674 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008642:	b2db      	uxtb	r3, r3
 8008644:	2b03      	cmp	r3, #3
 8008646:	d106      	bne.n	8008656 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	885b      	ldrh	r3, [r3, #2]
 800864c:	b2db      	uxtb	r3, r3
 800864e:	461a      	mov	r2, r3
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008654:	e00e      	b.n	8008674 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008656:	6839      	ldr	r1, [r7, #0]
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f001 fac6 	bl	8009bea <USBD_CtlError>
            ret = USBD_FAIL;
 800865e:	2303      	movs	r3, #3
 8008660:	75fb      	strb	r3, [r7, #23]
          break;
 8008662:	e007      	b.n	8008674 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f001 fabf 	bl	8009bea <USBD_CtlError>
          ret = USBD_FAIL;
 800866c:	2303      	movs	r3, #3
 800866e:	75fb      	strb	r3, [r7, #23]
          break;
 8008670:	e000      	b.n	8008674 <USBD_HID_Setup+0x1ec>
          break;
 8008672:	bf00      	nop
      }
      break;
 8008674:	e006      	b.n	8008684 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8008676:	6839      	ldr	r1, [r7, #0]
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f001 fab6 	bl	8009bea <USBD_CtlError>
      ret = USBD_FAIL;
 800867e:	2303      	movs	r3, #3
 8008680:	75fb      	strb	r3, [r7, #23]
      break;
 8008682:	bf00      	nop
  }

  return (uint8_t)ret;
 8008684:	7dfb      	ldrb	r3, [r7, #23]
}
 8008686:	4618      	mov	r0, r3
 8008688:	3718      	adds	r7, #24
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	200000c4 	.word	0x200000c4
 8008694:	200000ac 	.word	0x200000ac

08008698 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b086      	sub	sp, #24
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	4613      	mov	r3, r2
 80086a4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	32b0      	adds	r2, #176	@ 0xb0
 80086b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b4:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d101      	bne.n	80086c0 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80086bc:	2303      	movs	r3, #3
 80086be:	e014      	b.n	80086ea <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	2b03      	cmp	r3, #3
 80086ca:	d10d      	bne.n	80086e8 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	7b1b      	ldrb	r3, [r3, #12]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d109      	bne.n	80086e8 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	2201      	movs	r2, #1
 80086d8:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 80086da:	4b06      	ldr	r3, [pc, #24]	@ (80086f4 <USBD_HID_SendReport+0x5c>)
 80086dc:	7819      	ldrb	r1, [r3, #0]
 80086de:	88fb      	ldrh	r3, [r7, #6]
 80086e0:	68ba      	ldr	r2, [r7, #8]
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f001 ff09 	bl	800a4fa <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3718      	adds	r7, #24
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	2000010e 	.word	0x2000010e

080086f8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8008700:	2181      	movs	r1, #129	@ 0x81
 8008702:	4809      	ldr	r0, [pc, #36]	@ (8008728 <USBD_HID_GetFSCfgDesc+0x30>)
 8008704:	f000 fc3b 	bl	8008f7e <USBD_GetEpDesc>
 8008708:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d002      	beq.n	8008716 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	220a      	movs	r2, #10
 8008714:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2265      	movs	r2, #101	@ 0x65
 800871a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800871c:	4b02      	ldr	r3, [pc, #8]	@ (8008728 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800871e:	4618      	mov	r0, r3
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	20000044 	.word	0x20000044

0800872c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8008734:	2181      	movs	r1, #129	@ 0x81
 8008736:	4809      	ldr	r0, [pc, #36]	@ (800875c <USBD_HID_GetHSCfgDesc+0x30>)
 8008738:	f000 fc21 	bl	8008f7e <USBD_GetEpDesc>
 800873c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d002      	beq.n	800874a <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2207      	movs	r2, #7
 8008748:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2265      	movs	r2, #101	@ 0x65
 800874e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008750:	4b02      	ldr	r3, [pc, #8]	@ (800875c <USBD_HID_GetHSCfgDesc+0x30>)
}
 8008752:	4618      	mov	r0, r3
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	20000044 	.word	0x20000044

08008760 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8008768:	2181      	movs	r1, #129	@ 0x81
 800876a:	4809      	ldr	r0, [pc, #36]	@ (8008790 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 800876c:	f000 fc07 	bl	8008f7e <USBD_GetEpDesc>
 8008770:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d002      	beq.n	800877e <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	220a      	movs	r2, #10
 800877c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2265      	movs	r2, #101	@ 0x65
 8008782:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008784:	4b02      	ldr	r3, [pc, #8]	@ (8008790 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	20000044 	.word	0x20000044

08008794 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	460b      	mov	r3, r1
 800879e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	32b0      	adds	r2, #176	@ 0xb0
 80087aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ae:	2200      	movs	r2, #0
 80087b0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	220a      	movs	r2, #10
 80087cc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80087ce:	4b03      	ldr	r3, [pc, #12]	@ (80087dc <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr
 80087dc:	200000b8 	.word	0x200000b8

080087e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b086      	sub	sp, #24
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	4613      	mov	r3, r2
 80087ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d101      	bne.n	80087f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80087f4:	2303      	movs	r3, #3
 80087f6:	e01f      	b.n	8008838 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d003      	beq.n	800881e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2201      	movs	r2, #1
 8008822:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	79fa      	ldrb	r2, [r7, #7]
 800882a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f001 fd2f 	bl	800a290 <USBD_LL_Init>
 8008832:	4603      	mov	r3, r0
 8008834:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008836:	7dfb      	ldrb	r3, [r7, #23]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3718      	adds	r7, #24
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800884a:	2300      	movs	r3, #0
 800884c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d101      	bne.n	8008858 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008854:	2303      	movs	r3, #3
 8008856:	e025      	b.n	80088a4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	683a      	ldr	r2, [r7, #0]
 800885c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	32ae      	adds	r2, #174	@ 0xae
 800886a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800886e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00f      	beq.n	8008894 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	32ae      	adds	r2, #174	@ 0xae
 800887e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008884:	f107 020e 	add.w	r2, r7, #14
 8008888:	4610      	mov	r0, r2
 800888a:	4798      	blx	r3
 800888c:	4602      	mov	r2, r0
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800889a:	1c5a      	adds	r2, r3, #1
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3710      	adds	r7, #16
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f001 fd37 	bl	800a328 <USBD_LL_Start>
 80088ba:	4603      	mov	r3, r0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088cc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	370c      	adds	r7, #12
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr

080088da <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b084      	sub	sp, #16
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	460b      	mov	r3, r1
 80088e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d009      	beq.n	8008908 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	78fa      	ldrb	r2, [r7, #3]
 80088fe:	4611      	mov	r1, r2
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	4798      	blx	r3
 8008904:	4603      	mov	r3, r0
 8008906:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008908:	7bfb      	ldrb	r3, [r7, #15]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b084      	sub	sp, #16
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
 800891a:	460b      	mov	r3, r1
 800891c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800891e:	2300      	movs	r3, #0
 8008920:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	78fa      	ldrb	r2, [r7, #3]
 800892c:	4611      	mov	r1, r2
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	4798      	blx	r3
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d001      	beq.n	800893c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008938:	2303      	movs	r3, #3
 800893a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800893c:	7bfb      	ldrb	r3, [r7, #15]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b084      	sub	sp, #16
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	4618      	mov	r0, r3
 800895a:	f001 f90c 	bl	8009b76 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800896c:	461a      	mov	r2, r3
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800897a:	f003 031f 	and.w	r3, r3, #31
 800897e:	2b02      	cmp	r3, #2
 8008980:	d01a      	beq.n	80089b8 <USBD_LL_SetupStage+0x72>
 8008982:	2b02      	cmp	r3, #2
 8008984:	d822      	bhi.n	80089cc <USBD_LL_SetupStage+0x86>
 8008986:	2b00      	cmp	r3, #0
 8008988:	d002      	beq.n	8008990 <USBD_LL_SetupStage+0x4a>
 800898a:	2b01      	cmp	r3, #1
 800898c:	d00a      	beq.n	80089a4 <USBD_LL_SetupStage+0x5e>
 800898e:	e01d      	b.n	80089cc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008996:	4619      	mov	r1, r3
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 fb63 	bl	8009064 <USBD_StdDevReq>
 800899e:	4603      	mov	r3, r0
 80089a0:	73fb      	strb	r3, [r7, #15]
      break;
 80089a2:	e020      	b.n	80089e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80089aa:	4619      	mov	r1, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 fbcb 	bl	8009148 <USBD_StdItfReq>
 80089b2:	4603      	mov	r3, r0
 80089b4:	73fb      	strb	r3, [r7, #15]
      break;
 80089b6:	e016      	b.n	80089e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80089be:	4619      	mov	r1, r3
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 fc2d 	bl	8009220 <USBD_StdEPReq>
 80089c6:	4603      	mov	r3, r0
 80089c8:	73fb      	strb	r3, [r7, #15]
      break;
 80089ca:	e00c      	b.n	80089e6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80089d2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	4619      	mov	r1, r3
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f001 fd04 	bl	800a3e8 <USBD_LL_StallEP>
 80089e0:	4603      	mov	r3, r0
 80089e2:	73fb      	strb	r3, [r7, #15]
      break;
 80089e4:	bf00      	nop
  }

  return ret;
 80089e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b086      	sub	sp, #24
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	460b      	mov	r3, r1
 80089fa:	607a      	str	r2, [r7, #4]
 80089fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80089fe:	2300      	movs	r3, #0
 8008a00:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008a02:	7afb      	ldrb	r3, [r7, #11]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d16e      	bne.n	8008ae6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008a0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008a16:	2b03      	cmp	r3, #3
 8008a18:	f040 8098 	bne.w	8008b4c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	689a      	ldr	r2, [r3, #8]
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d913      	bls.n	8008a50 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	689a      	ldr	r2, [r3, #8]
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	1ad2      	subs	r2, r2, r3
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	68da      	ldr	r2, [r3, #12]
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	bf28      	it	cs
 8008a42:	4613      	movcs	r3, r2
 8008a44:	461a      	mov	r2, r3
 8008a46:	6879      	ldr	r1, [r7, #4]
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f001 f977 	bl	8009d3c <USBD_CtlContinueRx>
 8008a4e:	e07d      	b.n	8008b4c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008a56:	f003 031f 	and.w	r3, r3, #31
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	d014      	beq.n	8008a88 <USBD_LL_DataOutStage+0x98>
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d81d      	bhi.n	8008a9e <USBD_LL_DataOutStage+0xae>
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d002      	beq.n	8008a6c <USBD_LL_DataOutStage+0x7c>
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d003      	beq.n	8008a72 <USBD_LL_DataOutStage+0x82>
 8008a6a:	e018      	b.n	8008a9e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	75bb      	strb	r3, [r7, #22]
            break;
 8008a70:	e018      	b.n	8008aa4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f000 fa64 	bl	8008f4a <USBD_CoreFindIF>
 8008a82:	4603      	mov	r3, r0
 8008a84:	75bb      	strb	r3, [r7, #22]
            break;
 8008a86:	e00d      	b.n	8008aa4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	4619      	mov	r1, r3
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	f000 fa66 	bl	8008f64 <USBD_CoreFindEP>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	75bb      	strb	r3, [r7, #22]
            break;
 8008a9c:	e002      	b.n	8008aa4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	75bb      	strb	r3, [r7, #22]
            break;
 8008aa2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008aa4:	7dbb      	ldrb	r3, [r7, #22]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d119      	bne.n	8008ade <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	2b03      	cmp	r3, #3
 8008ab4:	d113      	bne.n	8008ade <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008ab6:	7dba      	ldrb	r2, [r7, #22]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	32ae      	adds	r2, #174	@ 0xae
 8008abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00b      	beq.n	8008ade <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008ac6:	7dba      	ldrb	r2, [r7, #22]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008ace:	7dba      	ldrb	r2, [r7, #22]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	32ae      	adds	r2, #174	@ 0xae
 8008ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f001 f93d 	bl	8009d5e <USBD_CtlSendStatus>
 8008ae4:	e032      	b.n	8008b4c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008ae6:	7afb      	ldrb	r3, [r7, #11]
 8008ae8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	4619      	mov	r1, r3
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f000 fa37 	bl	8008f64 <USBD_CoreFindEP>
 8008af6:	4603      	mov	r3, r0
 8008af8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008afa:	7dbb      	ldrb	r3, [r7, #22]
 8008afc:	2bff      	cmp	r3, #255	@ 0xff
 8008afe:	d025      	beq.n	8008b4c <USBD_LL_DataOutStage+0x15c>
 8008b00:	7dbb      	ldrb	r3, [r7, #22]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d122      	bne.n	8008b4c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	2b03      	cmp	r3, #3
 8008b10:	d117      	bne.n	8008b42 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008b12:	7dba      	ldrb	r2, [r7, #22]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	32ae      	adds	r2, #174	@ 0xae
 8008b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00f      	beq.n	8008b42 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008b22:	7dba      	ldrb	r2, [r7, #22]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008b2a:	7dba      	ldrb	r2, [r7, #22]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	32ae      	adds	r2, #174	@ 0xae
 8008b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b34:	699b      	ldr	r3, [r3, #24]
 8008b36:	7afa      	ldrb	r2, [r7, #11]
 8008b38:	4611      	mov	r1, r2
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	4798      	blx	r3
 8008b3e:	4603      	mov	r3, r0
 8008b40:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008b42:	7dfb      	ldrb	r3, [r7, #23]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d001      	beq.n	8008b4c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008b48:	7dfb      	ldrb	r3, [r7, #23]
 8008b4a:	e000      	b.n	8008b4e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3718      	adds	r7, #24
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b086      	sub	sp, #24
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	60f8      	str	r0, [r7, #12]
 8008b5e:	460b      	mov	r3, r1
 8008b60:	607a      	str	r2, [r7, #4]
 8008b62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008b64:	7afb      	ldrb	r3, [r7, #11]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d16f      	bne.n	8008c4a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	3314      	adds	r3, #20
 8008b6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d15a      	bne.n	8008c30 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	689a      	ldr	r2, [r3, #8]
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d914      	bls.n	8008bb0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	689a      	ldr	r2, [r3, #8]
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	1ad2      	subs	r2, r2, r3
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	461a      	mov	r2, r3
 8008b9a:	6879      	ldr	r1, [r7, #4]
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f001 f8bc 	bl	8009d1a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f001 fcc7 	bl	800a53c <USBD_LL_PrepareReceive>
 8008bae:	e03f      	b.n	8008c30 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	68da      	ldr	r2, [r3, #12]
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d11c      	bne.n	8008bf6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	685a      	ldr	r2, [r3, #4]
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d316      	bcc.n	8008bf6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	685a      	ldr	r2, [r3, #4]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d20f      	bcs.n	8008bf6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	2100      	movs	r1, #0
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	f001 f89d 	bl	8009d1a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008be8:	2300      	movs	r3, #0
 8008bea:	2200      	movs	r2, #0
 8008bec:	2100      	movs	r1, #0
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	f001 fca4 	bl	800a53c <USBD_LL_PrepareReceive>
 8008bf4:	e01c      	b.n	8008c30 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	2b03      	cmp	r3, #3
 8008c00:	d10f      	bne.n	8008c22 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d009      	beq.n	8008c22 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2200      	movs	r2, #0
 8008c12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c22:	2180      	movs	r1, #128	@ 0x80
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f001 fbdf 	bl	800a3e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008c2a:	68f8      	ldr	r0, [r7, #12]
 8008c2c:	f001 f8aa 	bl	8009d84 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d03a      	beq.n	8008cb0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f7ff fe42 	bl	80088c4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008c48:	e032      	b.n	8008cb0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008c4a:	7afb      	ldrb	r3, [r7, #11]
 8008c4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	4619      	mov	r1, r3
 8008c54:	68f8      	ldr	r0, [r7, #12]
 8008c56:	f000 f985 	bl	8008f64 <USBD_CoreFindEP>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c5e:	7dfb      	ldrb	r3, [r7, #23]
 8008c60:	2bff      	cmp	r3, #255	@ 0xff
 8008c62:	d025      	beq.n	8008cb0 <USBD_LL_DataInStage+0x15a>
 8008c64:	7dfb      	ldrb	r3, [r7, #23]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d122      	bne.n	8008cb0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	2b03      	cmp	r3, #3
 8008c74:	d11c      	bne.n	8008cb0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008c76:	7dfa      	ldrb	r2, [r7, #23]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	32ae      	adds	r2, #174	@ 0xae
 8008c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c80:	695b      	ldr	r3, [r3, #20]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d014      	beq.n	8008cb0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008c86:	7dfa      	ldrb	r2, [r7, #23]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008c8e:	7dfa      	ldrb	r2, [r7, #23]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	32ae      	adds	r2, #174	@ 0xae
 8008c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c98:	695b      	ldr	r3, [r3, #20]
 8008c9a:	7afa      	ldrb	r2, [r7, #11]
 8008c9c:	4611      	mov	r1, r2
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	4798      	blx	r3
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008ca6:	7dbb      	ldrb	r3, [r7, #22]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d001      	beq.n	8008cb0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008cac:	7dbb      	ldrb	r3, [r7, #22]
 8008cae:	e000      	b.n	8008cb2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3718      	adds	r7, #24
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b084      	sub	sp, #16
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d014      	beq.n	8008d20 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00e      	beq.n	8008d20 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	6852      	ldr	r2, [r2, #4]
 8008d0e:	b2d2      	uxtb	r2, r2
 8008d10:	4611      	mov	r1, r2
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	4798      	blx	r3
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d001      	beq.n	8008d20 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008d1c:	2303      	movs	r3, #3
 8008d1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d20:	2340      	movs	r3, #64	@ 0x40
 8008d22:	2200      	movs	r2, #0
 8008d24:	2100      	movs	r1, #0
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f001 fb19 	bl	800a35e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2240      	movs	r2, #64	@ 0x40
 8008d38:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d3c:	2340      	movs	r3, #64	@ 0x40
 8008d3e:	2200      	movs	r2, #0
 8008d40:	2180      	movs	r1, #128	@ 0x80
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f001 fb0b 	bl	800a35e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2240      	movs	r2, #64	@ 0x40
 8008d52:	621a      	str	r2, [r3, #32]

  return ret;
 8008d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008d5e:	b480      	push	{r7}
 8008d60:	b083      	sub	sp, #12
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	460b      	mov	r3, r1
 8008d68:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	78fa      	ldrb	r2, [r7, #3]
 8008d6e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	370c      	adds	r7, #12
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr

08008d7e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008d7e:	b480      	push	{r7}
 8008d80:	b083      	sub	sp, #12
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	2b04      	cmp	r3, #4
 8008d90:	d006      	beq.n	8008da0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2204      	movs	r2, #4
 8008da4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	370c      	adds	r7, #12
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008db6:	b480      	push	{r7}
 8008db8:	b083      	sub	sp, #12
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b04      	cmp	r3, #4
 8008dc8:	d106      	bne.n	8008dd8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	370c      	adds	r7, #12
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b082      	sub	sp, #8
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	2b03      	cmp	r3, #3
 8008df8:	d110      	bne.n	8008e1c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00b      	beq.n	8008e1c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e0a:	69db      	ldr	r3, [r3, #28]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d005      	beq.n	8008e1c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e16:	69db      	ldr	r3, [r3, #28]
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b082      	sub	sp, #8
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
 8008e2e:	460b      	mov	r3, r1
 8008e30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	32ae      	adds	r2, #174	@ 0xae
 8008e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d101      	bne.n	8008e48 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008e44:	2303      	movs	r3, #3
 8008e46:	e01c      	b.n	8008e82 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	2b03      	cmp	r3, #3
 8008e52:	d115      	bne.n	8008e80 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	32ae      	adds	r2, #174	@ 0xae
 8008e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e62:	6a1b      	ldr	r3, [r3, #32]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00b      	beq.n	8008e80 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	32ae      	adds	r2, #174	@ 0xae
 8008e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e76:	6a1b      	ldr	r3, [r3, #32]
 8008e78:	78fa      	ldrb	r2, [r7, #3]
 8008e7a:	4611      	mov	r1, r2
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b082      	sub	sp, #8
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	460b      	mov	r3, r1
 8008e94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	32ae      	adds	r2, #174	@ 0xae
 8008ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d101      	bne.n	8008eac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008ea8:	2303      	movs	r3, #3
 8008eaa:	e01c      	b.n	8008ee6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	2b03      	cmp	r3, #3
 8008eb6:	d115      	bne.n	8008ee4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	32ae      	adds	r2, #174	@ 0xae
 8008ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00b      	beq.n	8008ee4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	32ae      	adds	r2, #174	@ 0xae
 8008ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008edc:	78fa      	ldrb	r2, [r7, #3]
 8008ede:	4611      	mov	r1, r2
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b083      	sub	sp, #12
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00e      	beq.n	8008f40 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	6852      	ldr	r2, [r2, #4]
 8008f2e:	b2d2      	uxtb	r2, r2
 8008f30:	4611      	mov	r1, r2
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	4798      	blx	r3
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008f4a:	b480      	push	{r7}
 8008f4c:	b083      	sub	sp, #12
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	460b      	mov	r3, r1
 8008f54:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008f56:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008f70:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	370c      	adds	r7, #12
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr

08008f7e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b086      	sub	sp, #24
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
 8008f86:	460b      	mov	r3, r1
 8008f88:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008f92:	2300      	movs	r3, #0
 8008f94:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	885b      	ldrh	r3, [r3, #2]
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	7812      	ldrb	r2, [r2, #0]
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d91f      	bls.n	8008fe4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008faa:	e013      	b.n	8008fd4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008fac:	f107 030a 	add.w	r3, r7, #10
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	6978      	ldr	r0, [r7, #20]
 8008fb4:	f000 f81b 	bl	8008fee <USBD_GetNextDesc>
 8008fb8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	785b      	ldrb	r3, [r3, #1]
 8008fbe:	2b05      	cmp	r3, #5
 8008fc0:	d108      	bne.n	8008fd4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	789b      	ldrb	r3, [r3, #2]
 8008fca:	78fa      	ldrb	r2, [r7, #3]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d008      	beq.n	8008fe2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	885b      	ldrh	r3, [r3, #2]
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	897b      	ldrh	r3, [r7, #10]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d8e5      	bhi.n	8008fac <USBD_GetEpDesc+0x2e>
 8008fe0:	e000      	b.n	8008fe4 <USBD_GetEpDesc+0x66>
          break;
 8008fe2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008fe4:	693b      	ldr	r3, [r7, #16]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3718      	adds	r7, #24
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008fee:	b480      	push	{r7}
 8008ff0:	b085      	sub	sp, #20
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
 8008ff6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	881b      	ldrh	r3, [r3, #0]
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	7812      	ldrb	r2, [r2, #0]
 8009004:	4413      	add	r3, r2
 8009006:	b29a      	uxth	r2, r3
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	461a      	mov	r2, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4413      	add	r3, r2
 8009016:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009018:	68fb      	ldr	r3, [r7, #12]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009026:	b480      	push	{r7}
 8009028:	b087      	sub	sp, #28
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	3301      	adds	r3, #1
 800903c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009044:	8a3b      	ldrh	r3, [r7, #16]
 8009046:	021b      	lsls	r3, r3, #8
 8009048:	b21a      	sxth	r2, r3
 800904a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800904e:	4313      	orrs	r3, r2
 8009050:	b21b      	sxth	r3, r3
 8009052:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009054:	89fb      	ldrh	r3, [r7, #14]
}
 8009056:	4618      	mov	r0, r3
 8009058:	371c      	adds	r7, #28
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr
	...

08009064 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800906e:	2300      	movs	r3, #0
 8009070:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800907a:	2b40      	cmp	r3, #64	@ 0x40
 800907c:	d005      	beq.n	800908a <USBD_StdDevReq+0x26>
 800907e:	2b40      	cmp	r3, #64	@ 0x40
 8009080:	d857      	bhi.n	8009132 <USBD_StdDevReq+0xce>
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00f      	beq.n	80090a6 <USBD_StdDevReq+0x42>
 8009086:	2b20      	cmp	r3, #32
 8009088:	d153      	bne.n	8009132 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	32ae      	adds	r2, #174	@ 0xae
 8009094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	6839      	ldr	r1, [r7, #0]
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	4798      	blx	r3
 80090a0:	4603      	mov	r3, r0
 80090a2:	73fb      	strb	r3, [r7, #15]
      break;
 80090a4:	e04a      	b.n	800913c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	785b      	ldrb	r3, [r3, #1]
 80090aa:	2b09      	cmp	r3, #9
 80090ac:	d83b      	bhi.n	8009126 <USBD_StdDevReq+0xc2>
 80090ae:	a201      	add	r2, pc, #4	@ (adr r2, 80090b4 <USBD_StdDevReq+0x50>)
 80090b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b4:	08009109 	.word	0x08009109
 80090b8:	0800911d 	.word	0x0800911d
 80090bc:	08009127 	.word	0x08009127
 80090c0:	08009113 	.word	0x08009113
 80090c4:	08009127 	.word	0x08009127
 80090c8:	080090e7 	.word	0x080090e7
 80090cc:	080090dd 	.word	0x080090dd
 80090d0:	08009127 	.word	0x08009127
 80090d4:	080090ff 	.word	0x080090ff
 80090d8:	080090f1 	.word	0x080090f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80090dc:	6839      	ldr	r1, [r7, #0]
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fa3c 	bl	800955c <USBD_GetDescriptor>
          break;
 80090e4:	e024      	b.n	8009130 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80090e6:	6839      	ldr	r1, [r7, #0]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 fba1 	bl	8009830 <USBD_SetAddress>
          break;
 80090ee:	e01f      	b.n	8009130 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fbe0 	bl	80098b8 <USBD_SetConfig>
 80090f8:	4603      	mov	r3, r0
 80090fa:	73fb      	strb	r3, [r7, #15]
          break;
 80090fc:	e018      	b.n	8009130 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80090fe:	6839      	ldr	r1, [r7, #0]
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 fc83 	bl	8009a0c <USBD_GetConfig>
          break;
 8009106:	e013      	b.n	8009130 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009108:	6839      	ldr	r1, [r7, #0]
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 fcb4 	bl	8009a78 <USBD_GetStatus>
          break;
 8009110:	e00e      	b.n	8009130 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009112:	6839      	ldr	r1, [r7, #0]
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fce3 	bl	8009ae0 <USBD_SetFeature>
          break;
 800911a:	e009      	b.n	8009130 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800911c:	6839      	ldr	r1, [r7, #0]
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 fd07 	bl	8009b32 <USBD_ClrFeature>
          break;
 8009124:	e004      	b.n	8009130 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009126:	6839      	ldr	r1, [r7, #0]
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 fd5e 	bl	8009bea <USBD_CtlError>
          break;
 800912e:	bf00      	nop
      }
      break;
 8009130:	e004      	b.n	800913c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009132:	6839      	ldr	r1, [r7, #0]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 fd58 	bl	8009bea <USBD_CtlError>
      break;
 800913a:	bf00      	nop
  }

  return ret;
 800913c:	7bfb      	ldrb	r3, [r7, #15]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop

08009148 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009152:	2300      	movs	r3, #0
 8009154:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800915e:	2b40      	cmp	r3, #64	@ 0x40
 8009160:	d005      	beq.n	800916e <USBD_StdItfReq+0x26>
 8009162:	2b40      	cmp	r3, #64	@ 0x40
 8009164:	d852      	bhi.n	800920c <USBD_StdItfReq+0xc4>
 8009166:	2b00      	cmp	r3, #0
 8009168:	d001      	beq.n	800916e <USBD_StdItfReq+0x26>
 800916a:	2b20      	cmp	r3, #32
 800916c:	d14e      	bne.n	800920c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009174:	b2db      	uxtb	r3, r3
 8009176:	3b01      	subs	r3, #1
 8009178:	2b02      	cmp	r3, #2
 800917a:	d840      	bhi.n	80091fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	889b      	ldrh	r3, [r3, #4]
 8009180:	b2db      	uxtb	r3, r3
 8009182:	2b01      	cmp	r3, #1
 8009184:	d836      	bhi.n	80091f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	889b      	ldrh	r3, [r3, #4]
 800918a:	b2db      	uxtb	r3, r3
 800918c:	4619      	mov	r1, r3
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f7ff fedb 	bl	8008f4a <USBD_CoreFindIF>
 8009194:	4603      	mov	r3, r0
 8009196:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009198:	7bbb      	ldrb	r3, [r7, #14]
 800919a:	2bff      	cmp	r3, #255	@ 0xff
 800919c:	d01d      	beq.n	80091da <USBD_StdItfReq+0x92>
 800919e:	7bbb      	ldrb	r3, [r7, #14]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d11a      	bne.n	80091da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80091a4:	7bba      	ldrb	r2, [r7, #14]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	32ae      	adds	r2, #174	@ 0xae
 80091aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d00f      	beq.n	80091d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80091b4:	7bba      	ldrb	r2, [r7, #14]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80091bc:	7bba      	ldrb	r2, [r7, #14]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	32ae      	adds	r2, #174	@ 0xae
 80091c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	6839      	ldr	r1, [r7, #0]
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	4798      	blx	r3
 80091ce:	4603      	mov	r3, r0
 80091d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80091d2:	e004      	b.n	80091de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80091d4:	2303      	movs	r3, #3
 80091d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80091d8:	e001      	b.n	80091de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80091da:	2303      	movs	r3, #3
 80091dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	88db      	ldrh	r3, [r3, #6]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d110      	bne.n	8009208 <USBD_StdItfReq+0xc0>
 80091e6:	7bfb      	ldrb	r3, [r7, #15]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d10d      	bne.n	8009208 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 fdb6 	bl	8009d5e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80091f2:	e009      	b.n	8009208 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80091f4:	6839      	ldr	r1, [r7, #0]
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fcf7 	bl	8009bea <USBD_CtlError>
          break;
 80091fc:	e004      	b.n	8009208 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80091fe:	6839      	ldr	r1, [r7, #0]
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 fcf2 	bl	8009bea <USBD_CtlError>
          break;
 8009206:	e000      	b.n	800920a <USBD_StdItfReq+0xc2>
          break;
 8009208:	bf00      	nop
      }
      break;
 800920a:	e004      	b.n	8009216 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800920c:	6839      	ldr	r1, [r7, #0]
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 fceb 	bl	8009bea <USBD_CtlError>
      break;
 8009214:	bf00      	nop
  }

  return ret;
 8009216:	7bfb      	ldrb	r3, [r7, #15]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800922a:	2300      	movs	r3, #0
 800922c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	889b      	ldrh	r3, [r3, #4]
 8009232:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800923c:	2b40      	cmp	r3, #64	@ 0x40
 800923e:	d007      	beq.n	8009250 <USBD_StdEPReq+0x30>
 8009240:	2b40      	cmp	r3, #64	@ 0x40
 8009242:	f200 817f 	bhi.w	8009544 <USBD_StdEPReq+0x324>
 8009246:	2b00      	cmp	r3, #0
 8009248:	d02a      	beq.n	80092a0 <USBD_StdEPReq+0x80>
 800924a:	2b20      	cmp	r3, #32
 800924c:	f040 817a 	bne.w	8009544 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009250:	7bbb      	ldrb	r3, [r7, #14]
 8009252:	4619      	mov	r1, r3
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f7ff fe85 	bl	8008f64 <USBD_CoreFindEP>
 800925a:	4603      	mov	r3, r0
 800925c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800925e:	7b7b      	ldrb	r3, [r7, #13]
 8009260:	2bff      	cmp	r3, #255	@ 0xff
 8009262:	f000 8174 	beq.w	800954e <USBD_StdEPReq+0x32e>
 8009266:	7b7b      	ldrb	r3, [r7, #13]
 8009268:	2b00      	cmp	r3, #0
 800926a:	f040 8170 	bne.w	800954e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800926e:	7b7a      	ldrb	r2, [r7, #13]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009276:	7b7a      	ldrb	r2, [r7, #13]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	32ae      	adds	r2, #174	@ 0xae
 800927c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	2b00      	cmp	r3, #0
 8009284:	f000 8163 	beq.w	800954e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009288:	7b7a      	ldrb	r2, [r7, #13]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	32ae      	adds	r2, #174	@ 0xae
 800928e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	6839      	ldr	r1, [r7, #0]
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	4798      	blx	r3
 800929a:	4603      	mov	r3, r0
 800929c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800929e:	e156      	b.n	800954e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	785b      	ldrb	r3, [r3, #1]
 80092a4:	2b03      	cmp	r3, #3
 80092a6:	d008      	beq.n	80092ba <USBD_StdEPReq+0x9a>
 80092a8:	2b03      	cmp	r3, #3
 80092aa:	f300 8145 	bgt.w	8009538 <USBD_StdEPReq+0x318>
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f000 809b 	beq.w	80093ea <USBD_StdEPReq+0x1ca>
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d03c      	beq.n	8009332 <USBD_StdEPReq+0x112>
 80092b8:	e13e      	b.n	8009538 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d002      	beq.n	80092cc <USBD_StdEPReq+0xac>
 80092c6:	2b03      	cmp	r3, #3
 80092c8:	d016      	beq.n	80092f8 <USBD_StdEPReq+0xd8>
 80092ca:	e02c      	b.n	8009326 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092cc:	7bbb      	ldrb	r3, [r7, #14]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00d      	beq.n	80092ee <USBD_StdEPReq+0xce>
 80092d2:	7bbb      	ldrb	r3, [r7, #14]
 80092d4:	2b80      	cmp	r3, #128	@ 0x80
 80092d6:	d00a      	beq.n	80092ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80092d8:	7bbb      	ldrb	r3, [r7, #14]
 80092da:	4619      	mov	r1, r3
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f001 f883 	bl	800a3e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80092e2:	2180      	movs	r1, #128	@ 0x80
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f001 f87f 	bl	800a3e8 <USBD_LL_StallEP>
 80092ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80092ec:	e020      	b.n	8009330 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80092ee:	6839      	ldr	r1, [r7, #0]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fc7a 	bl	8009bea <USBD_CtlError>
              break;
 80092f6:	e01b      	b.n	8009330 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	885b      	ldrh	r3, [r3, #2]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d10e      	bne.n	800931e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009300:	7bbb      	ldrb	r3, [r7, #14]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d00b      	beq.n	800931e <USBD_StdEPReq+0xfe>
 8009306:	7bbb      	ldrb	r3, [r7, #14]
 8009308:	2b80      	cmp	r3, #128	@ 0x80
 800930a:	d008      	beq.n	800931e <USBD_StdEPReq+0xfe>
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	88db      	ldrh	r3, [r3, #6]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d104      	bne.n	800931e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009314:	7bbb      	ldrb	r3, [r7, #14]
 8009316:	4619      	mov	r1, r3
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f001 f865 	bl	800a3e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fd1d 	bl	8009d5e <USBD_CtlSendStatus>

              break;
 8009324:	e004      	b.n	8009330 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009326:	6839      	ldr	r1, [r7, #0]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 fc5e 	bl	8009bea <USBD_CtlError>
              break;
 800932e:	bf00      	nop
          }
          break;
 8009330:	e107      	b.n	8009542 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009338:	b2db      	uxtb	r3, r3
 800933a:	2b02      	cmp	r3, #2
 800933c:	d002      	beq.n	8009344 <USBD_StdEPReq+0x124>
 800933e:	2b03      	cmp	r3, #3
 8009340:	d016      	beq.n	8009370 <USBD_StdEPReq+0x150>
 8009342:	e04b      	b.n	80093dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009344:	7bbb      	ldrb	r3, [r7, #14]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00d      	beq.n	8009366 <USBD_StdEPReq+0x146>
 800934a:	7bbb      	ldrb	r3, [r7, #14]
 800934c:	2b80      	cmp	r3, #128	@ 0x80
 800934e:	d00a      	beq.n	8009366 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009350:	7bbb      	ldrb	r3, [r7, #14]
 8009352:	4619      	mov	r1, r3
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f001 f847 	bl	800a3e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800935a:	2180      	movs	r1, #128	@ 0x80
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f001 f843 	bl	800a3e8 <USBD_LL_StallEP>
 8009362:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009364:	e040      	b.n	80093e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009366:	6839      	ldr	r1, [r7, #0]
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 fc3e 	bl	8009bea <USBD_CtlError>
              break;
 800936e:	e03b      	b.n	80093e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	885b      	ldrh	r3, [r3, #2]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d136      	bne.n	80093e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009378:	7bbb      	ldrb	r3, [r7, #14]
 800937a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800937e:	2b00      	cmp	r3, #0
 8009380:	d004      	beq.n	800938c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009382:	7bbb      	ldrb	r3, [r7, #14]
 8009384:	4619      	mov	r1, r3
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f001 f84d 	bl	800a426 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 fce6 	bl	8009d5e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009392:	7bbb      	ldrb	r3, [r7, #14]
 8009394:	4619      	mov	r1, r3
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f7ff fde4 	bl	8008f64 <USBD_CoreFindEP>
 800939c:	4603      	mov	r3, r0
 800939e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093a0:	7b7b      	ldrb	r3, [r7, #13]
 80093a2:	2bff      	cmp	r3, #255	@ 0xff
 80093a4:	d01f      	beq.n	80093e6 <USBD_StdEPReq+0x1c6>
 80093a6:	7b7b      	ldrb	r3, [r7, #13]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d11c      	bne.n	80093e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80093ac:	7b7a      	ldrb	r2, [r7, #13]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80093b4:	7b7a      	ldrb	r2, [r7, #13]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	32ae      	adds	r2, #174	@ 0xae
 80093ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d010      	beq.n	80093e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80093c4:	7b7a      	ldrb	r2, [r7, #13]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	32ae      	adds	r2, #174	@ 0xae
 80093ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	6839      	ldr	r1, [r7, #0]
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	4798      	blx	r3
 80093d6:	4603      	mov	r3, r0
 80093d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80093da:	e004      	b.n	80093e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80093dc:	6839      	ldr	r1, [r7, #0]
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fc03 	bl	8009bea <USBD_CtlError>
              break;
 80093e4:	e000      	b.n	80093e8 <USBD_StdEPReq+0x1c8>
              break;
 80093e6:	bf00      	nop
          }
          break;
 80093e8:	e0ab      	b.n	8009542 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d002      	beq.n	80093fc <USBD_StdEPReq+0x1dc>
 80093f6:	2b03      	cmp	r3, #3
 80093f8:	d032      	beq.n	8009460 <USBD_StdEPReq+0x240>
 80093fa:	e097      	b.n	800952c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093fc:	7bbb      	ldrb	r3, [r7, #14]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d007      	beq.n	8009412 <USBD_StdEPReq+0x1f2>
 8009402:	7bbb      	ldrb	r3, [r7, #14]
 8009404:	2b80      	cmp	r3, #128	@ 0x80
 8009406:	d004      	beq.n	8009412 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009408:	6839      	ldr	r1, [r7, #0]
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 fbed 	bl	8009bea <USBD_CtlError>
                break;
 8009410:	e091      	b.n	8009536 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009412:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009416:	2b00      	cmp	r3, #0
 8009418:	da0b      	bge.n	8009432 <USBD_StdEPReq+0x212>
 800941a:	7bbb      	ldrb	r3, [r7, #14]
 800941c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009420:	4613      	mov	r3, r2
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	4413      	add	r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	3310      	adds	r3, #16
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	4413      	add	r3, r2
 800942e:	3304      	adds	r3, #4
 8009430:	e00b      	b.n	800944a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009432:	7bbb      	ldrb	r3, [r7, #14]
 8009434:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009438:	4613      	mov	r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	4413      	add	r3, r2
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	4413      	add	r3, r2
 8009448:	3304      	adds	r3, #4
 800944a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	2200      	movs	r2, #0
 8009450:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	2202      	movs	r2, #2
 8009456:	4619      	mov	r1, r3
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 fc43 	bl	8009ce4 <USBD_CtlSendData>
              break;
 800945e:	e06a      	b.n	8009536 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009460:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009464:	2b00      	cmp	r3, #0
 8009466:	da11      	bge.n	800948c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009468:	7bbb      	ldrb	r3, [r7, #14]
 800946a:	f003 020f 	and.w	r2, r3, #15
 800946e:	6879      	ldr	r1, [r7, #4]
 8009470:	4613      	mov	r3, r2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	4413      	add	r3, r2
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	440b      	add	r3, r1
 800947a:	3324      	adds	r3, #36	@ 0x24
 800947c:	881b      	ldrh	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d117      	bne.n	80094b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009482:	6839      	ldr	r1, [r7, #0]
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 fbb0 	bl	8009bea <USBD_CtlError>
                  break;
 800948a:	e054      	b.n	8009536 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800948c:	7bbb      	ldrb	r3, [r7, #14]
 800948e:	f003 020f 	and.w	r2, r3, #15
 8009492:	6879      	ldr	r1, [r7, #4]
 8009494:	4613      	mov	r3, r2
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	4413      	add	r3, r2
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	440b      	add	r3, r1
 800949e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80094a2:	881b      	ldrh	r3, [r3, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d104      	bne.n	80094b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80094a8:	6839      	ldr	r1, [r7, #0]
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fb9d 	bl	8009bea <USBD_CtlError>
                  break;
 80094b0:	e041      	b.n	8009536 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	da0b      	bge.n	80094d2 <USBD_StdEPReq+0x2b2>
 80094ba:	7bbb      	ldrb	r3, [r7, #14]
 80094bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094c0:	4613      	mov	r3, r2
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	4413      	add	r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	3310      	adds	r3, #16
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	4413      	add	r3, r2
 80094ce:	3304      	adds	r3, #4
 80094d0:	e00b      	b.n	80094ea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094d2:	7bbb      	ldrb	r3, [r7, #14]
 80094d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094d8:	4613      	mov	r3, r2
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	4413      	add	r3, r2
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	4413      	add	r3, r2
 80094e8:	3304      	adds	r3, #4
 80094ea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80094ec:	7bbb      	ldrb	r3, [r7, #14]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d002      	beq.n	80094f8 <USBD_StdEPReq+0x2d8>
 80094f2:	7bbb      	ldrb	r3, [r7, #14]
 80094f4:	2b80      	cmp	r3, #128	@ 0x80
 80094f6:	d103      	bne.n	8009500 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	2200      	movs	r2, #0
 80094fc:	601a      	str	r2, [r3, #0]
 80094fe:	e00e      	b.n	800951e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009500:	7bbb      	ldrb	r3, [r7, #14]
 8009502:	4619      	mov	r1, r3
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 ffad 	bl	800a464 <USBD_LL_IsStallEP>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d003      	beq.n	8009518 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	2201      	movs	r2, #1
 8009514:	601a      	str	r2, [r3, #0]
 8009516:	e002      	b.n	800951e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	2200      	movs	r2, #0
 800951c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	2202      	movs	r2, #2
 8009522:	4619      	mov	r1, r3
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fbdd 	bl	8009ce4 <USBD_CtlSendData>
              break;
 800952a:	e004      	b.n	8009536 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800952c:	6839      	ldr	r1, [r7, #0]
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 fb5b 	bl	8009bea <USBD_CtlError>
              break;
 8009534:	bf00      	nop
          }
          break;
 8009536:	e004      	b.n	8009542 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009538:	6839      	ldr	r1, [r7, #0]
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 fb55 	bl	8009bea <USBD_CtlError>
          break;
 8009540:	bf00      	nop
      }
      break;
 8009542:	e005      	b.n	8009550 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009544:	6839      	ldr	r1, [r7, #0]
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 fb4f 	bl	8009bea <USBD_CtlError>
      break;
 800954c:	e000      	b.n	8009550 <USBD_StdEPReq+0x330>
      break;
 800954e:	bf00      	nop
  }

  return ret;
 8009550:	7bfb      	ldrb	r3, [r7, #15]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
	...

0800955c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009566:	2300      	movs	r3, #0
 8009568:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800956a:	2300      	movs	r3, #0
 800956c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800956e:	2300      	movs	r3, #0
 8009570:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	885b      	ldrh	r3, [r3, #2]
 8009576:	0a1b      	lsrs	r3, r3, #8
 8009578:	b29b      	uxth	r3, r3
 800957a:	3b01      	subs	r3, #1
 800957c:	2b06      	cmp	r3, #6
 800957e:	f200 8128 	bhi.w	80097d2 <USBD_GetDescriptor+0x276>
 8009582:	a201      	add	r2, pc, #4	@ (adr r2, 8009588 <USBD_GetDescriptor+0x2c>)
 8009584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009588:	080095a5 	.word	0x080095a5
 800958c:	080095bd 	.word	0x080095bd
 8009590:	080095fd 	.word	0x080095fd
 8009594:	080097d3 	.word	0x080097d3
 8009598:	080097d3 	.word	0x080097d3
 800959c:	08009773 	.word	0x08009773
 80095a0:	0800979f 	.word	0x0800979f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	7c12      	ldrb	r2, [r2, #16]
 80095b0:	f107 0108 	add.w	r1, r7, #8
 80095b4:	4610      	mov	r0, r2
 80095b6:	4798      	blx	r3
 80095b8:	60f8      	str	r0, [r7, #12]
      break;
 80095ba:	e112      	b.n	80097e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	7c1b      	ldrb	r3, [r3, #16]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d10d      	bne.n	80095e0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095cc:	f107 0208 	add.w	r2, r7, #8
 80095d0:	4610      	mov	r0, r2
 80095d2:	4798      	blx	r3
 80095d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	3301      	adds	r3, #1
 80095da:	2202      	movs	r2, #2
 80095dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80095de:	e100      	b.n	80097e2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e8:	f107 0208 	add.w	r2, r7, #8
 80095ec:	4610      	mov	r0, r2
 80095ee:	4798      	blx	r3
 80095f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	3301      	adds	r3, #1
 80095f6:	2202      	movs	r2, #2
 80095f8:	701a      	strb	r2, [r3, #0]
      break;
 80095fa:	e0f2      	b.n	80097e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	885b      	ldrh	r3, [r3, #2]
 8009600:	b2db      	uxtb	r3, r3
 8009602:	2b05      	cmp	r3, #5
 8009604:	f200 80ac 	bhi.w	8009760 <USBD_GetDescriptor+0x204>
 8009608:	a201      	add	r2, pc, #4	@ (adr r2, 8009610 <USBD_GetDescriptor+0xb4>)
 800960a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800960e:	bf00      	nop
 8009610:	08009629 	.word	0x08009629
 8009614:	0800965d 	.word	0x0800965d
 8009618:	08009691 	.word	0x08009691
 800961c:	080096c5 	.word	0x080096c5
 8009620:	080096f9 	.word	0x080096f9
 8009624:	0800972d 	.word	0x0800972d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00b      	beq.n	800964c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	7c12      	ldrb	r2, [r2, #16]
 8009640:	f107 0108 	add.w	r1, r7, #8
 8009644:	4610      	mov	r0, r2
 8009646:	4798      	blx	r3
 8009648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800964a:	e091      	b.n	8009770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800964c:	6839      	ldr	r1, [r7, #0]
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 facb 	bl	8009bea <USBD_CtlError>
            err++;
 8009654:	7afb      	ldrb	r3, [r7, #11]
 8009656:	3301      	adds	r3, #1
 8009658:	72fb      	strb	r3, [r7, #11]
          break;
 800965a:	e089      	b.n	8009770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00b      	beq.n	8009680 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	7c12      	ldrb	r2, [r2, #16]
 8009674:	f107 0108 	add.w	r1, r7, #8
 8009678:	4610      	mov	r0, r2
 800967a:	4798      	blx	r3
 800967c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800967e:	e077      	b.n	8009770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009680:	6839      	ldr	r1, [r7, #0]
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 fab1 	bl	8009bea <USBD_CtlError>
            err++;
 8009688:	7afb      	ldrb	r3, [r7, #11]
 800968a:	3301      	adds	r3, #1
 800968c:	72fb      	strb	r3, [r7, #11]
          break;
 800968e:	e06f      	b.n	8009770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00b      	beq.n	80096b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	7c12      	ldrb	r2, [r2, #16]
 80096a8:	f107 0108 	add.w	r1, r7, #8
 80096ac:	4610      	mov	r0, r2
 80096ae:	4798      	blx	r3
 80096b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096b2:	e05d      	b.n	8009770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096b4:	6839      	ldr	r1, [r7, #0]
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 fa97 	bl	8009bea <USBD_CtlError>
            err++;
 80096bc:	7afb      	ldrb	r3, [r7, #11]
 80096be:	3301      	adds	r3, #1
 80096c0:	72fb      	strb	r3, [r7, #11]
          break;
 80096c2:	e055      	b.n	8009770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00b      	beq.n	80096e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096d6:	691b      	ldr	r3, [r3, #16]
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	7c12      	ldrb	r2, [r2, #16]
 80096dc:	f107 0108 	add.w	r1, r7, #8
 80096e0:	4610      	mov	r0, r2
 80096e2:	4798      	blx	r3
 80096e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096e6:	e043      	b.n	8009770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096e8:	6839      	ldr	r1, [r7, #0]
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 fa7d 	bl	8009bea <USBD_CtlError>
            err++;
 80096f0:	7afb      	ldrb	r3, [r7, #11]
 80096f2:	3301      	adds	r3, #1
 80096f4:	72fb      	strb	r3, [r7, #11]
          break;
 80096f6:	e03b      	b.n	8009770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096fe:	695b      	ldr	r3, [r3, #20]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00b      	beq.n	800971c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800970a:	695b      	ldr	r3, [r3, #20]
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	7c12      	ldrb	r2, [r2, #16]
 8009710:	f107 0108 	add.w	r1, r7, #8
 8009714:	4610      	mov	r0, r2
 8009716:	4798      	blx	r3
 8009718:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800971a:	e029      	b.n	8009770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800971c:	6839      	ldr	r1, [r7, #0]
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 fa63 	bl	8009bea <USBD_CtlError>
            err++;
 8009724:	7afb      	ldrb	r3, [r7, #11]
 8009726:	3301      	adds	r3, #1
 8009728:	72fb      	strb	r3, [r7, #11]
          break;
 800972a:	e021      	b.n	8009770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009732:	699b      	ldr	r3, [r3, #24]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00b      	beq.n	8009750 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	7c12      	ldrb	r2, [r2, #16]
 8009744:	f107 0108 	add.w	r1, r7, #8
 8009748:	4610      	mov	r0, r2
 800974a:	4798      	blx	r3
 800974c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800974e:	e00f      	b.n	8009770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009750:	6839      	ldr	r1, [r7, #0]
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 fa49 	bl	8009bea <USBD_CtlError>
            err++;
 8009758:	7afb      	ldrb	r3, [r7, #11]
 800975a:	3301      	adds	r3, #1
 800975c:	72fb      	strb	r3, [r7, #11]
          break;
 800975e:	e007      	b.n	8009770 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009760:	6839      	ldr	r1, [r7, #0]
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 fa41 	bl	8009bea <USBD_CtlError>
          err++;
 8009768:	7afb      	ldrb	r3, [r7, #11]
 800976a:	3301      	adds	r3, #1
 800976c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800976e:	bf00      	nop
      }
      break;
 8009770:	e037      	b.n	80097e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	7c1b      	ldrb	r3, [r3, #16]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d109      	bne.n	800978e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009782:	f107 0208 	add.w	r2, r7, #8
 8009786:	4610      	mov	r0, r2
 8009788:	4798      	blx	r3
 800978a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800978c:	e029      	b.n	80097e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800978e:	6839      	ldr	r1, [r7, #0]
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 fa2a 	bl	8009bea <USBD_CtlError>
        err++;
 8009796:	7afb      	ldrb	r3, [r7, #11]
 8009798:	3301      	adds	r3, #1
 800979a:	72fb      	strb	r3, [r7, #11]
      break;
 800979c:	e021      	b.n	80097e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	7c1b      	ldrb	r3, [r3, #16]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d10d      	bne.n	80097c2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ae:	f107 0208 	add.w	r2, r7, #8
 80097b2:	4610      	mov	r0, r2
 80097b4:	4798      	blx	r3
 80097b6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	3301      	adds	r3, #1
 80097bc:	2207      	movs	r2, #7
 80097be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097c0:	e00f      	b.n	80097e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80097c2:	6839      	ldr	r1, [r7, #0]
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 fa10 	bl	8009bea <USBD_CtlError>
        err++;
 80097ca:	7afb      	ldrb	r3, [r7, #11]
 80097cc:	3301      	adds	r3, #1
 80097ce:	72fb      	strb	r3, [r7, #11]
      break;
 80097d0:	e007      	b.n	80097e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80097d2:	6839      	ldr	r1, [r7, #0]
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fa08 	bl	8009bea <USBD_CtlError>
      err++;
 80097da:	7afb      	ldrb	r3, [r7, #11]
 80097dc:	3301      	adds	r3, #1
 80097de:	72fb      	strb	r3, [r7, #11]
      break;
 80097e0:	bf00      	nop
  }

  if (err != 0U)
 80097e2:	7afb      	ldrb	r3, [r7, #11]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d11e      	bne.n	8009826 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	88db      	ldrh	r3, [r3, #6]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d016      	beq.n	800981e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80097f0:	893b      	ldrh	r3, [r7, #8]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d00e      	beq.n	8009814 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	88da      	ldrh	r2, [r3, #6]
 80097fa:	893b      	ldrh	r3, [r7, #8]
 80097fc:	4293      	cmp	r3, r2
 80097fe:	bf28      	it	cs
 8009800:	4613      	movcs	r3, r2
 8009802:	b29b      	uxth	r3, r3
 8009804:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009806:	893b      	ldrh	r3, [r7, #8]
 8009808:	461a      	mov	r2, r3
 800980a:	68f9      	ldr	r1, [r7, #12]
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 fa69 	bl	8009ce4 <USBD_CtlSendData>
 8009812:	e009      	b.n	8009828 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009814:	6839      	ldr	r1, [r7, #0]
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 f9e7 	bl	8009bea <USBD_CtlError>
 800981c:	e004      	b.n	8009828 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 fa9d 	bl	8009d5e <USBD_CtlSendStatus>
 8009824:	e000      	b.n	8009828 <USBD_GetDescriptor+0x2cc>
    return;
 8009826:	bf00      	nop
  }
}
 8009828:	3710      	adds	r7, #16
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop

08009830 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	889b      	ldrh	r3, [r3, #4]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d131      	bne.n	80098a6 <USBD_SetAddress+0x76>
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	88db      	ldrh	r3, [r3, #6]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d12d      	bne.n	80098a6 <USBD_SetAddress+0x76>
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	885b      	ldrh	r3, [r3, #2]
 800984e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009850:	d829      	bhi.n	80098a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	885b      	ldrh	r3, [r3, #2]
 8009856:	b2db      	uxtb	r3, r3
 8009858:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800985c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009864:	b2db      	uxtb	r3, r3
 8009866:	2b03      	cmp	r3, #3
 8009868:	d104      	bne.n	8009874 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800986a:	6839      	ldr	r1, [r7, #0]
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 f9bc 	bl	8009bea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009872:	e01d      	b.n	80098b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	7bfa      	ldrb	r2, [r7, #15]
 8009878:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800987c:	7bfb      	ldrb	r3, [r7, #15]
 800987e:	4619      	mov	r1, r3
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 fe1b 	bl	800a4bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fa69 	bl	8009d5e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800988c:	7bfb      	ldrb	r3, [r7, #15]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d004      	beq.n	800989c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2202      	movs	r2, #2
 8009896:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800989a:	e009      	b.n	80098b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2201      	movs	r2, #1
 80098a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098a4:	e004      	b.n	80098b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80098a6:	6839      	ldr	r1, [r7, #0]
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 f99e 	bl	8009bea <USBD_CtlError>
  }
}
 80098ae:	bf00      	nop
 80098b0:	bf00      	nop
 80098b2:	3710      	adds	r7, #16
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	885b      	ldrh	r3, [r3, #2]
 80098ca:	b2da      	uxtb	r2, r3
 80098cc:	4b4e      	ldr	r3, [pc, #312]	@ (8009a08 <USBD_SetConfig+0x150>)
 80098ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80098d0:	4b4d      	ldr	r3, [pc, #308]	@ (8009a08 <USBD_SetConfig+0x150>)
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d905      	bls.n	80098e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80098d8:	6839      	ldr	r1, [r7, #0]
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 f985 	bl	8009bea <USBD_CtlError>
    return USBD_FAIL;
 80098e0:	2303      	movs	r3, #3
 80098e2:	e08c      	b.n	80099fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	2b02      	cmp	r3, #2
 80098ee:	d002      	beq.n	80098f6 <USBD_SetConfig+0x3e>
 80098f0:	2b03      	cmp	r3, #3
 80098f2:	d029      	beq.n	8009948 <USBD_SetConfig+0x90>
 80098f4:	e075      	b.n	80099e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80098f6:	4b44      	ldr	r3, [pc, #272]	@ (8009a08 <USBD_SetConfig+0x150>)
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d020      	beq.n	8009940 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80098fe:	4b42      	ldr	r3, [pc, #264]	@ (8009a08 <USBD_SetConfig+0x150>)
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	461a      	mov	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009908:	4b3f      	ldr	r3, [pc, #252]	@ (8009a08 <USBD_SetConfig+0x150>)
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	4619      	mov	r1, r3
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f7fe ffe3 	bl	80088da <USBD_SetClassConfig>
 8009914:	4603      	mov	r3, r0
 8009916:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009918:	7bfb      	ldrb	r3, [r7, #15]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d008      	beq.n	8009930 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800991e:	6839      	ldr	r1, [r7, #0]
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 f962 	bl	8009bea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2202      	movs	r2, #2
 800992a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800992e:	e065      	b.n	80099fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 fa14 	bl	8009d5e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2203      	movs	r2, #3
 800993a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800993e:	e05d      	b.n	80099fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 fa0c 	bl	8009d5e <USBD_CtlSendStatus>
      break;
 8009946:	e059      	b.n	80099fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009948:	4b2f      	ldr	r3, [pc, #188]	@ (8009a08 <USBD_SetConfig+0x150>)
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d112      	bne.n	8009976 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2202      	movs	r2, #2
 8009954:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009958:	4b2b      	ldr	r3, [pc, #172]	@ (8009a08 <USBD_SetConfig+0x150>)
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	461a      	mov	r2, r3
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009962:	4b29      	ldr	r3, [pc, #164]	@ (8009a08 <USBD_SetConfig+0x150>)
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	4619      	mov	r1, r3
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f7fe ffd2 	bl	8008912 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f9f5 	bl	8009d5e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009974:	e042      	b.n	80099fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009976:	4b24      	ldr	r3, [pc, #144]	@ (8009a08 <USBD_SetConfig+0x150>)
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	461a      	mov	r2, r3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	429a      	cmp	r2, r3
 8009982:	d02a      	beq.n	80099da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	b2db      	uxtb	r3, r3
 800998a:	4619      	mov	r1, r3
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f7fe ffc0 	bl	8008912 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009992:	4b1d      	ldr	r3, [pc, #116]	@ (8009a08 <USBD_SetConfig+0x150>)
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	461a      	mov	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800999c:	4b1a      	ldr	r3, [pc, #104]	@ (8009a08 <USBD_SetConfig+0x150>)
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	4619      	mov	r1, r3
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f7fe ff99 	bl	80088da <USBD_SetClassConfig>
 80099a8:	4603      	mov	r3, r0
 80099aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00f      	beq.n	80099d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80099b2:	6839      	ldr	r1, [r7, #0]
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 f918 	bl	8009bea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	4619      	mov	r1, r3
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f7fe ffa5 	bl	8008912 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2202      	movs	r2, #2
 80099cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80099d0:	e014      	b.n	80099fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 f9c3 	bl	8009d5e <USBD_CtlSendStatus>
      break;
 80099d8:	e010      	b.n	80099fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 f9bf 	bl	8009d5e <USBD_CtlSendStatus>
      break;
 80099e0:	e00c      	b.n	80099fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80099e2:	6839      	ldr	r1, [r7, #0]
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 f900 	bl	8009bea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80099ea:	4b07      	ldr	r3, [pc, #28]	@ (8009a08 <USBD_SetConfig+0x150>)
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	4619      	mov	r1, r3
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f7fe ff8e 	bl	8008912 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80099f6:	2303      	movs	r3, #3
 80099f8:	73fb      	strb	r3, [r7, #15]
      break;
 80099fa:	bf00      	nop
  }

  return ret;
 80099fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	20000e34 	.word	0x20000e34

08009a0c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	88db      	ldrh	r3, [r3, #6]
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d004      	beq.n	8009a28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009a1e:	6839      	ldr	r1, [r7, #0]
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 f8e2 	bl	8009bea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009a26:	e023      	b.n	8009a70 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	dc02      	bgt.n	8009a3a <USBD_GetConfig+0x2e>
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	dc03      	bgt.n	8009a40 <USBD_GetConfig+0x34>
 8009a38:	e015      	b.n	8009a66 <USBD_GetConfig+0x5a>
 8009a3a:	2b03      	cmp	r3, #3
 8009a3c:	d00b      	beq.n	8009a56 <USBD_GetConfig+0x4a>
 8009a3e:	e012      	b.n	8009a66 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	3308      	adds	r3, #8
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 f948 	bl	8009ce4 <USBD_CtlSendData>
        break;
 8009a54:	e00c      	b.n	8009a70 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	3304      	adds	r3, #4
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 f940 	bl	8009ce4 <USBD_CtlSendData>
        break;
 8009a64:	e004      	b.n	8009a70 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 f8be 	bl	8009bea <USBD_CtlError>
        break;
 8009a6e:	bf00      	nop
}
 8009a70:	bf00      	nop
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	2b02      	cmp	r3, #2
 8009a8e:	d81e      	bhi.n	8009ace <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	88db      	ldrh	r3, [r3, #6]
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	d004      	beq.n	8009aa2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009a98:	6839      	ldr	r1, [r7, #0]
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 f8a5 	bl	8009bea <USBD_CtlError>
        break;
 8009aa0:	e01a      	b.n	8009ad8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d005      	beq.n	8009abe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	f043 0202 	orr.w	r2, r3, #2
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	330c      	adds	r3, #12
 8009ac2:	2202      	movs	r2, #2
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f90c 	bl	8009ce4 <USBD_CtlSendData>
      break;
 8009acc:	e004      	b.n	8009ad8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009ace:	6839      	ldr	r1, [r7, #0]
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f88a 	bl	8009bea <USBD_CtlError>
      break;
 8009ad6:	bf00      	nop
  }
}
 8009ad8:	bf00      	nop
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	885b      	ldrh	r3, [r3, #2]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d107      	bne.n	8009b02 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2201      	movs	r2, #1
 8009af6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 f92f 	bl	8009d5e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009b00:	e013      	b.n	8009b2a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	885b      	ldrh	r3, [r3, #2]
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d10b      	bne.n	8009b22 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	889b      	ldrh	r3, [r3, #4]
 8009b0e:	0a1b      	lsrs	r3, r3, #8
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	b2da      	uxtb	r2, r3
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 f91f 	bl	8009d5e <USBD_CtlSendStatus>
}
 8009b20:	e003      	b.n	8009b2a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009b22:	6839      	ldr	r1, [r7, #0]
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 f860 	bl	8009bea <USBD_CtlError>
}
 8009b2a:	bf00      	nop
 8009b2c:	3708      	adds	r7, #8
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}

08009b32 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b32:	b580      	push	{r7, lr}
 8009b34:	b082      	sub	sp, #8
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
 8009b3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	3b01      	subs	r3, #1
 8009b46:	2b02      	cmp	r3, #2
 8009b48:	d80b      	bhi.n	8009b62 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	885b      	ldrh	r3, [r3, #2]
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d10c      	bne.n	8009b6c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2200      	movs	r2, #0
 8009b56:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 f8ff 	bl	8009d5e <USBD_CtlSendStatus>
      }
      break;
 8009b60:	e004      	b.n	8009b6c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009b62:	6839      	ldr	r1, [r7, #0]
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 f840 	bl	8009bea <USBD_CtlError>
      break;
 8009b6a:	e000      	b.n	8009b6e <USBD_ClrFeature+0x3c>
      break;
 8009b6c:	bf00      	nop
  }
}
 8009b6e:	bf00      	nop
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}

08009b76 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b084      	sub	sp, #16
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
 8009b7e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	781a      	ldrb	r2, [r3, #0]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	3301      	adds	r3, #1
 8009b90:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	781a      	ldrb	r2, [r3, #0]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	f7ff fa40 	bl	8009026 <SWAPBYTE>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	461a      	mov	r2, r3
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f7ff fa33 	bl	8009026 <SWAPBYTE>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009bd4:	68f8      	ldr	r0, [r7, #12]
 8009bd6:	f7ff fa26 	bl	8009026 <SWAPBYTE>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	461a      	mov	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	80da      	strh	r2, [r3, #6]
}
 8009be2:	bf00      	nop
 8009be4:	3710      	adds	r7, #16
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b082      	sub	sp, #8
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
 8009bf2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009bf4:	2180      	movs	r1, #128	@ 0x80
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 fbf6 	bl	800a3e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009bfc:	2100      	movs	r1, #0
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 fbf2 	bl	800a3e8 <USBD_LL_StallEP>
}
 8009c04:	bf00      	nop
 8009c06:	3708      	adds	r7, #8
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b086      	sub	sp, #24
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d042      	beq.n	8009ca8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009c26:	6938      	ldr	r0, [r7, #16]
 8009c28:	f000 f842 	bl	8009cb0 <USBD_GetLen>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	3301      	adds	r3, #1
 8009c30:	005b      	lsls	r3, r3, #1
 8009c32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c36:	d808      	bhi.n	8009c4a <USBD_GetString+0x3e>
 8009c38:	6938      	ldr	r0, [r7, #16]
 8009c3a:	f000 f839 	bl	8009cb0 <USBD_GetLen>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	3301      	adds	r3, #1
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	005b      	lsls	r3, r3, #1
 8009c46:	b29a      	uxth	r2, r3
 8009c48:	e001      	b.n	8009c4e <USBD_GetString+0x42>
 8009c4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009c52:	7dfb      	ldrb	r3, [r7, #23]
 8009c54:	68ba      	ldr	r2, [r7, #8]
 8009c56:	4413      	add	r3, r2
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	7812      	ldrb	r2, [r2, #0]
 8009c5c:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c5e:	7dfb      	ldrb	r3, [r7, #23]
 8009c60:	3301      	adds	r3, #1
 8009c62:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009c64:	7dfb      	ldrb	r3, [r7, #23]
 8009c66:	68ba      	ldr	r2, [r7, #8]
 8009c68:	4413      	add	r3, r2
 8009c6a:	2203      	movs	r2, #3
 8009c6c:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c6e:	7dfb      	ldrb	r3, [r7, #23]
 8009c70:	3301      	adds	r3, #1
 8009c72:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009c74:	e013      	b.n	8009c9e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009c76:	7dfb      	ldrb	r3, [r7, #23]
 8009c78:	68ba      	ldr	r2, [r7, #8]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	693a      	ldr	r2, [r7, #16]
 8009c7e:	7812      	ldrb	r2, [r2, #0]
 8009c80:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	3301      	adds	r3, #1
 8009c86:	613b      	str	r3, [r7, #16]
    idx++;
 8009c88:	7dfb      	ldrb	r3, [r7, #23]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009c8e:	7dfb      	ldrb	r3, [r7, #23]
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	4413      	add	r3, r2
 8009c94:	2200      	movs	r2, #0
 8009c96:	701a      	strb	r2, [r3, #0]
    idx++;
 8009c98:	7dfb      	ldrb	r3, [r7, #23]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d1e7      	bne.n	8009c76 <USBD_GetString+0x6a>
 8009ca6:	e000      	b.n	8009caa <USBD_GetString+0x9e>
    return;
 8009ca8:	bf00      	nop
  }
}
 8009caa:	3718      	adds	r7, #24
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009cc0:	e005      	b.n	8009cce <USBD_GetLen+0x1e>
  {
    len++;
 8009cc2:	7bfb      	ldrb	r3, [r7, #15]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d1f5      	bne.n	8009cc2 <USBD_GetLen+0x12>
  }

  return len;
 8009cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3714      	adds	r7, #20
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	60b9      	str	r1, [r7, #8]
 8009cee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2202      	movs	r2, #2
 8009cf4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	68ba      	ldr	r2, [r7, #8]
 8009d08:	2100      	movs	r1, #0
 8009d0a:	68f8      	ldr	r0, [r7, #12]
 8009d0c:	f000 fbf5 	bl	800a4fa <USBD_LL_Transmit>

  return USBD_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b084      	sub	sp, #16
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	60f8      	str	r0, [r7, #12]
 8009d22:	60b9      	str	r1, [r7, #8]
 8009d24:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f000 fbe4 	bl	800a4fa <USBD_LL_Transmit>

  return USBD_OK;
 8009d32:	2300      	movs	r3, #0
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3710      	adds	r7, #16
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	68ba      	ldr	r2, [r7, #8]
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f000 fbf4 	bl	800a53c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d54:	2300      	movs	r3, #0
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b082      	sub	sp, #8
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2204      	movs	r2, #4
 8009d6a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009d6e:	2300      	movs	r3, #0
 8009d70:	2200      	movs	r2, #0
 8009d72:	2100      	movs	r1, #0
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 fbc0 	bl	800a4fa <USBD_LL_Transmit>

  return USBD_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2205      	movs	r2, #5
 8009d90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d94:	2300      	movs	r3, #0
 8009d96:	2200      	movs	r2, #0
 8009d98:	2100      	movs	r1, #0
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 fbce 	bl	800a53c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3708      	adds	r7, #8
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
	...

08009dac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009db0:	2200      	movs	r2, #0
 8009db2:	490e      	ldr	r1, [pc, #56]	@ (8009dec <MX_USB_DEVICE_Init+0x40>)
 8009db4:	480e      	ldr	r0, [pc, #56]	@ (8009df0 <MX_USB_DEVICE_Init+0x44>)
 8009db6:	f7fe fd13 	bl	80087e0 <USBD_Init>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d001      	beq.n	8009dc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009dc0:	f7f7 fa34 	bl	800122c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009dc4:	490b      	ldr	r1, [pc, #44]	@ (8009df4 <MX_USB_DEVICE_Init+0x48>)
 8009dc6:	480a      	ldr	r0, [pc, #40]	@ (8009df0 <MX_USB_DEVICE_Init+0x44>)
 8009dc8:	f7fe fd3a 	bl	8008840 <USBD_RegisterClass>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d001      	beq.n	8009dd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009dd2:	f7f7 fa2b 	bl	800122c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009dd6:	4806      	ldr	r0, [pc, #24]	@ (8009df0 <MX_USB_DEVICE_Init+0x44>)
 8009dd8:	f7fe fd68 	bl	80088ac <USBD_Start>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d001      	beq.n	8009de6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8009de2:	f7f7 fa23 	bl	800122c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009de6:	bf00      	nop
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	20000110 	.word	0x20000110
 8009df0:	20000e38 	.word	0x20000e38
 8009df4:	2000000c 	.word	0x2000000c

08009df8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	4603      	mov	r3, r0
 8009e00:	6039      	str	r1, [r7, #0]
 8009e02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	2212      	movs	r2, #18
 8009e08:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009e0a:	4b03      	ldr	r3, [pc, #12]	@ (8009e18 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr
 8009e18:	2000012c 	.word	0x2000012c

08009e1c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	4603      	mov	r3, r0
 8009e24:	6039      	str	r1, [r7, #0]
 8009e26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	2204      	movs	r2, #4
 8009e2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009e2e:	4b03      	ldr	r3, [pc, #12]	@ (8009e3c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr
 8009e3c:	20000140 	.word	0x20000140

08009e40 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	4603      	mov	r3, r0
 8009e48:	6039      	str	r1, [r7, #0]
 8009e4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e4c:	79fb      	ldrb	r3, [r7, #7]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d105      	bne.n	8009e5e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e52:	683a      	ldr	r2, [r7, #0]
 8009e54:	4907      	ldr	r1, [pc, #28]	@ (8009e74 <USBD_FS_ProductStrDescriptor+0x34>)
 8009e56:	4808      	ldr	r0, [pc, #32]	@ (8009e78 <USBD_FS_ProductStrDescriptor+0x38>)
 8009e58:	f7ff fed8 	bl	8009c0c <USBD_GetString>
 8009e5c:	e004      	b.n	8009e68 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e5e:	683a      	ldr	r2, [r7, #0]
 8009e60:	4904      	ldr	r1, [pc, #16]	@ (8009e74 <USBD_FS_ProductStrDescriptor+0x34>)
 8009e62:	4805      	ldr	r0, [pc, #20]	@ (8009e78 <USBD_FS_ProductStrDescriptor+0x38>)
 8009e64:	f7ff fed2 	bl	8009c0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e68:	4b02      	ldr	r3, [pc, #8]	@ (8009e74 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3708      	adds	r7, #8
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	20001114 	.word	0x20001114
 8009e78:	0800a678 	.word	0x0800a678

08009e7c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	4603      	mov	r3, r0
 8009e84:	6039      	str	r1, [r7, #0]
 8009e86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009e88:	683a      	ldr	r2, [r7, #0]
 8009e8a:	4904      	ldr	r1, [pc, #16]	@ (8009e9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009e8c:	4804      	ldr	r0, [pc, #16]	@ (8009ea0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009e8e:	f7ff febd 	bl	8009c0c <USBD_GetString>
  return USBD_StrDesc;
 8009e92:	4b02      	ldr	r3, [pc, #8]	@ (8009e9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3708      	adds	r7, #8
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	20001114 	.word	0x20001114
 8009ea0:	0800a690 	.word	0x0800a690

08009ea4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	4603      	mov	r3, r0
 8009eac:	6039      	str	r1, [r7, #0]
 8009eae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	221a      	movs	r2, #26
 8009eb4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009eb6:	f000 f843 	bl	8009f40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009eba:	4b02      	ldr	r3, [pc, #8]	@ (8009ec4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3708      	adds	r7, #8
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	20000144 	.word	0x20000144

08009ec8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	4603      	mov	r3, r0
 8009ed0:	6039      	str	r1, [r7, #0]
 8009ed2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009ed4:	79fb      	ldrb	r3, [r7, #7]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d105      	bne.n	8009ee6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009eda:	683a      	ldr	r2, [r7, #0]
 8009edc:	4907      	ldr	r1, [pc, #28]	@ (8009efc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009ede:	4808      	ldr	r0, [pc, #32]	@ (8009f00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ee0:	f7ff fe94 	bl	8009c0c <USBD_GetString>
 8009ee4:	e004      	b.n	8009ef0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ee6:	683a      	ldr	r2, [r7, #0]
 8009ee8:	4904      	ldr	r1, [pc, #16]	@ (8009efc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009eea:	4805      	ldr	r0, [pc, #20]	@ (8009f00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009eec:	f7ff fe8e 	bl	8009c0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ef0:	4b02      	ldr	r3, [pc, #8]	@ (8009efc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	20001114 	.word	0x20001114
 8009f00:	0800a6a4 	.word	0x0800a6a4

08009f04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	6039      	str	r1, [r7, #0]
 8009f0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f10:	79fb      	ldrb	r3, [r7, #7]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d105      	bne.n	8009f22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f16:	683a      	ldr	r2, [r7, #0]
 8009f18:	4907      	ldr	r1, [pc, #28]	@ (8009f38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009f1a:	4808      	ldr	r0, [pc, #32]	@ (8009f3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009f1c:	f7ff fe76 	bl	8009c0c <USBD_GetString>
 8009f20:	e004      	b.n	8009f2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f22:	683a      	ldr	r2, [r7, #0]
 8009f24:	4904      	ldr	r1, [pc, #16]	@ (8009f38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009f26:	4805      	ldr	r0, [pc, #20]	@ (8009f3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009f28:	f7ff fe70 	bl	8009c0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f2c:	4b02      	ldr	r3, [pc, #8]	@ (8009f38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	20001114 	.word	0x20001114
 8009f3c:	0800a6b0 	.word	0x0800a6b0

08009f40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009f46:	4b0f      	ldr	r3, [pc, #60]	@ (8009f84 <Get_SerialNum+0x44>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8009f88 <Get_SerialNum+0x48>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009f52:	4b0e      	ldr	r3, [pc, #56]	@ (8009f8c <Get_SerialNum+0x4c>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d009      	beq.n	8009f7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009f66:	2208      	movs	r2, #8
 8009f68:	4909      	ldr	r1, [pc, #36]	@ (8009f90 <Get_SerialNum+0x50>)
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f000 f814 	bl	8009f98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009f70:	2204      	movs	r2, #4
 8009f72:	4908      	ldr	r1, [pc, #32]	@ (8009f94 <Get_SerialNum+0x54>)
 8009f74:	68b8      	ldr	r0, [r7, #8]
 8009f76:	f000 f80f 	bl	8009f98 <IntToUnicode>
  }
}
 8009f7a:	bf00      	nop
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	1fff7a10 	.word	0x1fff7a10
 8009f88:	1fff7a14 	.word	0x1fff7a14
 8009f8c:	1fff7a18 	.word	0x1fff7a18
 8009f90:	20000146 	.word	0x20000146
 8009f94:	20000156 	.word	0x20000156

08009f98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b087      	sub	sp, #28
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009faa:	2300      	movs	r3, #0
 8009fac:	75fb      	strb	r3, [r7, #23]
 8009fae:	e027      	b.n	800a000 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	0f1b      	lsrs	r3, r3, #28
 8009fb4:	2b09      	cmp	r3, #9
 8009fb6:	d80b      	bhi.n	8009fd0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	0f1b      	lsrs	r3, r3, #28
 8009fbc:	b2da      	uxtb	r2, r3
 8009fbe:	7dfb      	ldrb	r3, [r7, #23]
 8009fc0:	005b      	lsls	r3, r3, #1
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	440b      	add	r3, r1
 8009fc8:	3230      	adds	r2, #48	@ 0x30
 8009fca:	b2d2      	uxtb	r2, r2
 8009fcc:	701a      	strb	r2, [r3, #0]
 8009fce:	e00a      	b.n	8009fe6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	0f1b      	lsrs	r3, r3, #28
 8009fd4:	b2da      	uxtb	r2, r3
 8009fd6:	7dfb      	ldrb	r3, [r7, #23]
 8009fd8:	005b      	lsls	r3, r3, #1
 8009fda:	4619      	mov	r1, r3
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	440b      	add	r3, r1
 8009fe0:	3237      	adds	r2, #55	@ 0x37
 8009fe2:	b2d2      	uxtb	r2, r2
 8009fe4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	011b      	lsls	r3, r3, #4
 8009fea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009fec:	7dfb      	ldrb	r3, [r7, #23]
 8009fee:	005b      	lsls	r3, r3, #1
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	68ba      	ldr	r2, [r7, #8]
 8009ff4:	4413      	add	r3, r2
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009ffa:	7dfb      	ldrb	r3, [r7, #23]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	75fb      	strb	r3, [r7, #23]
 800a000:	7dfa      	ldrb	r2, [r7, #23]
 800a002:	79fb      	ldrb	r3, [r7, #7]
 800a004:	429a      	cmp	r2, r3
 800a006:	d3d3      	bcc.n	8009fb0 <IntToUnicode+0x18>
  }
}
 800a008:	bf00      	nop
 800a00a:	bf00      	nop
 800a00c:	371c      	adds	r7, #28
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr
	...

0800a018 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b08a      	sub	sp, #40	@ 0x28
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a020:	f107 0314 	add.w	r3, r7, #20
 800a024:	2200      	movs	r2, #0
 800a026:	601a      	str	r2, [r3, #0]
 800a028:	605a      	str	r2, [r3, #4]
 800a02a:	609a      	str	r2, [r3, #8]
 800a02c:	60da      	str	r2, [r3, #12]
 800a02e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a038:	d13a      	bne.n	800a0b0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a03a:	2300      	movs	r3, #0
 800a03c:	613b      	str	r3, [r7, #16]
 800a03e:	4b1e      	ldr	r3, [pc, #120]	@ (800a0b8 <HAL_PCD_MspInit+0xa0>)
 800a040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a042:	4a1d      	ldr	r2, [pc, #116]	@ (800a0b8 <HAL_PCD_MspInit+0xa0>)
 800a044:	f043 0301 	orr.w	r3, r3, #1
 800a048:	6313      	str	r3, [r2, #48]	@ 0x30
 800a04a:	4b1b      	ldr	r3, [pc, #108]	@ (800a0b8 <HAL_PCD_MspInit+0xa0>)
 800a04c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a04e:	f003 0301 	and.w	r3, r3, #1
 800a052:	613b      	str	r3, [r7, #16]
 800a054:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a056:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a05a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a05c:	2302      	movs	r3, #2
 800a05e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a060:	2300      	movs	r3, #0
 800a062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a064:	2303      	movs	r3, #3
 800a066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a068:	230a      	movs	r3, #10
 800a06a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a06c:	f107 0314 	add.w	r3, r7, #20
 800a070:	4619      	mov	r1, r3
 800a072:	4812      	ldr	r0, [pc, #72]	@ (800a0bc <HAL_PCD_MspInit+0xa4>)
 800a074:	f7f9 fbb2 	bl	80037dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a078:	4b0f      	ldr	r3, [pc, #60]	@ (800a0b8 <HAL_PCD_MspInit+0xa0>)
 800a07a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a07c:	4a0e      	ldr	r2, [pc, #56]	@ (800a0b8 <HAL_PCD_MspInit+0xa0>)
 800a07e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a082:	6353      	str	r3, [r2, #52]	@ 0x34
 800a084:	2300      	movs	r3, #0
 800a086:	60fb      	str	r3, [r7, #12]
 800a088:	4b0b      	ldr	r3, [pc, #44]	@ (800a0b8 <HAL_PCD_MspInit+0xa0>)
 800a08a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a08c:	4a0a      	ldr	r2, [pc, #40]	@ (800a0b8 <HAL_PCD_MspInit+0xa0>)
 800a08e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a092:	6453      	str	r3, [r2, #68]	@ 0x44
 800a094:	4b08      	ldr	r3, [pc, #32]	@ (800a0b8 <HAL_PCD_MspInit+0xa0>)
 800a096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a098:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a09c:	60fb      	str	r3, [r7, #12]
 800a09e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	2100      	movs	r1, #0
 800a0a4:	2043      	movs	r0, #67	@ 0x43
 800a0a6:	f7f8 ffd0 	bl	800304a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a0aa:	2043      	movs	r0, #67	@ 0x43
 800a0ac:	f7f8 ffe9 	bl	8003082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a0b0:	bf00      	nop
 800a0b2:	3728      	adds	r7, #40	@ 0x28
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	40023800 	.word	0x40023800
 800a0bc:	40020000 	.word	0x40020000

0800a0c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	4610      	mov	r0, r2
 800a0d8:	f7fe fc35 	bl	8008946 <USBD_LL_SetupStage>
}
 800a0dc:	bf00      	nop
 800a0de:	3708      	adds	r7, #8
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a0f6:	78fa      	ldrb	r2, [r7, #3]
 800a0f8:	6879      	ldr	r1, [r7, #4]
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	00db      	lsls	r3, r3, #3
 800a0fe:	4413      	add	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	440b      	add	r3, r1
 800a104:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a108:	681a      	ldr	r2, [r3, #0]
 800a10a:	78fb      	ldrb	r3, [r7, #3]
 800a10c:	4619      	mov	r1, r3
 800a10e:	f7fe fc6f 	bl	80089f0 <USBD_LL_DataOutStage>
}
 800a112:	bf00      	nop
 800a114:	3708      	adds	r7, #8
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b082      	sub	sp, #8
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
 800a122:	460b      	mov	r3, r1
 800a124:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a12c:	78fa      	ldrb	r2, [r7, #3]
 800a12e:	6879      	ldr	r1, [r7, #4]
 800a130:	4613      	mov	r3, r2
 800a132:	00db      	lsls	r3, r3, #3
 800a134:	4413      	add	r3, r2
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	440b      	add	r3, r1
 800a13a:	3320      	adds	r3, #32
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	78fb      	ldrb	r3, [r7, #3]
 800a140:	4619      	mov	r1, r3
 800a142:	f7fe fd08 	bl	8008b56 <USBD_LL_DataInStage>
}
 800a146:	bf00      	nop
 800a148:	3708      	adds	r7, #8
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b082      	sub	sp, #8
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7fe fe42 	bl	8008de6 <USBD_LL_SOF>
}
 800a162:	bf00      	nop
 800a164:	3708      	adds	r7, #8
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b084      	sub	sp, #16
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a172:	2301      	movs	r3, #1
 800a174:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	79db      	ldrb	r3, [r3, #7]
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d001      	beq.n	800a182 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a17e:	f7f7 f855 	bl	800122c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a188:	7bfa      	ldrb	r2, [r7, #15]
 800a18a:	4611      	mov	r1, r2
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7fe fde6 	bl	8008d5e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a198:	4618      	mov	r0, r3
 800a19a:	f7fe fd8e 	bl	8008cba <USBD_LL_Reset>
}
 800a19e:	bf00      	nop
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
	...

0800a1a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7fe fde1 	bl	8008d7e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	6812      	ldr	r2, [r2, #0]
 800a1ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a1ce:	f043 0301 	orr.w	r3, r3, #1
 800a1d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	7adb      	ldrb	r3, [r3, #11]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d005      	beq.n	800a1e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a1dc:	4b04      	ldr	r3, [pc, #16]	@ (800a1f0 <HAL_PCD_SuspendCallback+0x48>)
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	4a03      	ldr	r2, [pc, #12]	@ (800a1f0 <HAL_PCD_SuspendCallback+0x48>)
 800a1e2:	f043 0306 	orr.w	r3, r3, #6
 800a1e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a1e8:	bf00      	nop
 800a1ea:	3708      	adds	r7, #8
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	e000ed00 	.word	0xe000ed00

0800a1f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a202:	4618      	mov	r0, r3
 800a204:	f7fe fdd7 	bl	8008db6 <USBD_LL_Resume>
}
 800a208:	bf00      	nop
 800a20a:	3708      	adds	r7, #8
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	460b      	mov	r3, r1
 800a21a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a222:	78fa      	ldrb	r2, [r7, #3]
 800a224:	4611      	mov	r1, r2
 800a226:	4618      	mov	r0, r3
 800a228:	f7fe fe2f 	bl	8008e8a <USBD_LL_IsoOUTIncomplete>
}
 800a22c:	bf00      	nop
 800a22e:	3708      	adds	r7, #8
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	460b      	mov	r3, r1
 800a23e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a246:	78fa      	ldrb	r2, [r7, #3]
 800a248:	4611      	mov	r1, r2
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7fe fdeb 	bl	8008e26 <USBD_LL_IsoINIncomplete>
}
 800a250:	bf00      	nop
 800a252:	3708      	adds	r7, #8
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a266:	4618      	mov	r0, r3
 800a268:	f7fe fe41 	bl	8008eee <USBD_LL_DevConnected>
}
 800a26c:	bf00      	nop
 800a26e:	3708      	adds	r7, #8
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a282:	4618      	mov	r0, r3
 800a284:	f7fe fe3e 	bl	8008f04 <USBD_LL_DevDisconnected>
}
 800a288:	bf00      	nop
 800a28a:	3708      	adds	r7, #8
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d13c      	bne.n	800a31a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a2a0:	4a20      	ldr	r2, [pc, #128]	@ (800a324 <USBD_LL_Init+0x94>)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	4a1e      	ldr	r2, [pc, #120]	@ (800a324 <USBD_LL_Init+0x94>)
 800a2ac:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a2b0:	4b1c      	ldr	r3, [pc, #112]	@ (800a324 <USBD_LL_Init+0x94>)
 800a2b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a2b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a2b8:	4b1a      	ldr	r3, [pc, #104]	@ (800a324 <USBD_LL_Init+0x94>)
 800a2ba:	2204      	movs	r2, #4
 800a2bc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a2be:	4b19      	ldr	r3, [pc, #100]	@ (800a324 <USBD_LL_Init+0x94>)
 800a2c0:	2202      	movs	r2, #2
 800a2c2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a2c4:	4b17      	ldr	r3, [pc, #92]	@ (800a324 <USBD_LL_Init+0x94>)
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a2ca:	4b16      	ldr	r3, [pc, #88]	@ (800a324 <USBD_LL_Init+0x94>)
 800a2cc:	2202      	movs	r2, #2
 800a2ce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a2d0:	4b14      	ldr	r3, [pc, #80]	@ (800a324 <USBD_LL_Init+0x94>)
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a2d6:	4b13      	ldr	r3, [pc, #76]	@ (800a324 <USBD_LL_Init+0x94>)
 800a2d8:	2200      	movs	r2, #0
 800a2da:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a2dc:	4b11      	ldr	r3, [pc, #68]	@ (800a324 <USBD_LL_Init+0x94>)
 800a2de:	2200      	movs	r2, #0
 800a2e0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a2e2:	4b10      	ldr	r3, [pc, #64]	@ (800a324 <USBD_LL_Init+0x94>)
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a2e8:	4b0e      	ldr	r3, [pc, #56]	@ (800a324 <USBD_LL_Init+0x94>)
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a2ee:	480d      	ldr	r0, [pc, #52]	@ (800a324 <USBD_LL_Init+0x94>)
 800a2f0:	f7f9 fc11 	bl	8003b16 <HAL_PCD_Init>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d001      	beq.n	800a2fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a2fa:	f7f6 ff97 	bl	800122c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a2fe:	2180      	movs	r1, #128	@ 0x80
 800a300:	4808      	ldr	r0, [pc, #32]	@ (800a324 <USBD_LL_Init+0x94>)
 800a302:	f7fa fe26 	bl	8004f52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a306:	2240      	movs	r2, #64	@ 0x40
 800a308:	2100      	movs	r1, #0
 800a30a:	4806      	ldr	r0, [pc, #24]	@ (800a324 <USBD_LL_Init+0x94>)
 800a30c:	f7fa fdda 	bl	8004ec4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a310:	2280      	movs	r2, #128	@ 0x80
 800a312:	2101      	movs	r1, #1
 800a314:	4803      	ldr	r0, [pc, #12]	@ (800a324 <USBD_LL_Init+0x94>)
 800a316:	f7fa fdd5 	bl	8004ec4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3708      	adds	r7, #8
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	20001314 	.word	0x20001314

0800a328 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a330:	2300      	movs	r3, #0
 800a332:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a334:	2300      	movs	r3, #0
 800a336:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a33e:	4618      	mov	r0, r3
 800a340:	f7f9 fcf8 	bl	8003d34 <HAL_PCD_Start>
 800a344:	4603      	mov	r3, r0
 800a346:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a348:	7bfb      	ldrb	r3, [r7, #15]
 800a34a:	4618      	mov	r0, r3
 800a34c:	f000 f930 	bl	800a5b0 <USBD_Get_USB_Status>
 800a350:	4603      	mov	r3, r0
 800a352:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a354:	7bbb      	ldrb	r3, [r7, #14]
}
 800a356:	4618      	mov	r0, r3
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b084      	sub	sp, #16
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
 800a366:	4608      	mov	r0, r1
 800a368:	4611      	mov	r1, r2
 800a36a:	461a      	mov	r2, r3
 800a36c:	4603      	mov	r3, r0
 800a36e:	70fb      	strb	r3, [r7, #3]
 800a370:	460b      	mov	r3, r1
 800a372:	70bb      	strb	r3, [r7, #2]
 800a374:	4613      	mov	r3, r2
 800a376:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a378:	2300      	movs	r3, #0
 800a37a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a37c:	2300      	movs	r3, #0
 800a37e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a386:	78bb      	ldrb	r3, [r7, #2]
 800a388:	883a      	ldrh	r2, [r7, #0]
 800a38a:	78f9      	ldrb	r1, [r7, #3]
 800a38c:	f7fa f9cc 	bl	8004728 <HAL_PCD_EP_Open>
 800a390:	4603      	mov	r3, r0
 800a392:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a394:	7bfb      	ldrb	r3, [r7, #15]
 800a396:	4618      	mov	r0, r3
 800a398:	f000 f90a 	bl	800a5b0 <USBD_Get_USB_Status>
 800a39c:	4603      	mov	r3, r0
 800a39e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b084      	sub	sp, #16
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a3c4:	78fa      	ldrb	r2, [r7, #3]
 800a3c6:	4611      	mov	r1, r2
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7fa fa17 	bl	80047fc <HAL_PCD_EP_Close>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3d2:	7bfb      	ldrb	r3, [r7, #15]
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f000 f8eb 	bl	800a5b0 <USBD_Get_USB_Status>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3de:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3710      	adds	r7, #16
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a402:	78fa      	ldrb	r2, [r7, #3]
 800a404:	4611      	mov	r1, r2
 800a406:	4618      	mov	r0, r3
 800a408:	f7fa fab7 	bl	800497a <HAL_PCD_EP_SetStall>
 800a40c:	4603      	mov	r3, r0
 800a40e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a410:	7bfb      	ldrb	r3, [r7, #15]
 800a412:	4618      	mov	r0, r3
 800a414:	f000 f8cc 	bl	800a5b0 <USBD_Get_USB_Status>
 800a418:	4603      	mov	r3, r0
 800a41a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a41c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a426:	b580      	push	{r7, lr}
 800a428:	b084      	sub	sp, #16
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
 800a42e:	460b      	mov	r3, r1
 800a430:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a432:	2300      	movs	r3, #0
 800a434:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a436:	2300      	movs	r3, #0
 800a438:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a440:	78fa      	ldrb	r2, [r7, #3]
 800a442:	4611      	mov	r1, r2
 800a444:	4618      	mov	r0, r3
 800a446:	f7fa fafb 	bl	8004a40 <HAL_PCD_EP_ClrStall>
 800a44a:	4603      	mov	r3, r0
 800a44c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a44e:	7bfb      	ldrb	r3, [r7, #15]
 800a450:	4618      	mov	r0, r3
 800a452:	f000 f8ad 	bl	800a5b0 <USBD_Get_USB_Status>
 800a456:	4603      	mov	r3, r0
 800a458:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a45a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	460b      	mov	r3, r1
 800a46e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a476:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a478:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	da0b      	bge.n	800a498 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a480:	78fb      	ldrb	r3, [r7, #3]
 800a482:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a486:	68f9      	ldr	r1, [r7, #12]
 800a488:	4613      	mov	r3, r2
 800a48a:	00db      	lsls	r3, r3, #3
 800a48c:	4413      	add	r3, r2
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	440b      	add	r3, r1
 800a492:	3316      	adds	r3, #22
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	e00b      	b.n	800a4b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a498:	78fb      	ldrb	r3, [r7, #3]
 800a49a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a49e:	68f9      	ldr	r1, [r7, #12]
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	00db      	lsls	r3, r3, #3
 800a4a4:	4413      	add	r3, r2
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	440b      	add	r3, r1
 800a4aa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a4ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3714      	adds	r7, #20
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr

0800a4bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a4d6:	78fa      	ldrb	r2, [r7, #3]
 800a4d8:	4611      	mov	r1, r2
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7fa f900 	bl	80046e0 <HAL_PCD_SetAddress>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4e4:	7bfb      	ldrb	r3, [r7, #15]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f000 f862 	bl	800a5b0 <USBD_Get_USB_Status>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b086      	sub	sp, #24
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	60f8      	str	r0, [r7, #12]
 800a502:	607a      	str	r2, [r7, #4]
 800a504:	603b      	str	r3, [r7, #0]
 800a506:	460b      	mov	r3, r1
 800a508:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a50a:	2300      	movs	r3, #0
 800a50c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a50e:	2300      	movs	r3, #0
 800a510:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a518:	7af9      	ldrb	r1, [r7, #11]
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	f7fa f9f2 	bl	8004906 <HAL_PCD_EP_Transmit>
 800a522:	4603      	mov	r3, r0
 800a524:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a526:	7dfb      	ldrb	r3, [r7, #23]
 800a528:	4618      	mov	r0, r3
 800a52a:	f000 f841 	bl	800a5b0 <USBD_Get_USB_Status>
 800a52e:	4603      	mov	r3, r0
 800a530:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a532:	7dbb      	ldrb	r3, [r7, #22]
}
 800a534:	4618      	mov	r0, r3
 800a536:	3718      	adds	r7, #24
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b086      	sub	sp, #24
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	607a      	str	r2, [r7, #4]
 800a546:	603b      	str	r3, [r7, #0]
 800a548:	460b      	mov	r3, r1
 800a54a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a54c:	2300      	movs	r3, #0
 800a54e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a550:	2300      	movs	r3, #0
 800a552:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a55a:	7af9      	ldrb	r1, [r7, #11]
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	f7fa f996 	bl	8004890 <HAL_PCD_EP_Receive>
 800a564:	4603      	mov	r3, r0
 800a566:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a568:	7dfb      	ldrb	r3, [r7, #23]
 800a56a:	4618      	mov	r0, r3
 800a56c:	f000 f820 	bl	800a5b0 <USBD_Get_USB_Status>
 800a570:	4603      	mov	r3, r0
 800a572:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a574:	7dbb      	ldrb	r3, [r7, #22]
}
 800a576:	4618      	mov	r0, r3
 800a578:	3718      	adds	r7, #24
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
	...

0800a580 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a588:	4b03      	ldr	r3, [pc, #12]	@ (800a598 <USBD_static_malloc+0x18>)
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	370c      	adds	r7, #12
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr
 800a596:	bf00      	nop
 800a598:	200017f8 	.word	0x200017f8

0800a59c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]

}
 800a5a4:	bf00      	nop
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b085      	sub	sp, #20
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a5be:	79fb      	ldrb	r3, [r7, #7]
 800a5c0:	2b03      	cmp	r3, #3
 800a5c2:	d817      	bhi.n	800a5f4 <USBD_Get_USB_Status+0x44>
 800a5c4:	a201      	add	r2, pc, #4	@ (adr r2, 800a5cc <USBD_Get_USB_Status+0x1c>)
 800a5c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ca:	bf00      	nop
 800a5cc:	0800a5dd 	.word	0x0800a5dd
 800a5d0:	0800a5e3 	.word	0x0800a5e3
 800a5d4:	0800a5e9 	.word	0x0800a5e9
 800a5d8:	0800a5ef 	.word	0x0800a5ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	73fb      	strb	r3, [r7, #15]
    break;
 800a5e0:	e00b      	b.n	800a5fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a5e2:	2303      	movs	r3, #3
 800a5e4:	73fb      	strb	r3, [r7, #15]
    break;
 800a5e6:	e008      	b.n	800a5fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	73fb      	strb	r3, [r7, #15]
    break;
 800a5ec:	e005      	b.n	800a5fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a5ee:	2303      	movs	r3, #3
 800a5f0:	73fb      	strb	r3, [r7, #15]
    break;
 800a5f2:	e002      	b.n	800a5fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a5f4:	2303      	movs	r3, #3
 800a5f6:	73fb      	strb	r3, [r7, #15]
    break;
 800a5f8:	bf00      	nop
  }
  return usb_status;
 800a5fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3714      	adds	r7, #20
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <memset>:
 800a608:	4402      	add	r2, r0
 800a60a:	4603      	mov	r3, r0
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d100      	bne.n	800a612 <memset+0xa>
 800a610:	4770      	bx	lr
 800a612:	f803 1b01 	strb.w	r1, [r3], #1
 800a616:	e7f9      	b.n	800a60c <memset+0x4>

0800a618 <__libc_init_array>:
 800a618:	b570      	push	{r4, r5, r6, lr}
 800a61a:	4d0d      	ldr	r5, [pc, #52]	@ (800a650 <__libc_init_array+0x38>)
 800a61c:	4c0d      	ldr	r4, [pc, #52]	@ (800a654 <__libc_init_array+0x3c>)
 800a61e:	1b64      	subs	r4, r4, r5
 800a620:	10a4      	asrs	r4, r4, #2
 800a622:	2600      	movs	r6, #0
 800a624:	42a6      	cmp	r6, r4
 800a626:	d109      	bne.n	800a63c <__libc_init_array+0x24>
 800a628:	4d0b      	ldr	r5, [pc, #44]	@ (800a658 <__libc_init_array+0x40>)
 800a62a:	4c0c      	ldr	r4, [pc, #48]	@ (800a65c <__libc_init_array+0x44>)
 800a62c:	f000 f818 	bl	800a660 <_init>
 800a630:	1b64      	subs	r4, r4, r5
 800a632:	10a4      	asrs	r4, r4, #2
 800a634:	2600      	movs	r6, #0
 800a636:	42a6      	cmp	r6, r4
 800a638:	d105      	bne.n	800a646 <__libc_init_array+0x2e>
 800a63a:	bd70      	pop	{r4, r5, r6, pc}
 800a63c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a640:	4798      	blx	r3
 800a642:	3601      	adds	r6, #1
 800a644:	e7ee      	b.n	800a624 <__libc_init_array+0xc>
 800a646:	f855 3b04 	ldr.w	r3, [r5], #4
 800a64a:	4798      	blx	r3
 800a64c:	3601      	adds	r6, #1
 800a64e:	e7f2      	b.n	800a636 <__libc_init_array+0x1e>
 800a650:	0800a788 	.word	0x0800a788
 800a654:	0800a788 	.word	0x0800a788
 800a658:	0800a788 	.word	0x0800a788
 800a65c:	0800a78c 	.word	0x0800a78c

0800a660 <_init>:
 800a660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a662:	bf00      	nop
 800a664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a666:	bc08      	pop	{r3}
 800a668:	469e      	mov	lr, r3
 800a66a:	4770      	bx	lr

0800a66c <_fini>:
 800a66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a66e:	bf00      	nop
 800a670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a672:	bc08      	pop	{r3}
 800a674:	469e      	mov	lr, r3
 800a676:	4770      	bx	lr
